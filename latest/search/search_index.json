{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kiara plugin: streamlit","text":"<p>This package contains a set of commonly used/useful modules, pipelines, types and metadata schemas for Kiara.</p>"},{"location":"#description","title":"Description","text":"<p>Streamlit UI and widgets for kiara</p>"},{"location":"#package-content","title":"Package content","text":""},{"location":"#module_types","title":"module_types","text":"<ul> <li><code>dummy</code>: -- n/a --</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Documentation: https://DHARPA-Project.github.io/kiara_plugin.streamlit</li> <li>Code: https://github.com/DHARPA-Project/kiara_plugin.streamlit</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Package contents</li> <li>Usage</li> <li>Development</li> <li>API reference</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#prepare-development-environment","title":"Prepare development environment","text":""},{"location":"development/#using-conda-recommended","title":"Using conda (recommended)","text":"<pre><code>conda create -n streamlit python=3.9\nconda activate streamlit\nconda install -c conda-forge mamba   # this is optional, but makes everything install related much faster, if you don't use it, replace 'mamba' with 'conda' below\nmamba install -c conda-forge -c dharpa kiara\nmamba install -c conda-forge -c dharpa kiara_plugin.core_types kiara_plugin.tabular   # optional, adjust which plugin packages you depend on, those two are quite common\n</code></pre>"},{"location":"development/#using-python-venv","title":"Using Python venv","text":"<p>Later, alligator.</p>"},{"location":"development/#check-out-the-source-code","title":"Check out the source code","text":"<p>First, fork the kiara_plugin.streamlit repository into your personal Github account.</p> <p>Then, use the resulting url (in my case: https://github.com/makkus/kiara_modules.streamlit.git) to clone the repository locally:</p> <pre><code>https://github.com/&lt;YOUR_FORKED_GITHUB_ID&gt;/kiara_plugin.streamlit\n</code></pre>"},{"location":"development/#install-the-kiara-plugin-package-into-it","title":"Install the kiara plugin package into it","text":"<pre><code>cd kiara_plugin.streamlit\npip install -e '.[all_dev]'\n</code></pre> <p>Here we use the <code>-e</code> option for the <code>pip install</code> command. This installs the local folder as a package in development mode into the current environment. Development mode makes it so that if you change any of the files in this folder, the Python environment will pick it up automatically, and whenever you run anything in this environment the latest version of your code/files are used.</p> <p>We also install a few additional requirements  (the <code>[all_dev]</code> part in the command above) that are not strictly necessary for <code>kiara</code> itself, or this package, but help with various development-related tasks.</p>"},{"location":"development/#install-some-pre-commit-check-tooling-optional","title":"Install some pre-commit check tooling (optional)","text":"<p>This step is optional, but helps with keeping the code clean and CI from failing. By installing pre-commit hooks like here, whenever you do a <code>git commit</code> in this repo, a series of checks and cleanup tasks are run, until everything is in a state that will hopefully make Github Actions not complain when you push your changes.</p> <pre><code>pre-commit install\npre-commit install --hook-type commit-msg\n</code></pre> <p>In addition to some Python-specific checks and cleanup tasks, this will also check your commit message so it's in line with the suggested format: https://www.conventionalcommits.org/en/v1.0.0/</p>"},{"location":"development/#run-kiara","title":"Run kiara","text":"<p>To check if everything works as expected and you can start adding/changing code in this repository, run any <code>kiara</code> command:</p> <pre><code>kiara operation list -t streamlit\n</code></pre> <p>If everything is set up correctly, the output of this command should contain a few operations that are implemented in this repository.</p>"},{"location":"usage/","title":"Usage","text":"<p>TO BE DONE</p>"},{"location":"info/SUMMARY/","title":"SUMMARY","text":"<ul> <li>module_types</li> </ul>"},{"location":"info/module_types/","title":"module_types","text":""},{"location":"info/module_types/#kiara_info.module_types.dummy","title":"<code>dummy</code>","text":"type_name dummy The registered name for this item type. documentation <p>-- n/a --</p> Documentation for the item. authors <ul> <li>Markus Binsteiner ( markus@frkl.io )</li> </ul> Information about authorship for the item. context tags streamlit labels <ul> <li>package: kiara_plugin.streamlit</li> </ul> references <ul> <li>source_repo: The module package git repository.</li> <li>documentation: The url for the module package documentation.</li> </ul> Generic properties of this item (description, tags, labels, references, ...). python_class python_class_name Dummymodule The name of the Python class. python_module_name kiara_plugin.streamlit.modules The name of the Python module this class lives in. full_name kiara_plugin.streamlit.modules.Dummymodule The full class namespace. The python class that implements this module type. module_src class Dummymodule(KiaraModule):      _module_type_name = \"dummy\"     _config_cls = DummyModuleConfig      def create_inputs_schema(         self,     ) -&gt; ValueMapSchema:          result = {}         v: Mapping[str, Any]         for k, v in self.get_config_value(\"inputs_schema\").items():             data = {                 \"type\": v[\"type\"],                 \"doc\": v.get(\"doc\", \"-- n/a --\"),                 \"optional\": v.get(\"optional\", True),             }             result[k] = data          return result      def create_outputs_schema(         self,     ) -&gt; ValueMapSchema:          result = {}         for k, v in self.get_config_value(\"outputs_schema\").items():             data = {                 \"type\": v[\"type\"],                 \"doc\": v.get(\"doc\", \"-- n/a --\"),                 \"optional\": v.get(\"optional\", False),             }             result[k] = data          return result      def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:          config = self.get_config_value(\"desc\")         print(f\"XXXX: {config}\")          outputs_schema = self.get_config_value(\"outputs_schema\")         field_name = next(iter(outputs_schema.keys()))         outputs.set_value(field_name, \"result\")  The source code of the process method of the module."},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>kiara_plugin<ul> <li>streamlit<ul> <li>api</li> <li>components<ul> <li>context</li> <li>data_import<ul> <li>tabular</li> </ul> </li> <li>explore<ul> <li>tabular</li> </ul> </li> <li>info<ul> <li>api</li> <li>components</li> </ul> </li> <li>input<ul> <li>assemblies</li> <li>container_types</li> <li>files</li> <li>scalars</li> </ul> </li> <li>modals</li> <li>models</li> <li>operations</li> <li>pipelines</li> <li>preview<ul> <li>assemblies</li> <li>core_types</li> <li>tabular</li> </ul> </li> <li>workflow<ul> <li>dynamic<ul> <li>components</li> <li>workflow_page</li> </ul> </li> <li>requirements</li> <li>static<ul> <li>components</li> <li>workflow_page</li> </ul> </li> </ul> </li> </ul> </li> <li>data_types</li> <li>defaults</li> <li>interfaces<ul> <li>cli<ul> <li>streamlit</li> </ul> </li> </ul> </li> <li>models</li> <li>modules</li> <li>pipelines</li> <li>renderers</li> <li>streamlit</li> <li>utils<ul> <li>class_loading</li> <li>components</li> <li>monkey_patches</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/kiara_plugin/streamlit/__init__/","title":"streamlit","text":"<p>Top-level package for kiara_plugin.streamlit.</p>"},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit.KIARA_METADATA","title":"<code>KIARA_METADATA = {'authors': [{'name': __author__, 'email': __email__}], 'description': 'Kiara modules for: streamlit', 'references': {'source_repo': {'desc': 'The module package git repository.', 'url': 'https://github.com/DHARPA-Project/kiara_plugin.streamlit'}, 'documentation': {'desc': 'The url for the module package documentation.', 'url': 'https://DHARPA-Project.github.io/kiara_plugin.streamlit/'}}, 'tags': ['streamlit'], 'labels': {'package': 'kiara_plugin.streamlit'}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit.find_modules","title":"<code>find_modules: KiaraEntryPointItem = (find_kiara_modules_under, 'kiara_plugin.streamlit.modules')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit.find_model_classes","title":"<code>find_model_classes: KiaraEntryPointItem = (find_kiara_model_classes_under, 'kiara_plugin.streamlit.models')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit.find_data_types","title":"<code>find_data_types: KiaraEntryPointItem = (find_data_types_under, 'kiara_plugin.streamlit.data_types')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit.find_pipelines","title":"<code>find_pipelines: KiaraEntryPointItem = (find_pipeline_base_path_for_module, 'kiara_plugin.streamlit.pipelines', KIARA_METADATA)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit.find_kiara_streamlit_components","title":"<code>find_kiara_streamlit_components: KiaraEntryPointItem = (find_kiara_streamlit_components_under, 'kiara_plugin.streamlit.components')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit.find_renderer_classes","title":"<code>find_renderer_classes: KiaraEntryPointItem = (find_kiara_renderers_under, 'kiara_plugin.streamlit.renderers')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit.kiara_streamlit_init","title":"<code>kiara_streamlit_init = init</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit.get_version","title":"<code>get_version()</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/__init__.py</code> <pre><code>def get_version():\n    from pkg_resources import DistributionNotFound, get_distribution\n\n    try:\n        # Change here if project is renamed and does not equal the package name\n        dist_name = __name__\n        __version__ = get_distribution(dist_name).version\n    except DistributionNotFound:\n\n        try:\n            version_file = os.path.join(os.path.dirname(__file__), \"version.txt\")\n\n            if os.path.exists(version_file):\n                with open(version_file, encoding=\"utf-8\") as vf:\n                    __version__ = vf.read()\n            else:\n                __version__ = \"unknown\"\n\n        except (Exception):\n            pass\n\n        if __version__ is None:\n            __version__ = \"unknown\"\n\n    return __version__\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/__init__/#kiara_plugin.streamlit.init","title":"<code>init(context_config: Union[None, KiaraContextConfig] = None, runtime_config: Union[None, KiaraRuntimeConfig] = None, page_config: Union[None, Dict[str, typing.Any]] = None) -&gt; KiaraStreamlitAPI</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/__init__.py</code> <pre><code>def init(\n    context_config: Union[None, \"KiaraContextConfig\"] = None,\n    runtime_config: Union[None, \"KiaraRuntimeConfig\"] = None,\n    page_config: Union[None, Dict[str, typing.Any]] = None,\n) -&gt; \"KiaraStreamlitAPI\":\n\n    import streamlit as st\n    from kiara_plugin.streamlit.streamlit import KiaraStreamlit\n\n    if page_config is not None:\n        st.set_page_config(**page_config)\n\n    @st.cache_resource\n    def get_ktx() -&gt; \"KiaraStreamlit\":\n        # print(\"CREATE KIARA STREAMLIT\")\n        ktx = KiaraStreamlit(\n            context_config=context_config, runtime_config=runtime_config\n        )\n        return ktx\n\n    if not hasattr(st, \"kiara\"):\n        ktx = get_ktx()\n        setattr(st, \"kiara\", ktx)\n\n    if WANTS_MODAL_MARKER_KEY not in st.session_state.keys():\n        st.session_state[WANTS_MODAL_MARKER_KEY] = []\n\n    modal_requests: List[ModalRequest] = st.session_state[WANTS_MODAL_MARKER_KEY]\n\n    if modal_requests:\n        modal_request = modal_requests[-1]\n\n        if not isinstance(modal_request, ModalRequest):\n            raise Exception(\n                f\"Invalid modal object in session state, must inherit from 'ModalRequest': '{type(modal_request)}'\"\n            )\n\n        modal_request.modal.show_modal(st=st, request=modal_request)  # type: ignore\n        if modal_request.result.modal_finished:\n            st.session_state[WANTS_MODAL_MARKER_KEY].pop()\n            st.experimental_rerun()\n        else:\n            st.stop()\n\n    return st  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/","title":"api","text":""},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents","title":"<code>KiaraStreamlitComponents</code>","text":"<p>         Bases: <code>Protocol</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>class KiaraStreamlitComponents(Protocol):\n    @property\n    def api(self) -&gt; \"kiara.api.KiaraAPI\":\n\"\"\"Returns the Kiara API instance used by the API.\"\"\"\n\n    def ask_next_step(\n        self,\n        value: \"Value\",\n        session: \"WorkflowSessionDynamic\",\n        columns: \"Union[Tuple[int, int], Tuple[streamlit.delta_generator.DeltaGenerator, streamlit.delta_generator.DeltaGenerator]]\" = (\n            1,\n            4,\n        ),\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def component_info(\n        self,\n        items: \"Union[str, List[str], None]\" = None,\n        height: \"Union[None, int]\" = 400,\n        columns: \"Union[Tuple[int, int], Tuple[streamlit.delta_generator.DeltaGenerator, streamlit.delta_generator.DeltaGenerator], None]\" = (\n            1,\n            4,\n        ),\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Display information about a kiara streamlit component.\n\n        This is used to create what you see here.\n        \"\"\"\n\n    def context_switch_control(\n        self,\n        switch_to_selected: \"Union[None, bool]\" = True,\n        allow_create: \"Union[None, bool]\" = False,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"A component to switch between kiara contexts.\n\n            A *kiara* context is used to separate different sets of data and configuration, and is\n        useful to keep datasets and processing results organized.\n        \"\"\"\n\n    def current_values_preview(\n        self,\n        values: \"Mapping[str, kiara.models.values.value.Value]\",\n        add_value_types: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def display_value_properties(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Display the properties of a value.\"\"\"\n\n    def explore_database(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'database'.\"\"\"\n\n    def explore_table(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Explore a 'table' value visually.\"\"\"\n\n    def explore_tables(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'tables'.\"\"\"\n\n    def fields_info(\n        self,\n        fields: \"Mapping[str, kiara.models.values.value_schema.ValueSchema]\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Display information about a set of input fields.\n\n        This is mostly used to display the input requirements of an operation or pipeline to users.\n        \"\"\"\n\n    def import_network_data(\n        self,\n        result_field: \"Union[None, str]\" = None,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        display_style: \"Union[None, str]\" = \"default\",\n        reuse_previous_preview_results: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def import_table(\n        self,\n        result_field: \"Union[None, str]\" = None,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        display_style: \"Union[None, str]\" = \"default\",\n        reuse_previous_preview_results: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def input_boolean(\n        self,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render a checkbox for a boolean input.\"\"\"\n\n    def input_file(\n        self,\n        accepted_file_extensions: \"List[str]\",\n        allowed_input_methods: \"List[str]\",\n        show_preview: \"Union[None, bool]\" = None,\n        add_existing_file_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render a text input widget.\"\"\"\n\n    def input_float(\n        self,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget for a floating point number.\n\n            You can select between two different styles:\n        - \"default\": a number input widget\n        - \"text_input\": a text input widget, which will be converted to an integer\n        \"\"\"\n\n    def input_integer(\n        self,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an integer input widget.\n\n            You can select between two different styles:\n        - \"default\": a number input widget\n        - \"text_input\": a text input widget, which will be converted to an integer\n        \"\"\"\n\n    def input_list(\n        self,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render a widget for input a list.\n\n        Currently, only lists of strings are supported.\n        \"\"\"\n\n    def input_string(\n        self,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render a text input widget.\"\"\"\n\n    def inputs_for_fields(\n        self,\n        fields: \"Mapping[str, kiara.models.values.value_schema.ValueSchema]\",\n        smart_label: \"Union[None, bool]\" = True,\n        profile: \"Union[None, str]\" = \"default\",\n        max_columns: \"Union[None, int]\" = 3,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render a panel containing input widgets for each of the provided fields.\n\n        The type of input widgets is determined by the type of each field schema.\n        \"\"\"\n\n    def operation_documentation(\n        self,\n        height: \"Union[None, int]\" = 400,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Displays documentation for all available operations.\"\"\"\n\n    def operation_info(\n        self,\n        items: \"Union[str, List[str], None]\" = None,\n        height: \"Union[None, int]\" = 400,\n        columns: \"Union[Tuple[int, int], Tuple[streamlit.delta_generator.DeltaGenerator, streamlit.delta_generator.DeltaGenerator], None]\" = (\n            1,\n            4,\n        ),\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Displays information for all or a single operation.\n\n            If you only provide a single item, documentation for this item will be shown. Otherwise, a list\n        will be rendered on the left, and users can select one of the available items to get information for.\n        \"\"\"\n\n    def operation_inputs(\n        self,\n        operation_id: \"str\",\n        ignore_inputs: \"List[str]\",\n        module_config: \"Dict[str, Any]\",\n        smart_label: \"Union[None, bool]\" = True,\n        profile: \"Union[None, str]\" = \"default\",\n        max_columns: \"Union[None, int]\" = 3,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render all inputs for a specifc operation.\"\"\"\n\n    def operation_process_panel(\n        self,\n        operation_id: \"str\",\n        fixed_inputs: \"Dict[str, Any]\",\n        module_config: \"Dict[str, Any]\",\n        reuse_previous_result: \"Union[None, bool]\" = False,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def pick_value(\n        self,\n        values: \"Mapping[str, kiara.models.values.value.Value]\",\n        show_preview: \"Union[None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render a selectbox with the provided all the values in the provided value map.\"\"\"\n\n    def pipeline_graph(\n        self,\n        pipeline: \"Union[str, kiara.models.module.operation.Operation, kiara.interfaces.python_api.models.info.OperationInfo, kiara.models.module.pipeline.PipelineConfig, kiara.models.module.pipeline.pipeline.Pipeline]\",\n        graph_type: \"Union[None, str]\" = \"execution\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Display the structure of a pipeline as a graph.\"\"\"\n\n    def preview(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"The default preview component, will render a preview component dependent on the data type of the provided value.\"\"\"\n\n    def preview_array(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'array'.\"\"\"\n\n    def preview_boolean(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'boolean'.\"\"\"\n\n    def preview_database(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'database'.\"\"\"\n\n    def preview_dict(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'dict'.\"\"\"\n\n    def preview_file(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'file'.\"\"\"\n\n    def preview_file_bundle(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'file_bundle'.\"\"\"\n\n    def preview_float(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'float'.\"\"\"\n\n    def preview_integer(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'integer'.\"\"\"\n\n    def preview_list(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'list'.\"\"\"\n\n    def preview_network_data(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'network data'.\n\n        Currently, this displays a graph, as well as the nodes and edges tables. The graph is only a preview, and takes a while to render depending on the network data size, this will replaced at some point.\n        \"\"\"\n\n    def preview_none(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a none-type value, you should not need this'.\"\"\"\n\n    def preview_string(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'string'.\"\"\"\n\n    def preview_table(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'table'.\"\"\"\n\n    def preview_tables(\n        self,\n        value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n        display_style: \"Union[None, str]\" = \"default\",\n        height: \"Union[None, int]\" = None,\n        show_properties: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Preview a value of type 'tables'.\"\"\"\n\n    def run_job_panel(\n        self,\n        job_desc: \"JobDesc\",\n        disabled: \"Union[None, bool]\" = False,\n        run_instantly: \"Union[None, bool]\" = False,\n        preview_result: \"Union[None, bool]\" = False,\n        reuse_previous_result: \"Union[None, bool]\" = False,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def select_array(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'array'.\"\"\"\n\n    def select_bytes(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'bytes'.\"\"\"\n\n    def select_database(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'database'.\"\"\"\n\n    def select_date(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'date'.\"\"\"\n\n    def select_dict(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'dict'.\"\"\"\n\n    def select_file(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'file'.\"\"\"\n\n    def select_file_bundle(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'file_bundle'.\"\"\"\n\n    def select_html(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'html'.\"\"\"\n\n    def select_kiara_model(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'kiara_model'.\"\"\"\n\n    def select_kiara_model_list(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'kiara_model_list'.\"\"\"\n\n    def select_network_data(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'network_data'.\"\"\"\n\n    def select_pipeline(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'pipeline'.\"\"\"\n\n    def select_table(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'table'.\"\"\"\n\n    def select_tables(\n        self,\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render an input widget that prompts the user for a value of type 'tables'.\"\"\"\n\n    def select_value(\n        self,\n        value_schema: \"ValueSchema\",\n        add_import_widget: \"Union[str, None, bool]\" = None,\n        data_type: \"Union[str, List[str], None]\" = None,\n        display_value_type: \"Union[None, bool]\" = None,\n        show_preview: \"Union[None, bool]\" = None,\n        value_has_alias: \"Union[None, bool]\" = True,\n        add_no_value_option: \"Union[None, bool]\" = False,\n        label: \"Union[None, str]\" = \"-- no label --\",\n        help: \"Union[None, str]\" = \"-- n/a --\",\n        smart_label: \"Union[None, bool]\" = True,\n        display_style: \"Union[None, str]\" = \"default\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"Render a selectbox with all available values (for a specific type, if applicable).\"\"\"\n\n    def stage_outputs_preview(\n        self,\n        stage_idx: \"List[int]\",\n        session: \"WorkflowSessionStatic\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def step_input_fields(\n        self,\n        step_id: \"str\",\n        session: \"WorkflowSessionDynamic\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def step_requirements(self, key: \"Union[None, str]\" = \"-- generated --\"):\n\"\"\"A component to gather step requirements from users\"\"\"\n\n    def value_list(\n        self,\n        data_types: \"Union[str, List[str], None]\" = None,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def value_list_preview(\n        self,\n        data_types: \"Union[str, List[str], None]\" = None,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def value_map_preview(\n        self,\n        value_map: \"Mapping[str, Union[str, uuid.UUID, kiara.models.values.value.Value]]\",\n        add_save_option: \"Union[None, bool]\" = False,\n        add_value_types: \"Union[None, bool]\" = True,\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def workflow(\n        self, session: \"WorkflowSession\", key: \"Union[None, str]\" = \"-- generated --\"\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def workflow_dynamic(\n        self,\n        session: \"WorkflowSessionDynamic\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def workflow_static(\n        self,\n        session: \"WorkflowSessionStatic\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n\n    def write_step_details(\n        self,\n        step_id: \"str\",\n        session: \"WorkflowSessionDynamic\",\n        key: \"Union[None, str]\" = \"-- generated --\",\n    ):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.api","title":"<code>api: kiara.api.KiaraAPI</code>  <code>property</code>","text":"<p>Returns the Kiara API instance used by the API.</p>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.ask_next_step","title":"<code>ask_next_step(value: Value, session: WorkflowSessionDynamic, columns: Union[Tuple[int, int], Tuple[streamlit.delta_generator.DeltaGenerator, streamlit.delta_generator.DeltaGenerator]] = (1, 4), key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def ask_next_step(\n    self,\n    value: \"Value\",\n    session: \"WorkflowSessionDynamic\",\n    columns: \"Union[Tuple[int, int], Tuple[streamlit.delta_generator.DeltaGenerator, streamlit.delta_generator.DeltaGenerator]]\" = (\n        1,\n        4,\n    ),\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.component_info","title":"<code>component_info(items: Union[str, List[str], None] = None, height: Union[None, int] = 400, columns: Union[Tuple[int, int], Tuple[streamlit.delta_generator.DeltaGenerator, streamlit.delta_generator.DeltaGenerator], None] = (1, 4), key: Union[None, str] = '-- generated --')</code>","text":"<p>Display information about a kiara streamlit component.</p> <p>This is used to create what you see here.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def component_info(\n    self,\n    items: \"Union[str, List[str], None]\" = None,\n    height: \"Union[None, int]\" = 400,\n    columns: \"Union[Tuple[int, int], Tuple[streamlit.delta_generator.DeltaGenerator, streamlit.delta_generator.DeltaGenerator], None]\" = (\n        1,\n        4,\n    ),\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Display information about a kiara streamlit component.\n\n    This is used to create what you see here.\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.context_switch_control","title":"<code>context_switch_control(switch_to_selected: Union[None, bool] = True, allow_create: Union[None, bool] = False, key: Union[None, str] = '-- generated --')</code>","text":"<p>A component to switch between kiara contexts.</p> <pre><code>A *kiara* context is used to separate different sets of data and configuration, and is\n</code></pre> <p>useful to keep datasets and processing results organized.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def context_switch_control(\n    self,\n    switch_to_selected: \"Union[None, bool]\" = True,\n    allow_create: \"Union[None, bool]\" = False,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"A component to switch between kiara contexts.\n\n        A *kiara* context is used to separate different sets of data and configuration, and is\n    useful to keep datasets and processing results organized.\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.current_values_preview","title":"<code>current_values_preview(values: Mapping[str, kiara.models.values.value.Value], add_value_types: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def current_values_preview(\n    self,\n    values: \"Mapping[str, kiara.models.values.value.Value]\",\n    add_value_types: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.display_value_properties","title":"<code>display_value_properties(value: Union[str, uuid.UUID, kiara.models.values.value.Value], key: Union[None, str] = '-- generated --')</code>","text":"<p>Display the properties of a value.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def display_value_properties(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Display the properties of a value.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.explore_database","title":"<code>explore_database(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'database'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def explore_database(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'database'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.explore_table","title":"<code>explore_table(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Explore a 'table' value visually.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def explore_table(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Explore a 'table' value visually.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.explore_tables","title":"<code>explore_tables(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'tables'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def explore_tables(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'tables'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.fields_info","title":"<code>fields_info(fields: Mapping[str, kiara.models.values.value_schema.ValueSchema], key: Union[None, str] = '-- generated --')</code>","text":"<p>Display information about a set of input fields.</p> <p>This is mostly used to display the input requirements of an operation or pipeline to users.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def fields_info(\n    self,\n    fields: \"Mapping[str, kiara.models.values.value_schema.ValueSchema]\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Display information about a set of input fields.\n\n    This is mostly used to display the input requirements of an operation or pipeline to users.\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.import_network_data","title":"<code>import_network_data(result_field: Union[None, str] = None, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', display_style: Union[None, str] = 'default', reuse_previous_preview_results: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def import_network_data(\n    self,\n    result_field: \"Union[None, str]\" = None,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    display_style: \"Union[None, str]\" = \"default\",\n    reuse_previous_preview_results: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.import_table","title":"<code>import_table(result_field: Union[None, str] = None, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', display_style: Union[None, str] = 'default', reuse_previous_preview_results: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def import_table(\n    self,\n    result_field: \"Union[None, str]\" = None,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    display_style: \"Union[None, str]\" = \"default\",\n    reuse_previous_preview_results: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.input_boolean","title":"<code>input_boolean(label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render a checkbox for a boolean input.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def input_boolean(\n    self,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render a checkbox for a boolean input.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.input_file","title":"<code>input_file(accepted_file_extensions: List[str], allowed_input_methods: List[str], show_preview: Union[None, bool] = None, add_existing_file_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render a text input widget.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def input_file(\n    self,\n    accepted_file_extensions: \"List[str]\",\n    allowed_input_methods: \"List[str]\",\n    show_preview: \"Union[None, bool]\" = None,\n    add_existing_file_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render a text input widget.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.input_float","title":"<code>input_float(label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget for a floating point number.</p> <pre><code>You can select between two different styles:\n</code></pre> <ul> <li>\"default\": a number input widget</li> <li>\"text_input\": a text input widget, which will be converted to an integer</li> </ul> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def input_float(\n    self,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget for a floating point number.\n\n        You can select between two different styles:\n    - \"default\": a number input widget\n    - \"text_input\": a text input widget, which will be converted to an integer\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.input_integer","title":"<code>input_integer(label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an integer input widget.</p> <pre><code>You can select between two different styles:\n</code></pre> <ul> <li>\"default\": a number input widget</li> <li>\"text_input\": a text input widget, which will be converted to an integer</li> </ul> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def input_integer(\n    self,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an integer input widget.\n\n        You can select between two different styles:\n    - \"default\": a number input widget\n    - \"text_input\": a text input widget, which will be converted to an integer\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.input_list","title":"<code>input_list(label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render a widget for input a list.</p> <p>Currently, only lists of strings are supported.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def input_list(\n    self,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render a widget for input a list.\n\n    Currently, only lists of strings are supported.\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.input_string","title":"<code>input_string(label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render a text input widget.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def input_string(\n    self,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render a text input widget.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.inputs_for_fields","title":"<code>inputs_for_fields(fields: Mapping[str, kiara.models.values.value_schema.ValueSchema], smart_label: Union[None, bool] = True, profile: Union[None, str] = 'default', max_columns: Union[None, int] = 3, key: Union[None, str] = '-- generated --')</code>","text":"<p>Render a panel containing input widgets for each of the provided fields.</p> <p>The type of input widgets is determined by the type of each field schema.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def inputs_for_fields(\n    self,\n    fields: \"Mapping[str, kiara.models.values.value_schema.ValueSchema]\",\n    smart_label: \"Union[None, bool]\" = True,\n    profile: \"Union[None, str]\" = \"default\",\n    max_columns: \"Union[None, int]\" = 3,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render a panel containing input widgets for each of the provided fields.\n\n    The type of input widgets is determined by the type of each field schema.\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.operation_documentation","title":"<code>operation_documentation(height: Union[None, int] = 400, key: Union[None, str] = '-- generated --')</code>","text":"<p>Displays documentation for all available operations.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def operation_documentation(\n    self,\n    height: \"Union[None, int]\" = 400,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Displays documentation for all available operations.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.operation_info","title":"<code>operation_info(items: Union[str, List[str], None] = None, height: Union[None, int] = 400, columns: Union[Tuple[int, int], Tuple[streamlit.delta_generator.DeltaGenerator, streamlit.delta_generator.DeltaGenerator], None] = (1, 4), key: Union[None, str] = '-- generated --')</code>","text":"<p>Displays information for all or a single operation.</p> <pre><code>If you only provide a single item, documentation for this item will be shown. Otherwise, a list\n</code></pre> <p>will be rendered on the left, and users can select one of the available items to get information for.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def operation_info(\n    self,\n    items: \"Union[str, List[str], None]\" = None,\n    height: \"Union[None, int]\" = 400,\n    columns: \"Union[Tuple[int, int], Tuple[streamlit.delta_generator.DeltaGenerator, streamlit.delta_generator.DeltaGenerator], None]\" = (\n        1,\n        4,\n    ),\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Displays information for all or a single operation.\n\n        If you only provide a single item, documentation for this item will be shown. Otherwise, a list\n    will be rendered on the left, and users can select one of the available items to get information for.\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.operation_inputs","title":"<code>operation_inputs(operation_id: str, ignore_inputs: List[str], module_config: Dict[str, Any], smart_label: Union[None, bool] = True, profile: Union[None, str] = 'default', max_columns: Union[None, int] = 3, key: Union[None, str] = '-- generated --')</code>","text":"<p>Render all inputs for a specifc operation.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def operation_inputs(\n    self,\n    operation_id: \"str\",\n    ignore_inputs: \"List[str]\",\n    module_config: \"Dict[str, Any]\",\n    smart_label: \"Union[None, bool]\" = True,\n    profile: \"Union[None, str]\" = \"default\",\n    max_columns: \"Union[None, int]\" = 3,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render all inputs for a specifc operation.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.operation_process_panel","title":"<code>operation_process_panel(operation_id: str, fixed_inputs: Dict[str, Any], module_config: Dict[str, Any], reuse_previous_result: Union[None, bool] = False, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def operation_process_panel(\n    self,\n    operation_id: \"str\",\n    fixed_inputs: \"Dict[str, Any]\",\n    module_config: \"Dict[str, Any]\",\n    reuse_previous_result: \"Union[None, bool]\" = False,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.pick_value","title":"<code>pick_value(values: Mapping[str, kiara.models.values.value.Value], show_preview: Union[None, bool] = None, display_value_type: Union[None, bool] = None, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render a selectbox with the provided all the values in the provided value map.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def pick_value(\n    self,\n    values: \"Mapping[str, kiara.models.values.value.Value]\",\n    show_preview: \"Union[None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render a selectbox with the provided all the values in the provided value map.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.pipeline_graph","title":"<code>pipeline_graph(pipeline: Union[str, kiara.models.module.operation.Operation, kiara.interfaces.python_api.models.info.OperationInfo, kiara.models.module.pipeline.PipelineConfig, kiara.models.module.pipeline.pipeline.Pipeline], graph_type: Union[None, str] = 'execution', key: Union[None, str] = '-- generated --')</code>","text":"<p>Display the structure of a pipeline as a graph.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def pipeline_graph(\n    self,\n    pipeline: \"Union[str, kiara.models.module.operation.Operation, kiara.interfaces.python_api.models.info.OperationInfo, kiara.models.module.pipeline.PipelineConfig, kiara.models.module.pipeline.pipeline.Pipeline]\",\n    graph_type: \"Union[None, str]\" = \"execution\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Display the structure of a pipeline as a graph.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview","title":"<code>preview(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>The default preview component, will render a preview component dependent on the data type of the provided value.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"The default preview component, will render a preview component dependent on the data type of the provided value.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_array","title":"<code>preview_array(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'array'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_array(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'array'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_boolean","title":"<code>preview_boolean(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'boolean'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_boolean(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'boolean'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_database","title":"<code>preview_database(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'database'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_database(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'database'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_dict","title":"<code>preview_dict(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'dict'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_dict(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'dict'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_file","title":"<code>preview_file(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'file'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_file(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'file'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_file_bundle","title":"<code>preview_file_bundle(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'file_bundle'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_file_bundle(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'file_bundle'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_float","title":"<code>preview_float(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'float'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_float(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'float'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_integer","title":"<code>preview_integer(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'integer'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_integer(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'integer'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_list","title":"<code>preview_list(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'list'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_list(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'list'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_network_data","title":"<code>preview_network_data(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'network data'.</p> <p>Currently, this displays a graph, as well as the nodes and edges tables. The graph is only a preview, and takes a while to render depending on the network data size, this will replaced at some point.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_network_data(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'network data'.\n\n    Currently, this displays a graph, as well as the nodes and edges tables. The graph is only a preview, and takes a while to render depending on the network data size, this will replaced at some point.\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_none","title":"<code>preview_none(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a none-type value, you should not need this'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_none(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a none-type value, you should not need this'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_string","title":"<code>preview_string(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'string'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_string(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'string'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_table","title":"<code>preview_table(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'table'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_table(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'table'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.preview_tables","title":"<code>preview_tables(value: Union[str, uuid.UUID, kiara.models.values.value.Value], display_style: Union[None, str] = 'default', height: Union[None, int] = None, show_properties: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>Preview a value of type 'tables'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def preview_tables(\n    self,\n    value: \"Union[str, uuid.UUID, kiara.models.values.value.Value]\",\n    display_style: \"Union[None, str]\" = \"default\",\n    height: \"Union[None, int]\" = None,\n    show_properties: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Preview a value of type 'tables'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.run_job_panel","title":"<code>run_job_panel(job_desc: JobDesc, disabled: Union[None, bool] = False, run_instantly: Union[None, bool] = False, preview_result: Union[None, bool] = False, reuse_previous_result: Union[None, bool] = False, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def run_job_panel(\n    self,\n    job_desc: \"JobDesc\",\n    disabled: \"Union[None, bool]\" = False,\n    run_instantly: \"Union[None, bool]\" = False,\n    preview_result: \"Union[None, bool]\" = False,\n    reuse_previous_result: \"Union[None, bool]\" = False,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_array","title":"<code>select_array(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'array'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_array(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'array'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_bytes","title":"<code>select_bytes(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'bytes'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_bytes(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'bytes'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_database","title":"<code>select_database(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'database'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_database(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'database'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_date","title":"<code>select_date(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'date'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_date(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'date'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_dict","title":"<code>select_dict(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'dict'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_dict(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'dict'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_file","title":"<code>select_file(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'file'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_file(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'file'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_file_bundle","title":"<code>select_file_bundle(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'file_bundle'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_file_bundle(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'file_bundle'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_html","title":"<code>select_html(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'html'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_html(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'html'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_kiara_model","title":"<code>select_kiara_model(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'kiara_model'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_kiara_model(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'kiara_model'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_kiara_model_list","title":"<code>select_kiara_model_list(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'kiara_model_list'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_kiara_model_list(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'kiara_model_list'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_network_data","title":"<code>select_network_data(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'network_data'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_network_data(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'network_data'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_pipeline","title":"<code>select_pipeline(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'pipeline'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_pipeline(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'pipeline'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_table","title":"<code>select_table(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'table'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_table(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'table'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_tables","title":"<code>select_tables(add_import_widget: Union[str, None, bool] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render an input widget that prompts the user for a value of type 'tables'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_tables(\n    self,\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render an input widget that prompts the user for a value of type 'tables'.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.select_value","title":"<code>select_value(value_schema: ValueSchema, add_import_widget: Union[str, None, bool] = None, data_type: Union[str, List[str], None] = None, display_value_type: Union[None, bool] = None, show_preview: Union[None, bool] = None, value_has_alias: Union[None, bool] = True, add_no_value_option: Union[None, bool] = False, label: Union[None, str] = '-- no label --', help: Union[None, str] = '-- n/a --', smart_label: Union[None, bool] = True, display_style: Union[None, str] = 'default', key: Union[None, str] = '-- generated --')</code>","text":"<p>Render a selectbox with all available values (for a specific type, if applicable).</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def select_value(\n    self,\n    value_schema: \"ValueSchema\",\n    add_import_widget: \"Union[str, None, bool]\" = None,\n    data_type: \"Union[str, List[str], None]\" = None,\n    display_value_type: \"Union[None, bool]\" = None,\n    show_preview: \"Union[None, bool]\" = None,\n    value_has_alias: \"Union[None, bool]\" = True,\n    add_no_value_option: \"Union[None, bool]\" = False,\n    label: \"Union[None, str]\" = \"-- no label --\",\n    help: \"Union[None, str]\" = \"-- n/a --\",\n    smart_label: \"Union[None, bool]\" = True,\n    display_style: \"Union[None, str]\" = \"default\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"Render a selectbox with all available values (for a specific type, if applicable).\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.stage_outputs_preview","title":"<code>stage_outputs_preview(stage_idx: List[int], session: WorkflowSessionStatic, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def stage_outputs_preview(\n    self,\n    stage_idx: \"List[int]\",\n    session: \"WorkflowSessionStatic\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.step_input_fields","title":"<code>step_input_fields(step_id: str, session: WorkflowSessionDynamic, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def step_input_fields(\n    self,\n    step_id: \"str\",\n    session: \"WorkflowSessionDynamic\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.step_requirements","title":"<code>step_requirements(key: Union[None, str] = '-- generated --')</code>","text":"<p>A component to gather step requirements from users</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def step_requirements(self, key: \"Union[None, str]\" = \"-- generated --\"):\n\"\"\"A component to gather step requirements from users\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.value_list","title":"<code>value_list(data_types: Union[str, List[str], None] = None, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def value_list(\n    self,\n    data_types: \"Union[str, List[str], None]\" = None,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.value_list_preview","title":"<code>value_list_preview(data_types: Union[str, List[str], None] = None, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def value_list_preview(\n    self,\n    data_types: \"Union[str, List[str], None]\" = None,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.value_map_preview","title":"<code>value_map_preview(value_map: Mapping[str, Union[str, uuid.UUID, kiara.models.values.value.Value]], add_save_option: Union[None, bool] = False, add_value_types: Union[None, bool] = True, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def value_map_preview(\n    self,\n    value_map: \"Mapping[str, Union[str, uuid.UUID, kiara.models.values.value.Value]]\",\n    add_save_option: \"Union[None, bool]\" = False,\n    add_value_types: \"Union[None, bool]\" = True,\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.workflow","title":"<code>workflow(session: WorkflowSession, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def workflow(\n    self, session: \"WorkflowSession\", key: \"Union[None, str]\" = \"-- generated --\"\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.workflow_dynamic","title":"<code>workflow_dynamic(session: WorkflowSessionDynamic, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def workflow_dynamic(\n    self,\n    session: \"WorkflowSessionDynamic\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.workflow_static","title":"<code>workflow_static(session: WorkflowSessionStatic, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def workflow_static(\n    self,\n    session: \"WorkflowSessionStatic\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitComponents.write_step_details","title":"<code>write_step_details(step_id: str, session: WorkflowSessionDynamic, key: Union[None, str] = '-- generated --')</code>","text":"<p>-- n/a --</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>def write_step_details(\n    self,\n    step_id: \"str\",\n    session: \"WorkflowSessionDynamic\",\n    key: \"Union[None, str]\" = \"-- generated --\",\n):\n\"\"\"-- n/a --\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitAugmented","title":"<code>KiaraStreamlitAugmented</code>","text":"<p>         Bases: <code>KiaraStreamlit</code>, <code>KiaraStreamlitComponents</code></p> <p>A dummy class to help IDEs with type hinting.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>class KiaraStreamlitAugmented(KiaraStreamlit, KiaraStreamlitComponents):\n\"\"\"A dummy class to help IDEs with type hinting.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitAPIProtocol","title":"<code>KiaraStreamlitAPIProtocol</code>","text":"<p>         Bases: <code>Protocol</code></p> <p>A protocol class that contains all the dynamically discovered kiara-streamlit components.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>class KiaraStreamlitAPIProtocol(Protocol):\n\"\"\"A protocol class that contains all the dynamically discovered kiara-streamlit components.\"\"\"\n\n    @property\n    def kiara(self) -&gt; \"KiaraStreamlitAugmented\":\n\"\"\"Returns the Kiara context used by the API.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitAPIProtocol-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitAPIProtocol.kiara","title":"<code>kiara: KiaraStreamlitAugmented</code>  <code>property</code>","text":"<p>Returns the Kiara context used by the API.</p>"},{"location":"reference/kiara_plugin/streamlit/api/#kiara_plugin.streamlit.api.KiaraStreamlitAPI","title":"<code>KiaraStreamlitAPI</code>","text":"<p>         Bases: <code>DeltaGenerator</code>, <code>KiaraStreamlitAPIProtocol</code></p> <p>A dummy class to help IDEs with type hinting.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/api.py</code> <pre><code>class KiaraStreamlitAPI(DeltaGenerator, KiaraStreamlitAPIProtocol):\n\"\"\"A dummy class to help IDEs with type hinting.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/data_types/","title":"data_types","text":"<p>This module contains the value type classes that are used in the <code>kiara_plugin.streamlit</code> package.</p>"},{"location":"reference/kiara_plugin/streamlit/defaults/","title":"defaults","text":""},{"location":"reference/kiara_plugin/streamlit/defaults/#kiara_plugin.streamlit.defaults-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/defaults/#kiara_plugin.streamlit.defaults.kiara_stremalit_app_dirs","title":"<code>kiara_stremalit_app_dirs = AppDirs('kiara-streamlit', 'dharpa')</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/defaults/#kiara_plugin.streamlit.defaults.KIARA_STREAMLIT_RESOURCES_FOLDER","title":"<code>KIARA_STREAMLIT_RESOURCES_FOLDER = importlib_resources.files('kiara_plugin.streamlit').joinpath('resources')</code>  <code>module-attribute</code>","text":"<p>Default resources folder for this package.</p>"},{"location":"reference/kiara_plugin/streamlit/defaults/#kiara_plugin.streamlit.defaults.WANTS_MODAL_MARKER_KEY","title":"<code>WANTS_MODAL_MARKER_KEY = '__WANTS_MODAL__'</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/defaults/#kiara_plugin.streamlit.defaults.NO_VALUE_MARKER","title":"<code>NO_VALUE_MARKER = '-- no value --'</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/defaults/#kiara_plugin.streamlit.defaults.NO_LABEL_MARKER","title":"<code>NO_LABEL_MARKER = '-- no label --'</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/defaults/#kiara_plugin.streamlit.defaults.AUTO_GEN_MARKER","title":"<code>AUTO_GEN_MARKER = '-- generated --'</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/models/","title":"models","text":"<p>This module contains the metadata (and other) models that are used in the <code>kiara_plugin.streamlit</code> package.</p> <p>Those models are convenience wrappers that make it easier for kiara to find, create, manage and version metadata -- but also other type of models -- that is attached to data, as well as kiara modules.</p> <p>Metadata models must be a sub-class of kiara.metadata.MetadataModel. Other models usually sub-class a pydantic BaseModel or implement custom base classes.</p>"},{"location":"reference/kiara_plugin/streamlit/streamlit/","title":"streamlit","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt","title":"<code>ComponentMgmt</code>","text":"<p>         Bases: <code>object</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>class ComponentMgmt(object):\n    def __init__(\n        self,\n        kiara_streamlit: \"KiaraStreamlit\",\n        example_base_dir: Union[str, Path, None] = None,\n    ):\n\n        self._kiara_streamlit: KiaraStreamlit = kiara_streamlit\n        self._exapmle_base_dir: Union[str, None, Path] = example_base_dir\n\n        self._components: Union[Dict[str, KiaraComponent], None] = None\n        self._preview_components: Union[\n            Dict[str, Dict[str, PreviewComponent]], None\n        ] = None\n        self._input_components: Union[Dict[str, InputComponent], None] = None\n        self._import_components: Union[Dict[str, DataImportComponent], None] = None\n\n    def add_component(self, name: str, component: KiaraComponent):\n\n        if name in self.components:\n            raise ValueError(f\"Component with name '{name}' already exists.\")\n\n        self.components[name] = component  # type: ignore\n\n    def get_component(self, name: str) -&gt; Union[KiaraComponent, None]:\n        return self.components.get(name, None)\n\n    def get_preview_component(\n        self, data_type: str, preview_name: Union[str, None] = None\n    ) -&gt; PreviewComponent:\n\n        all_previews = self.preview_components.get(data_type, None)\n        if not all_previews:\n            raise Exception(f\"No preview component found for data type: '{data_type}'\")\n        if preview_name and preview_name not in all_previews.keys():\n            raise Exception(f\"No preview component found for data type: '{data_type}'\")\n\n        if not preview_name:\n            if len(all_previews) &gt; 1:\n                if \"default\" not in all_previews.keys():\n                    raise ValueError(\n                        f\"Multiple previews available for data type '{data_type}', but no default preview defined.\"\n                    )\n                else:\n                    preview_name = \"default\"\n            else:\n                preview_name = next(iter(all_previews.keys()))\n        result = all_previews.get(preview_name, None)\n\n        if not result:\n            raise Exception(f\"No preview component found for data type: '{data_type}'\")\n        else:\n            return result\n\n    def get_input_component(self, data_type: str) -&gt; InputComponent:\n        result = self.input_components.get(data_type, None)\n        if result is None:\n            raise Exception(f\"No input component found for data type: '{data_type}'\")\n        return result\n\n    def get_import_component(self, data_type: str) -&gt; Union[DataImportComponent, None]:\n        result = self.import_components.get(data_type, None)\n        return result\n\n    @property\n    def components(self) -&gt; Mapping[str, KiaraComponent]:\n\n        if self._components is not None:\n            return self._components\n\n        components = {}\n        preview_components: Dict[str, Dict[str, PreviewComponent]] = {}\n        input_components: Dict[str, InputComponent] = {}  # type: ignore\n        import_components: Dict[str, DataImportComponent] = {}  # type: ignore\n\n        base_input_cls = None\n        for name, cls in find_all_kiara_streamlit_components().items():\n            instance = cls(kiara_streamlit=self._kiara_streamlit, component_name=name)\n\n            if name == \"select_value\":\n                base_input_cls = cls\n\n            components[name] = instance\n            if issubclass(cls, PreviewComponent):\n                data_type: Union[None, str] = cls.get_data_type()\n                preview_name = cls.get_preview_name()\n                if (\n                    preview_components.get(\"data_type\", {}).get(\"preview_name\", None)\n                    is not None\n                ):\n                    raise ValueError(\n                        f\"Can't register component for data type '{data_type}' and preview name '{preview_name}': more than one component registered.\"\n                    )\n                preview_components.setdefault(data_type, {})[preview_name] = instance  # type: ignore\n\n            elif issubclass(cls, InputComponent):\n                data_type = cls.get_data_type()\n                if data_type:\n                    if data_type in input_components.keys():\n                        raise Exception(\n                            f\"Multiple input components for data type: {data_type}\"\n                        )\n                    input_components[data_type] = instance  # type: ignore\n\n            elif issubclass(cls, DataImportComponent):\n                data_type = cls.get_data_type()\n                if data_type:\n                    if data_type in import_components.keys():\n                        raise Exception(\n                            f\"Multiple data import components for data type: {data_type}\"\n                        )\n                    import_components[data_type] = instance  # type: ignore\n\n        for data_type in self._kiara_streamlit.api.list_data_type_names():\n\n            if self._kiara_streamlit.api.is_internal_data_type(data_type):\n                continue\n\n            if (\n                data_type in [\"file\", \"file_bundle\"]\n                or data_type not in input_components.keys()\n            ):\n\n                _doc = f\"Render an input widget that prompts the user for a value of type '{data_type}'.\"\n                _name = f\"select_{data_type}\"\n\n                _example = {\n                    \"doc\": f\"Render an input widget for a value of type '{data_type}'.\",\n                    \"args\": {},\n                }\n\n                _comp = base_input_cls(kiara_streamlit=self._kiara_streamlit, component_name=_name, data_types=[data_type], doc=_doc)  # type: ignore\n                _comp._instance_examples = [_example]  # type: ignore\n                components[_name] = _comp\n                input_components[data_type] = _comp  # type: ignore\n\n        self._components = components\n        self._preview_components = preview_components\n        self._input_components = input_components\n        self._import_components = import_components\n        return self._components\n\n    @property\n    def preview_components(self) -&gt; Mapping[str, Mapping[str, PreviewComponent]]:\n        if self._preview_components is None:\n            self.components\n        return self._preview_components  # type: ignore\n\n    @property\n    def input_components(self) -&gt; Mapping[str, InputComponent]:\n        if self._input_components is None:\n            self.components\n        return self._input_components  # type: ignore\n\n    @property\n    def import_components(self) -&gt; Mapping[str, DataImportComponent]:\n        if self._import_components is None:\n            self.components\n        return self._import_components  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt.components","title":"<code>components: Mapping[str, KiaraComponent]</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt.preview_components","title":"<code>preview_components: Mapping[str, Mapping[str, PreviewComponent]]</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt.input_components","title":"<code>input_components: Mapping[str, InputComponent]</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt.import_components","title":"<code>import_components: Mapping[str, DataImportComponent]</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt.add_component","title":"<code>add_component(name: str, component: KiaraComponent)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def add_component(self, name: str, component: KiaraComponent):\n\n    if name in self.components:\n        raise ValueError(f\"Component with name '{name}' already exists.\")\n\n    self.components[name] = component  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt.get_component","title":"<code>get_component(name: str) -&gt; Union[KiaraComponent, None]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def get_component(self, name: str) -&gt; Union[KiaraComponent, None]:\n    return self.components.get(name, None)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt.get_preview_component","title":"<code>get_preview_component(data_type: str, preview_name: Union[str, None] = None) -&gt; PreviewComponent</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def get_preview_component(\n    self, data_type: str, preview_name: Union[str, None] = None\n) -&gt; PreviewComponent:\n\n    all_previews = self.preview_components.get(data_type, None)\n    if not all_previews:\n        raise Exception(f\"No preview component found for data type: '{data_type}'\")\n    if preview_name and preview_name not in all_previews.keys():\n        raise Exception(f\"No preview component found for data type: '{data_type}'\")\n\n    if not preview_name:\n        if len(all_previews) &gt; 1:\n            if \"default\" not in all_previews.keys():\n                raise ValueError(\n                    f\"Multiple previews available for data type '{data_type}', but no default preview defined.\"\n                )\n            else:\n                preview_name = \"default\"\n        else:\n            preview_name = next(iter(all_previews.keys()))\n    result = all_previews.get(preview_name, None)\n\n    if not result:\n        raise Exception(f\"No preview component found for data type: '{data_type}'\")\n    else:\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt.get_input_component","title":"<code>get_input_component(data_type: str) -&gt; InputComponent</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def get_input_component(self, data_type: str) -&gt; InputComponent:\n    result = self.input_components.get(data_type, None)\n    if result is None:\n        raise Exception(f\"No input component found for data type: '{data_type}'\")\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.ComponentMgmt.get_import_component","title":"<code>get_import_component(data_type: str) -&gt; Union[DataImportComponent, None]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def get_import_component(self, data_type: str) -&gt; Union[DataImportComponent, None]:\n    result = self.import_components.get(data_type, None)\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit","title":"<code>KiaraStreamlit</code>","text":"<p>         Bases: <code>object</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>class KiaraStreamlit(object):\n    def __init__(\n        self,\n        context_config: Union[None, KiaraContextConfig] = None,\n        runtime_config: Union[None, KiaraRuntimeConfig] = None,\n    ):\n\n        self._context_config: Union[None, KiaraContextConfig] = context_config\n        self._runtime_config: Union[None, KiaraRuntimeConfig] = runtime_config\n\n        self._api_outside_streamlit: Union[None, KiaraAPI] = None\n\n        ctx = get_script_run_ctx()\n        if ctx is None:\n            # means, this is not running as streamlit script\n            if self._api_outside_streamlit is None:\n                kc = KiaraConfig()\n                self._api_outside_streamlit = KiaraAPI(kc)\n            self._api = self._api_outside_streamlit\n        else:\n            if \"__kiara_api__\" not in st.session_state.keys():\n                kc = KiaraConfig()\n                kiara_api = KiaraAPI(kc)\n                st.session_state[\"__kiara_api__\"] = kiara_api\n            self._api = st.session_state.__kiara_api__\n\n        self._component_mgmt = ComponentMgmt(\n            kiara_streamlit=self, example_base_dir=None\n        )\n\n        self._temp_dir = os.path.join(\n            kiara_stremalit_app_dirs.user_cache_dir, str(uuid.uuid4())\n        )\n\n        self._job_cache: Dict[str, ValueMapReadOnly] = {}\n\n        def del_temp_dir():\n            shutil.rmtree(self._temp_dir, ignore_errors=True)\n\n        atexit.register(del_temp_dir)\n\n        # self._api\n\n        # self.add_component(\"test\", TestComponent(kiara_streamlit=self))\n        # self.add_component(\"help\", HelpComponent(kiara_streamlit=self))\n\n    @property\n    def api(self) -&gt; KiaraAPI:\n        return self._api\n\n    def __getattr__(self, item):\n\n        # if item in [\"api\", \"components\", \"get_component\"]:\n        #     return getattr(self, item)\n        if item == \"api\":\n            import traceback\n\n            traceback.print_stack()\n\n        comp = self.get_component(item)\n        if not comp:\n            raise AttributeError(\n                f\"Kiara context object does not have component '{item}'.\"\n            )\n\n        return comp.render_func()\n\n    @property\n    def components(self) -&gt; Mapping[str, KiaraComponent]:\n        return self._component_mgmt.components\n\n    def get_preview_component(\n        self, data_type: str, preview_name: Union[str, None] = None\n    ) -&gt; PreviewComponent:\n        return self._component_mgmt.get_preview_component(\n            data_type=data_type, preview_name=preview_name\n        )\n\n    def get_input_component(self, data_type: str) -&gt; InputComponent:\n        result = self._component_mgmt.get_input_component(data_type=data_type)\n        return result\n\n    def get_import_component(self, data_type: str) -&gt; Union[DataImportComponent, None]:\n        result = self._component_mgmt.get_import_component(data_type=data_type)\n        return result\n\n    def wants_modal(self) -&gt; bool:\n        wants_modal = st.session_state.get(WANTS_MODAL_MARKER_KEY, None)\n        if wants_modal and wants_modal.get(\"enabled\", False) is True:\n            return True\n        else:\n            st.session_state.pop(WANTS_MODAL_MARKER_KEY, None)\n            return False\n\n    def get_component(self, component_name: str) -&gt; KiaraComponent:\n\n        component = self._component_mgmt.get_component(component_name)\n        if not component:\n            raise Exception(f\"No component availble for name: {component_name}\")\n        return component\n\n    def run_job(self, job: JobDesc, reuse_previous: bool = False) -&gt; ValueMapReadOnly:\n\"\"\"Run a job and return the result.\n\n        Arguments:\n            job: the job to run\n            reuse_previous: if True, the result of the job will be cached and returned if the same job is run again.\n        \"\"\"\n\n        job_cache_key = job.instance_id\n        if reuse_previous:\n            if job_cache_key in self._job_cache.keys():\n                return self._job_cache[job_cache_key]\n\n        result = self._api.run_job(operation=job)\n        if reuse_previous:\n            self._job_cache[job_cache_key] = result\n        return result\n\n    def has_job_result(self, job: JobDesc) -&gt; bool:\n\"\"\"Check if a job has already been run and has a result available.\n\n        Arguments:\n            job: the job to check\n        \"\"\"\n\n        return job.instance_id in self._job_cache.keys()\n\n    def get_previous_job_result(self, job: JobDesc) -&gt; Union[None, ValueMapReadOnly]:\n\n        return self._job_cache.get(job.instance_id, None)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit.api","title":"<code>api: KiaraAPI</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit.components","title":"<code>components: Mapping[str, KiaraComponent]</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit.get_preview_component","title":"<code>get_preview_component(data_type: str, preview_name: Union[str, None] = None) -&gt; PreviewComponent</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def get_preview_component(\n    self, data_type: str, preview_name: Union[str, None] = None\n) -&gt; PreviewComponent:\n    return self._component_mgmt.get_preview_component(\n        data_type=data_type, preview_name=preview_name\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit.get_input_component","title":"<code>get_input_component(data_type: str) -&gt; InputComponent</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def get_input_component(self, data_type: str) -&gt; InputComponent:\n    result = self._component_mgmt.get_input_component(data_type=data_type)\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit.get_import_component","title":"<code>get_import_component(data_type: str) -&gt; Union[DataImportComponent, None]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def get_import_component(self, data_type: str) -&gt; Union[DataImportComponent, None]:\n    result = self._component_mgmt.get_import_component(data_type=data_type)\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit.wants_modal","title":"<code>wants_modal() -&gt; bool</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def wants_modal(self) -&gt; bool:\n    wants_modal = st.session_state.get(WANTS_MODAL_MARKER_KEY, None)\n    if wants_modal and wants_modal.get(\"enabled\", False) is True:\n        return True\n    else:\n        st.session_state.pop(WANTS_MODAL_MARKER_KEY, None)\n        return False\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit.get_component","title":"<code>get_component(component_name: str) -&gt; KiaraComponent</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def get_component(self, component_name: str) -&gt; KiaraComponent:\n\n    component = self._component_mgmt.get_component(component_name)\n    if not component:\n        raise Exception(f\"No component availble for name: {component_name}\")\n    return component\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit.run_job","title":"<code>run_job(job: JobDesc, reuse_previous: bool = False) -&gt; ValueMapReadOnly</code>","text":"<p>Run a job and return the result.</p> <p>Parameters:</p> Name Type Description Default <code>job</code> <code>JobDesc</code> <p>the job to run</p> required <code>reuse_previous</code> <code>bool</code> <p>if True, the result of the job will be cached and returned if the same job is run again.</p> <code>False</code> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def run_job(self, job: JobDesc, reuse_previous: bool = False) -&gt; ValueMapReadOnly:\n\"\"\"Run a job and return the result.\n\n    Arguments:\n        job: the job to run\n        reuse_previous: if True, the result of the job will be cached and returned if the same job is run again.\n    \"\"\"\n\n    job_cache_key = job.instance_id\n    if reuse_previous:\n        if job_cache_key in self._job_cache.keys():\n            return self._job_cache[job_cache_key]\n\n    result = self._api.run_job(operation=job)\n    if reuse_previous:\n        self._job_cache[job_cache_key] = result\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit.has_job_result","title":"<code>has_job_result(job: JobDesc) -&gt; bool</code>","text":"<p>Check if a job has already been run and has a result available.</p> <p>Parameters:</p> Name Type Description Default <code>job</code> <code>JobDesc</code> <p>the job to check</p> required Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def has_job_result(self, job: JobDesc) -&gt; bool:\n\"\"\"Check if a job has already been run and has a result available.\n\n    Arguments:\n        job: the job to check\n    \"\"\"\n\n    return job.instance_id in self._job_cache.keys()\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit.KiaraStreamlit.get_previous_job_result","title":"<code>get_previous_job_result(job: JobDesc) -&gt; Union[None, ValueMapReadOnly]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/streamlit.py</code> <pre><code>def get_previous_job_result(self, job: JobDesc) -&gt; Union[None, ValueMapReadOnly]:\n\n    return self._job_cache.get(job.instance_id, None)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/streamlit/#kiara_plugin.streamlit.streamlit-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/","title":"components","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.COMP_OPTIONS_TYPE","title":"<code>COMP_OPTIONS_TYPE = TypeVar('COMP_OPTIONS_TYPE', bound=ComponentOptions)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentOptions","title":"<code>ComponentOptions</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>class ComponentOptions(BaseModel):\n\n    key: str = Field(\n        description=\"The (base) key to use for this component.\", default=AUTO_GEN_MARKER\n    )\n\n    def create_key(self, *args) -&gt; str:\n\"\"\"Create a unique key for a component.\"\"\"\n\n        base = [\"kiara\", self.key]\n        base.extend(args)\n        _key = \"__\".join(base)\n        return _key\n\n    def get_session_key(self, *key: str) -&gt; str:\n\n        if not key:\n            raise Exception(\"No key provided.\")\n        _key = [self.create_key(*key[0:-1]), \"session_value\", key[-1]]\n        return \"__\".join(_key)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentOptions.key","title":"<code>key: str = Field(description='The (base) key to use for this component.', default=AUTO_GEN_MARKER)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentOptions.create_key","title":"<code>create_key(*args) -&gt; str</code>","text":"<p>Create a unique key for a component.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>def create_key(self, *args) -&gt; str:\n\"\"\"Create a unique key for a component.\"\"\"\n\n    base = [\"kiara\", self.key]\n    base.extend(args)\n    _key = \"__\".join(base)\n    return _key\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentOptions.get_session_key","title":"<code>get_session_key(*key: str) -&gt; str</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>def get_session_key(self, *key: str) -&gt; str:\n\n    if not key:\n        raise Exception(\"No key provided.\")\n    _key = [self.create_key(*key[0:-1]), \"session_value\", key[-1]]\n    return \"__\".join(_key)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent","title":"<code>KiaraComponent</code>","text":"<p>         Bases: <code>abc.ABC</code>, <code>Generic[COMP_OPTIONS_TYPE]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>class KiaraComponent(abc.ABC, Generic[COMP_OPTIONS_TYPE]):\n\n    _options: Type[COMP_OPTIONS_TYPE] = ComponentOptions  # type: ignore\n\n    def __init__(\n        self, kiara_streamlit: \"KiaraStreamlit\", component_name: str, doc: Any = None\n    ):\n\n        self._kiara_streamlit: KiaraStreamlit = kiara_streamlit\n        self._component_name: str = component_name\n        self._st: DeltaGenerator = st  # type: ignore\n        self._session_state: SessionStateProxy = st.session_state\n\n        self._info: Union[ComponentInfo, None] = None\n        if doc is not None:\n            doc = DocumentationMetadataModel.create(doc)\n        self._doc: Union[DocumentationMetadataModel, None] = doc\n\n    @property\n    def api(self) -&gt; \"KiaraAPI\":\n        return self._kiara_streamlit.api\n\n    @property\n    def info(self) -&gt; \"ComponentInfo\":\n\n        if self._info is None:\n            self._info = ComponentInfo.create_from_instance(\n                kiara=self._kiara_streamlit.api.context, instance=self\n            )\n        return self._info\n\n    def doc(self) -&gt; DocumentationMetadataModel:\n\n        if self._doc is None:\n            self._doc = DocumentationMetadataModel.from_class_doc(self.__class__)\n        return self._doc\n\n    @property\n    def component_name(self) -&gt; str:\n        return self._component_name\n\n    @property\n    def kiara_streamlit(self) -&gt; \"KiaraStreamlit\":\n        return self._kiara_streamlit\n\n    def default_key(self) -&gt; str:\n        return f\"Component:{self.__class__.__name__}\"\n\n    def get_session_var(\n        self, options: \"ComponentOptions\", *key: str, default: Any = None\n    ) -&gt; Any:\n\n        session_key = options.get_session_key(*key)\n\n        if session_key not in self._session_state:\n            return default\n\n        value = self._session_state[session_key]\n        return value\n\n    def set_session_var(\n        self, options: \"ComponentOptions\", *key: str, value: Any\n    ) -&gt; None:\n\n        session_key = options.get_session_key(*key)\n        self._session_state[session_key] = value\n\n    def _create_session_store_callback(\n        self, options: ComponentOptions, *key, default=None\n    ) -&gt; Tuple[Callable, str]:\n\n        _widget_key = options.create_key(*key)\n\n        current = self.get_session_var(options, *key, default=default)\n\n        if current is not None and _widget_key not in self._session_state:\n            self._session_state[_widget_key] = current\n\n        def callback():\n            self._st.session_state[\n                options.get_session_key(*key)\n            ] = self._st.session_state[_widget_key]\n\n        return callback, _widget_key\n\n    def render_func(self, st: Union[DeltaGenerator, None] = None) -&gt; Callable:\n\n        if st is None:\n            st = self._st\n\n        return partial(self.render, st)\n\n    def get_option_names(self) -&gt; List[str]:\n\n        option_fields = list(self.__class__._options.__fields__.keys())\n        option_fields.reverse()\n        return option_fields\n\n    def render(self, st: \"KiaraStreamlitAPI\", *args, **kwargs) -&gt; Any:\n\n        option_fields = self.get_option_names()\n\n        for idx, arg in enumerate(args):\n            try:\n                key = option_fields[idx]\n            except Exception:\n                raise Exception(\n                    f\"Invalid number of positional arguments for component '{self.__class__.__name__}'.\"\n                )\n\n            if key in kwargs.keys():\n                raise Exception(f\"Duplicate value for key '{key}'.\")\n\n            if key == \"key\":\n                continue\n            kwargs[key] = arg\n\n        if \"key\" not in kwargs.keys() or AUTO_GEN_MARKER == kwargs[\"key\"]:\n            kwargs[\"key\"] = self.default_key()\n\n        try:\n            options = self.__class__._options(**kwargs)\n            return self._render(st, options)\n        except Exception as e:\n            import traceback\n\n            traceback.print_exc()\n            st.error(e)\n            return None\n\n    @abc.abstractmethod\n    def _render(self, st: \"KiaraStreamlitAPI\", options: COMP_OPTIONS_TYPE):\n        pass\n\n    def get_component(self, component_name: str) -&gt; \"KiaraComponent\":\n        result = self._kiara_streamlit.get_component(component_name)\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.api","title":"<code>api: KiaraAPI</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.info","title":"<code>info: ComponentInfo</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.component_name","title":"<code>component_name: str</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.kiara_streamlit","title":"<code>kiara_streamlit: KiaraStreamlit</code>  <code>property</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.doc","title":"<code>doc() -&gt; DocumentationMetadataModel</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>def doc(self) -&gt; DocumentationMetadataModel:\n\n    if self._doc is None:\n        self._doc = DocumentationMetadataModel.from_class_doc(self.__class__)\n    return self._doc\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.default_key","title":"<code>default_key() -&gt; str</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>def default_key(self) -&gt; str:\n    return f\"Component:{self.__class__.__name__}\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.get_session_var","title":"<code>get_session_var(options: ComponentOptions, *key: str, default: Any = None) -&gt; Any</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>def get_session_var(\n    self, options: \"ComponentOptions\", *key: str, default: Any = None\n) -&gt; Any:\n\n    session_key = options.get_session_key(*key)\n\n    if session_key not in self._session_state:\n        return default\n\n    value = self._session_state[session_key]\n    return value\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.set_session_var","title":"<code>set_session_var(options: ComponentOptions, *key: str, value: Any) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>def set_session_var(\n    self, options: \"ComponentOptions\", *key: str, value: Any\n) -&gt; None:\n\n    session_key = options.get_session_key(*key)\n    self._session_state[session_key] = value\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.render_func","title":"<code>render_func(st: Union[DeltaGenerator, None] = None) -&gt; Callable</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>def render_func(self, st: Union[DeltaGenerator, None] = None) -&gt; Callable:\n\n    if st is None:\n        st = self._st\n\n    return partial(self.render, st)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.get_option_names","title":"<code>get_option_names() -&gt; List[str]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>def get_option_names(self) -&gt; List[str]:\n\n    option_fields = list(self.__class__._options.__fields__.keys())\n    option_fields.reverse()\n    return option_fields\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.render","title":"<code>render(st: KiaraStreamlitAPI, *args: KiaraStreamlitAPI, **kwargs: KiaraStreamlitAPI) -&gt; Any</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>def render(self, st: \"KiaraStreamlitAPI\", *args, **kwargs) -&gt; Any:\n\n    option_fields = self.get_option_names()\n\n    for idx, arg in enumerate(args):\n        try:\n            key = option_fields[idx]\n        except Exception:\n            raise Exception(\n                f\"Invalid number of positional arguments for component '{self.__class__.__name__}'.\"\n            )\n\n        if key in kwargs.keys():\n            raise Exception(f\"Duplicate value for key '{key}'.\")\n\n        if key == \"key\":\n            continue\n        kwargs[key] = arg\n\n    if \"key\" not in kwargs.keys() or AUTO_GEN_MARKER == kwargs[\"key\"]:\n        kwargs[\"key\"] = self.default_key()\n\n    try:\n        options = self.__class__._options(**kwargs)\n        return self._render(st, options)\n    except Exception as e:\n        import traceback\n\n        traceback.print_exc()\n        st.error(e)\n        return None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.KiaraComponent.get_component","title":"<code>get_component(component_name: str) -&gt; KiaraComponent</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>def get_component(self, component_name: str) -&gt; \"KiaraComponent\":\n    result = self._kiara_streamlit.get_component(component_name)\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ArgInfo","title":"<code>ArgInfo</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>class ArgInfo(BaseModel):\n    @classmethod\n    def from_field(cls, field_info: ModelField):\n\n        python_type = field_info.outer_type_\n        desc = field_info.field_info.description\n        req = field_info.required\n        default = field_info.default\n\n        if not desc:\n            desc = \"-- n/a --\"\n\n        if (\n            not field_info.is_complex()\n            and not field_info.required\n            and \"Union\" not in str(python_type)\n        ):\n            python_type_string = f\"Union[None, {python_type.__name__}]\"\n        else:\n            python_type_string = str(python_type)\n            if python_type_string.startswith(\"&lt;class\"):\n                python_type_string = python_type.__name__\n\n        python_type_string = python_type_string.replace(\"NoneType\", \"None\")\n        python_type_string = python_type_string.replace(\"typing.\", \"\")\n        return ArgInfo(\n            python_type=python_type,\n            description=desc,\n            required=req,\n            default=default,\n            python_type_string=python_type_string,\n        )\n\n    python_type: Any = Field(description=\"The python type of this argument.\")\n    python_type_string: str = Field(\n        description=\"The python type hint of this argument.\"\n    )\n    description: str = Field(description=\"The description of this argument.\")\n    required: bool = Field(description=\"Whether this argument is required.\")\n    default: Any = Field(description=\"The default value for this argument.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ArgInfo-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ArgInfo.python_type","title":"<code>python_type: Any = Field(description='The python type of this argument.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ArgInfo.python_type_string","title":"<code>python_type_string: str = Field(description='The python type hint of this argument.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ArgInfo.description","title":"<code>description: str = Field(description='The description of this argument.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ArgInfo.required","title":"<code>required: bool = Field(description='Whether this argument is required.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ArgInfo.default","title":"<code>default: Any = Field(description='The default value for this argument.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ArgInfo-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ArgInfo.from_field","title":"<code>from_field(field_info: ModelField)</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>@classmethod\ndef from_field(cls, field_info: ModelField):\n\n    python_type = field_info.outer_type_\n    desc = field_info.field_info.description\n    req = field_info.required\n    default = field_info.default\n\n    if not desc:\n        desc = \"-- n/a --\"\n\n    if (\n        not field_info.is_complex()\n        and not field_info.required\n        and \"Union\" not in str(python_type)\n    ):\n        python_type_string = f\"Union[None, {python_type.__name__}]\"\n    else:\n        python_type_string = str(python_type)\n        if python_type_string.startswith(\"&lt;class\"):\n            python_type_string = python_type.__name__\n\n    python_type_string = python_type_string.replace(\"NoneType\", \"None\")\n    python_type_string = python_type_string.replace(\"typing.\", \"\")\n    return ArgInfo(\n        python_type=python_type,\n        description=desc,\n        required=req,\n        default=default,\n        python_type_string=python_type_string,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentInfo","title":"<code>ComponentInfo</code>","text":"<p>         Bases: <code>ItemInfo[KiaraComponent]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>class ComponentInfo(ItemInfo[KiaraComponent]):\n\n    arguments: Dict[str, ArgInfo] = Field(\n        description=\"The arguments for this component.\"\n    )\n    examples: List[Dict[str, Any]] = Field(\n        description=\"The examples for this component.\", default_factory=list\n    )\n    python_class: PythonClass = Field(\n        description=\"The python class backing this component.\"\n    )\n\n    @classmethod\n    def base_instance_class(cls) -&gt; Type[KiaraComponent]:\n        return KiaraComponent\n\n    @classmethod\n    def create_from_instance(cls, kiara: \"Kiara\", instance: KiaraComponent, **kwargs):\n        authors_md = AuthorsMetadataModel.from_class(cls)\n        doc = instance.doc()\n        # python_class = PythonClass.from_class(cls)\n        context = ContextMetadataModel.from_class(instance.__class__)\n        type_name = instance.component_name\n\n        options_cls = instance.__class__._options\n        args = {}\n        field_names = list(options_cls.__fields__.keys())\n        field_names.reverse()\n        for field_name in field_names:\n            details = options_cls.__fields__[field_name]\n            args[field_name] = ArgInfo.from_field(details)\n\n        if hasattr(instance, \"_instance_examples\"):\n            examples = instance._instance_examples  # type: ignore\n\n        elif hasattr(instance.__class__, \"_examples\"):\n            examples = instance.__class__._examples  # type: ignore\n        else:\n            examples = []\n\n        info = ComponentInfo(\n            type_name=type_name,\n            authors=authors_md,\n            documentation=doc,\n            context=context,\n            arguments=args,\n            examples=examples,\n            python_class=PythonClass.from_class(instance.__class__),\n        )\n        return info\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentInfo-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentInfo.arguments","title":"<code>arguments: Dict[str, ArgInfo] = Field(description='The arguments for this component.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentInfo.examples","title":"<code>examples: List[Dict[str, Any]] = Field(description='The examples for this component.', default_factory=list)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentInfo.python_class","title":"<code>python_class: PythonClass = Field(description='The python class backing this component.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentInfo-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentInfo.base_instance_class","title":"<code>base_instance_class() -&gt; Type[KiaraComponent]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>@classmethod\ndef base_instance_class(cls) -&gt; Type[KiaraComponent]:\n    return KiaraComponent\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentInfo.create_from_instance","title":"<code>create_from_instance(kiara: Kiara, instance: KiaraComponent, **kwargs: KiaraComponent)</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>@classmethod\ndef create_from_instance(cls, kiara: \"Kiara\", instance: KiaraComponent, **kwargs):\n    authors_md = AuthorsMetadataModel.from_class(cls)\n    doc = instance.doc()\n    # python_class = PythonClass.from_class(cls)\n    context = ContextMetadataModel.from_class(instance.__class__)\n    type_name = instance.component_name\n\n    options_cls = instance.__class__._options\n    args = {}\n    field_names = list(options_cls.__fields__.keys())\n    field_names.reverse()\n    for field_name in field_names:\n        details = options_cls.__fields__[field_name]\n        args[field_name] = ArgInfo.from_field(details)\n\n    if hasattr(instance, \"_instance_examples\"):\n        examples = instance._instance_examples  # type: ignore\n\n    elif hasattr(instance.__class__, \"_examples\"):\n        examples = instance.__class__._examples  # type: ignore\n    else:\n        examples = []\n\n    info = ComponentInfo(\n        type_name=type_name,\n        authors=authors_md,\n        documentation=doc,\n        context=context,\n        arguments=args,\n        examples=examples,\n        python_class=PythonClass.from_class(instance.__class__),\n    )\n    return info\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentsInfo","title":"<code>ComponentsInfo</code>","text":"<p>         Bases: <code>InfoItemGroup[ComponentInfo]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>class ComponentsInfo(InfoItemGroup[ComponentInfo]):\n    @classmethod\n    def base_info_class(cls) -&gt; Type[ComponentInfo]:\n        return ComponentInfo\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentsInfo-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/__init__/#kiara_plugin.streamlit.components.ComponentsInfo.base_info_class","title":"<code>base_info_class() -&gt; Type[ComponentInfo]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/__init__.py</code> <pre><code>@classmethod\ndef base_info_class(cls) -&gt; Type[ComponentInfo]:\n    return ComponentInfo\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/models/","title":"models","text":""},{"location":"reference/kiara_plugin/streamlit/components/models/#kiara_plugin.streamlit.components.models-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/models/#kiara_plugin.streamlit.components.models.ModelComponentOptions","title":"<code>ModelComponentOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> <p>Options for rendering a generic model.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/models.py</code> <pre><code>class ModelComponentOptions(ComponentOptions):\n\"\"\"Options for rendering a generic model.\"\"\"\n\n    model_instance: BaseModel = Field(description=\"The model to render.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/models/#kiara_plugin.streamlit.components.models.ModelComponentOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/models/#kiara_plugin.streamlit.components.models.ModelComponentOptions.model_instance","title":"<code>model_instance: BaseModel = Field(description='The model to render.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/models/#kiara_plugin.streamlit.components.models.ModelComponentOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/models/#kiara_plugin.streamlit.components.models-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/models/#kiara_plugin.streamlit.components.models.write_generic_data","title":"<code>write_generic_data(st: KiaraStreamlitAPI, data: Any, prefix: Union[str, None] = None)</code>","text":"<p>Try to write generic data.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/models.py</code> <pre><code>def write_generic_data(\n    st: \"KiaraStreamlitAPI\", data: Any, prefix: Union[str, None] = None\n):\n\"\"\"Try to write generic data.\"\"\"\n\n    if isinstance(data, BaseModel):\n\n        field_names = sorted(data.__fields__.keys())\n\n        if len(field_names) &gt; 1:\n            for field_name in field_names:\n                key_col, val_col = st.columns([1, 5])\n                field_data = getattr(data, field_name)\n                with key_col:\n                    if prefix:\n                        _text = f\"{prefix}.{field_name}\"\n                    else:\n                        _text = field_name\n                    st.write(f\"**{_text}**\")\n                with val_col:\n                    write_generic_data(st, field_data)\n        else:\n            write_generic_data(st, getattr(data, field_names[0]), prefix=field_names[0])\n\n    elif isinstance(data, Mapping):\n        for k, v in data.items():\n            key_col, val_col = st.columns([1, 4])\n            with key_col:\n                if not prefix:\n                    st.write(f\"**{k}**\")\n                else:\n                    st.write(f\"**{prefix}.{k}**\")\n            with val_col:\n                write_generic_data(st, v)\n    else:\n        st.write(data)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/models/#kiara_plugin.streamlit.components.models.create_recursive_table_from_model_object","title":"<code>create_recursive_table_from_model_object(model: BaseModel, render_config: Union[Mapping[str, Any], None] = None)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/models.py</code> <pre><code>def create_recursive_table_from_model_object(\n    model: BaseModel,\n    render_config: Union[Mapping[str, Any], None] = None,\n):\n\n    if render_config is None:\n        render_config = {}\n\n    model_cls = model.__class__\n\n    table = {}\n\n    props = model_cls.schema().get(\"properties\", {})\n\n    for field_name in sorted(model_cls.__fields__.keys()):\n\n        data = getattr(model, field_name)\n        p = props.get(field_name, None)\n        p_type = None\n        if p is not None:\n            p_type = p.get(\"type\", None)\n            # TODO: check 'anyOf' keys\n            p.get(\"description\", None)\n\n        if p_type is None:\n            p_type = \"-- n/a --\"\n\n        if isinstance(data, BaseModel):\n            data_renderable = create_recursive_table_from_model_object(\n                data, render_config=render_config\n            )\n        elif isinstance(data, Mapping):\n            _data_renderable = {}\n            for k, v in data.items():\n                if isinstance(v, BaseModel):\n                    _data_renderable[k] = create_recursive_table_from_model_object(\n                        model=v, render_config=render_config\n                    )\n                else:\n                    _data_renderable[k] = v\n            data_renderable = _data_renderable\n        else:\n            data_renderable = data\n            # sub_model = create_recursive_table_from_model_object(\n            #     data, render_config={\"show_lines\": True, \"show_header\": False}\n            # )\n            # data_renderable = None\n\n        # table[field_name] = {\n        #     \"data\": data_renderable,\n        #     \"type\": p_type,\n        #     \"description\": desc,\n        # }\n        table[field_name] = data_renderable\n\n    return table\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/","title":"context","text":""},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/#kiara_plugin.streamlit.components.context-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/#kiara_plugin.streamlit.components.context.ContextSwitchOptions","title":"<code>ContextSwitchOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/context/__init__.py</code> <pre><code>class ContextSwitchOptions(ComponentOptions):\n\n    allow_create: bool = Field(\n        description=\"Allow the user to create a new context.\", default=False\n    )\n    switch_to_selected: bool = Field(\n        description=\"Immediately switch to the selected context.\", default=True\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/#kiara_plugin.streamlit.components.context.ContextSwitchOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/#kiara_plugin.streamlit.components.context.ContextSwitchOptions.allow_create","title":"<code>allow_create: bool = Field(description='Allow the user to create a new context.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/#kiara_plugin.streamlit.components.context.ContextSwitchOptions.switch_to_selected","title":"<code>switch_to_selected: bool = Field(description='Immediately switch to the selected context.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/#kiara_plugin.streamlit.components.context.ContextSwitchOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/#kiara_plugin.streamlit.components.context.ContextSwitch","title":"<code>ContextSwitch</code>","text":"<p>         Bases: <code>KiaraComponent[ContextSwitchOptions]</code></p> <p>A component to switch between kiara contexts.</p> <p>A kiara context is used to separate different sets of data and configuration, and is useful to keep datasets and processing results organized.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/context/__init__.py</code> <pre><code>class ContextSwitch(KiaraComponent[ContextSwitchOptions]):\n\"\"\"A component to switch between kiara contexts.\n\n    A *kiara* context is used to separate different sets of data and configuration, and is\n    useful to keep datasets and processing results organized.\n    \"\"\"\n\n    _options = ContextSwitchOptions\n    _component_name = \"context_switch_control\"\n\n    _examples: ClassVar = [\n        {\n            \"doc\": \"Show a context switch control.\\n\\nAllow the user to create a new context, and don't immediately switch to the selected context. You can compare the result of this component call with a call to `st.api.current_context_name`, to figure out whether the user wants to switch or not.\",\n            \"args\": {\n                \"switch_to_selected\": False,\n                \"allow_create\": True,\n            },\n        }\n    ]\n\n    def _render(self, st: \"KiaraStreamlitAPI\", options: ContextSwitchOptions) -&gt; bool:\n\n        if not options.allow_create:\n            context_names = self.api.list_context_names()\n            if \"default\" in context_names:\n                context_names.pop(context_names.index(\"default\"))\n                context_names.insert(0, \"default\")\n            current = self.api.get_current_context_name()\n\n            selected_context = self.write_selectbox(\n                st=st,\n                items=context_names,\n                key=[\"kiara_context\", \"context_name\"],\n                options=options,\n                default=current,\n                label=\"Select context\",\n                help=\"Select the active context.\",\n            )\n            if selected_context != current:\n                self.api.set_active_context(selected_context)\n\n            return selected_context\n\n        else:\n\n            selectbox_placeholder = st.empty()\n            checkbox_key = options.create_key(\"kiara_context\", \"new_context_checkbox\")\n\n            text_field_key = options.create_key(\n                \"kiara_context\", \"context_name\", \"text_field\"\n            )\n\n            if self.get_session_var(options, \"kiara_context\", \"created\", default=False):\n                self.set_session_var(options, \"kiara_context\", \"created\", value=False)\n                self._session_state[text_field_key] = \"\"\n                self._session_state[checkbox_key] = False\n\n            create_context_checkbox = st.checkbox(\n                \"Create new context\", key=checkbox_key\n            )\n            submitted = False\n            if create_context_checkbox:\n                with st.form(key=options.create_key(\"context_select_form\")):\n\n                    new_context_name = st.text_input(\n                        label=\"Context name\", key=text_field_key, value=\"\"\n                    )\n                    submitted = st.form_submit_button(\"Create\")\n\n            current = self.api.get_current_context_name()\n            if submitted:\n                print(f\"CREATING CONTEXT: {new_context_name}\")\n                self.api.create_new_context(new_context_name, set_active=False)\n                # self.set_session_var(options, \"kiara_context\", \"context_name\", value=new_context_name)\n                self.set_session_var(options, \"kiara_context\", \"created\", value=True)\n                force = new_context_name\n            else:\n                self.set_session_var(options, \"kiara_context\", \"created\", value=False)\n                force = None\n\n            context_names = self.api.list_context_names()\n\n            if \"default\" in context_names:\n                context_names.pop(context_names.index(\"default\"))\n                context_names.insert(0, \"default\")\n\n            selected_context = self.write_selectbox(\n                st=selectbox_placeholder,  # type: ignore\n                items=context_names,\n                options=options,\n                key=[\"kiara_context\", \"select_context\"],\n                force=force,\n                default=current,\n                label=\"Select context\",\n                help=\"Select the active context.\",\n            )\n\n            if selected_context != current and options.switch_to_selected:\n                self.api.set_active_context(selected_context)\n\n            return selected_context\n\n    def write_selectbox(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: ContextSwitchOptions,\n        key: List[str],\n        items: List[str],\n        force: Any = None,\n        default: Any = None,\n        label: Union[str, None] = None,\n        help: Union[str, None] = None,\n        format_func: Callable[[Any], Any] = str,\n    ) -&gt; Any:\n\n        value_state_key = options.get_session_key(*key)\n        widget_key = options.create_key(*key, \"selectbox\")\n\n        idx = 0\n        if force is not None:\n            self._session_state[widget_key] = force\n            idx = 0\n        elif widget_key not in self._session_state:\n            if default:\n                idx = items.index(default)\n            else:\n                idx = 0\n\n        if not label:\n            label = \"Select value\"\n\n        def _set_current_value():\n            self._session_state[value_state_key] = self._session_state[widget_key]\n\n        result = st.selectbox(\n            label=label,\n            options=items,\n            key=widget_key,\n            index=idx,\n            on_change=_set_current_value,\n            help=help,\n            format_func=format_func,\n        )\n\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/#kiara_plugin.streamlit.components.context.ContextSwitch-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/#kiara_plugin.streamlit.components.context.ContextSwitch-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/context/__init__/#kiara_plugin.streamlit.components.context.ContextSwitch.write_selectbox","title":"<code>write_selectbox(st: KiaraStreamlitAPI, options: ContextSwitchOptions, key: List[str], items: List[str], force: Any = None, default: Any = None, label: Union[str, None] = None, help: Union[str, None] = None, format_func: Callable[[Any], Any] = str) -&gt; Any</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/context/__init__.py</code> <pre><code>def write_selectbox(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: ContextSwitchOptions,\n    key: List[str],\n    items: List[str],\n    force: Any = None,\n    default: Any = None,\n    label: Union[str, None] = None,\n    help: Union[str, None] = None,\n    format_func: Callable[[Any], Any] = str,\n) -&gt; Any:\n\n    value_state_key = options.get_session_key(*key)\n    widget_key = options.create_key(*key, \"selectbox\")\n\n    idx = 0\n    if force is not None:\n        self._session_state[widget_key] = force\n        idx = 0\n    elif widget_key not in self._session_state:\n        if default:\n            idx = items.index(default)\n        else:\n            idx = 0\n\n    if not label:\n        label = \"Select value\"\n\n    def _set_current_value():\n        self._session_state[value_state_key] = self._session_state[widget_key]\n\n    result = st.selectbox(\n        label=label,\n        options=items,\n        key=widget_key,\n        index=idx,\n        on_change=_set_current_value,\n        help=help,\n        format_func=format_func,\n    )\n\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/","title":"data_import","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.ONBOARDING_OPTIONS_TYPE","title":"<code>ONBOARDING_OPTIONS_TYPE = TypeVar('ONBOARDING_OPTIONS_TYPE', bound=DataImportOptions)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportOptions","title":"<code>DataImportOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/data_import/__init__.py</code> <pre><code>class DataImportOptions(ComponentOptions):\n\n    reuse_previous_preview_results: bool = Field(\n        description=\"Whether to cache previous preview results and display the preview straight away.\",\n        default=True,\n    )\n    display_style: str = Field(\n        description=\"The display style to use for this input field.\", default=\"default\"\n    )\n    help: Union[str, None] = Field(\n        description=\"The help to display for this input field.\",\n        default=DEFAULT_NO_DESC_VALUE,\n    )\n    label: str = Field(\n        description=\"The label to use for the input field.\", default=NO_LABEL_MARKER\n    )\n    result_field: Union[str, None] = Field(\n        description=\"The name of the field to use to pick the result value from the job result that is run. Defaults to data type name.\",\n        default=None,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportOptions.reuse_previous_preview_results","title":"<code>reuse_previous_preview_results: bool = Field(description='Whether to cache previous preview results and display the preview straight away.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportOptions.display_style","title":"<code>display_style: str = Field(description='The display style to use for this input field.', default='default')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportOptions.help","title":"<code>help: Union[str, None] = Field(description='The help to display for this input field.', default=DEFAULT_NO_DESC_VALUE)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportOptions.label","title":"<code>label: str = Field(description='The label to use for the input field.', default=NO_LABEL_MARKER)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportOptions.result_field","title":"<code>result_field: Union[str, None] = Field(description='The name of the field to use to pick the result value from the job result that is run. Defaults to data type name.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportResult","title":"<code>DataImportResult</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/data_import/__init__.py</code> <pre><code>class DataImportResult(BaseModel):\n\n    value: Union[Value, None] = Field(description=\"The value that was onboarded.\")\n    is_finished: bool = Field(description=\"Whether the onboarding process is finished.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportResult-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportResult.value","title":"<code>value: Union[Value, None] = Field(description='The value that was onboarded.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportResult.is_finished","title":"<code>is_finished: bool = Field(description='Whether the onboarding process is finished.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportComponent","title":"<code>DataImportComponent</code>","text":"<p>         Bases: <code>KiaraComponent[ONBOARDING_OPTIONS_TYPE]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/data_import/__init__.py</code> <pre><code>class DataImportComponent(KiaraComponent[ONBOARDING_OPTIONS_TYPE]):\n\n    _component_name = None  # type: ignore\n    _examples = [{\"doc\": \"Render the default table onboarding component.\", \"args\": {}}]\n    _options: Type[DataImportOptions] = DataImportOptions  # type: ignore\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: ONBOARDING_OPTIONS_TYPE\n    ) -&gt; Union[Value, None]:\n\n        job_desc = self.render_onboarding_page(st=st, options=options)\n        if job_desc:\n            job_result = st.kiara.run_job_panel(\n                job_desc=job_desc,\n                reuse_previous_result=options.reuse_previous_preview_results,\n            )\n        else:\n            job_result = None\n\n        result_value = None\n        if job_result:\n\n            field_name = options.result_field\n            if not field_name:\n                field_name = self.get_data_type()\n\n            if field_name not in job_result.field_names:\n                raise Exception(\n                    f\"Can't pick field '{field_name}' from result of import operation. Available field names: {', '.join(job_result.field_names)}. This is most likely a bug.\"\n                )\n\n            result_value = job_result.get_value_obj(field_name)\n\n        return result_value\n\n    @classmethod\n    @abc.abstractmethod\n    def get_data_type(cls) -&gt; str:\n\"\"\"Return the data type this component can import.\"\"\"\n\n    @abc.abstractmethod\n    def render_onboarding_page(\n        self, st: \"KiaraStreamlitAPI\", options: DataImportOptions\n    ) -&gt; Union[None, JobDesc]:\n\"\"\"Render a page that onboards a value.\n\n        Arguments:\n            st: The KiaraStreamlitAPI instance.\n            options: The options for the onboarding component.\n        \"\"\"\n\n    def create_modal_options(\n        self, st: \"KiaraStreamlitAPI\", request: ModalRequest\n    ) -&gt; DataImportOptions:\n\n        default_options = self._options()\n        return default_options\n\n    def show_modal(self, st: \"KiaraStreamlitAPI\", request: ModalRequest) -&gt; None:\n\n        options = self.create_modal_options(st=st, request=request)\n        _key = options.create_key(\"import\", self.get_data_type(), \"modal\")\n\n        job_desc = self.render_onboarding_page(st=st, options=options)\n\n        reuse_results = options.reuse_previous_preview_results\n\n        if job_desc and reuse_results:\n            previous_result = st.kiara.get_previous_job_result(job=job_desc)\n            if previous_result:\n                field_name = options.result_field\n                if not field_name:\n                    field_name = self.get_data_type()\n                result_value = previous_result.get_value_obj(field_name)\n            else:\n                result_value = None\n        else:\n            result_value = None\n\n        preview_container, button_area = st.columns([5, 1])\n\n        submit = False\n        with button_area:\n            cancel = st.button(\n                \"Cancel\", key=f\"{_key}_cancel_button\", use_container_width=True\n            )\n            if cancel:\n                request.result.modal_finished = True\n                return\n\n            preview = st.button(\n                \"Preview\",\n                key=f\"{_key}_preview_button\",\n                disabled=not job_desc or result_value is not None,\n                use_container_width=True,\n            )\n\n            save_placeholder = st.empty()\n\n        with preview_container:\n            preview_placeholder = st.empty()\n\n        if not result_value:\n            if not job_desc or (not preview and not submit):\n                if result_value is None:\n                    preview_placeholder.write(\"-- no value --\")\n\n            else:\n                job_result: ValueMap = st.kiara.run_job_panel(\n                    job_desc=job_desc,\n                    run_instantly=True,\n                    reuse_previous_result=reuse_results,\n                )\n\n                if not job_result:\n                    preview_placeholder.write(\"-- no value --\")\n                    return\n\n                field_name = options.result_field\n                if not field_name:\n                    field_name = self.get_data_type()\n\n                if field_name not in job_result.field_names:\n                    raise Exception(\n                        f\"Can't pick field '{field_name}' from result of import operation. Available field names: {', '.join(job_result.field_names)}. This is most likely a bug.\"\n                    )\n\n                result_value = job_result.get_value_obj(field_name)\n\n        if result_value is not None:\n            with preview_placeholder:\n                st.kiara.preview(result_value)\n\n        with save_placeholder:\n            with st.form(\"Save &amp; import\"):\n                alias = st.text_input(\n                    \"Alias\",\n                    help=f\"The alias to save the imported {self.get_data_type()} value as.\",\n                    key=f\"{_key}_alias_field\",\n                )\n                submit = st.form_submit_button(\"Import\", disabled=result_value is None)\n\n        if submit:\n            if not alias:\n                with button_area:\n                    st.error(\"No alias specified.\")\n            elif not result_value:\n                st.error(\"No value to import.\")\n            else:\n\n                self.api.store_value(result_value, alias=alias, allow_overwrite=True)\n                request.result.modal_finished = True\n                request.result.value = result_value  # type: ignore\n                request.result.alias = alias  # type: ignore\n\n                if request.config.store_alias_key:\n                    st.session_state[request.config.store_alias_key] = alias  # type: ignore\n                if request.config.store_value_key:\n                    st.session_state[request.config.store_value_key] = result_value  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportComponent.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code> <code>abstractmethod</code>","text":"<p>Return the data type this component can import.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/data_import/__init__.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef get_data_type(cls) -&gt; str:\n\"\"\"Return the data type this component can import.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportComponent.render_onboarding_page","title":"<code>render_onboarding_page(st: KiaraStreamlitAPI, options: DataImportOptions) -&gt; Union[None, JobDesc]</code>  <code>abstractmethod</code>","text":"<p>Render a page that onboards a value.</p> <p>Parameters:</p> Name Type Description Default <code>st</code> <code>KiaraStreamlitAPI</code> <p>The KiaraStreamlitAPI instance.</p> required <code>options</code> <code>DataImportOptions</code> <p>The options for the onboarding component.</p> required Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/data_import/__init__.py</code> <pre><code>@abc.abstractmethod\ndef render_onboarding_page(\n    self, st: \"KiaraStreamlitAPI\", options: DataImportOptions\n) -&gt; Union[None, JobDesc]:\n\"\"\"Render a page that onboards a value.\n\n    Arguments:\n        st: The KiaraStreamlitAPI instance.\n        options: The options for the onboarding component.\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportComponent.create_modal_options","title":"<code>create_modal_options(st: KiaraStreamlitAPI, request: ModalRequest) -&gt; DataImportOptions</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/data_import/__init__.py</code> <pre><code>def create_modal_options(\n    self, st: \"KiaraStreamlitAPI\", request: ModalRequest\n) -&gt; DataImportOptions:\n\n    default_options = self._options()\n    return default_options\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/data_import/__init__/#kiara_plugin.streamlit.components.data_import.DataImportComponent.show_modal","title":"<code>show_modal(st: KiaraStreamlitAPI, request: ModalRequest) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/data_import/__init__.py</code> <pre><code>def show_modal(self, st: \"KiaraStreamlitAPI\", request: ModalRequest) -&gt; None:\n\n    options = self.create_modal_options(st=st, request=request)\n    _key = options.create_key(\"import\", self.get_data_type(), \"modal\")\n\n    job_desc = self.render_onboarding_page(st=st, options=options)\n\n    reuse_results = options.reuse_previous_preview_results\n\n    if job_desc and reuse_results:\n        previous_result = st.kiara.get_previous_job_result(job=job_desc)\n        if previous_result:\n            field_name = options.result_field\n            if not field_name:\n                field_name = self.get_data_type()\n            result_value = previous_result.get_value_obj(field_name)\n        else:\n            result_value = None\n    else:\n        result_value = None\n\n    preview_container, button_area = st.columns([5, 1])\n\n    submit = False\n    with button_area:\n        cancel = st.button(\n            \"Cancel\", key=f\"{_key}_cancel_button\", use_container_width=True\n        )\n        if cancel:\n            request.result.modal_finished = True\n            return\n\n        preview = st.button(\n            \"Preview\",\n            key=f\"{_key}_preview_button\",\n            disabled=not job_desc or result_value is not None,\n            use_container_width=True,\n        )\n\n        save_placeholder = st.empty()\n\n    with preview_container:\n        preview_placeholder = st.empty()\n\n    if not result_value:\n        if not job_desc or (not preview and not submit):\n            if result_value is None:\n                preview_placeholder.write(\"-- no value --\")\n\n        else:\n            job_result: ValueMap = st.kiara.run_job_panel(\n                job_desc=job_desc,\n                run_instantly=True,\n                reuse_previous_result=reuse_results,\n            )\n\n            if not job_result:\n                preview_placeholder.write(\"-- no value --\")\n                return\n\n            field_name = options.result_field\n            if not field_name:\n                field_name = self.get_data_type()\n\n            if field_name not in job_result.field_names:\n                raise Exception(\n                    f\"Can't pick field '{field_name}' from result of import operation. Available field names: {', '.join(job_result.field_names)}. This is most likely a bug.\"\n                )\n\n            result_value = job_result.get_value_obj(field_name)\n\n    if result_value is not None:\n        with preview_placeholder:\n            st.kiara.preview(result_value)\n\n    with save_placeholder:\n        with st.form(\"Save &amp; import\"):\n            alias = st.text_input(\n                \"Alias\",\n                help=f\"The alias to save the imported {self.get_data_type()} value as.\",\n                key=f\"{_key}_alias_field\",\n            )\n            submit = st.form_submit_button(\"Import\", disabled=result_value is None)\n\n    if submit:\n        if not alias:\n            with button_area:\n                st.error(\"No alias specified.\")\n        elif not result_value:\n            st.error(\"No value to import.\")\n        else:\n\n            self.api.store_value(result_value, alias=alias, allow_overwrite=True)\n            request.result.modal_finished = True\n            request.result.value = result_value  # type: ignore\n            request.result.alias = alias  # type: ignore\n\n            if request.config.store_alias_key:\n                st.session_state[request.config.store_alias_key] = alias  # type: ignore\n            if request.config.store_value_key:\n                st.session_state[request.config.store_value_key] = result_value  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/data_import/tabular/","title":"tabular","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/tabular/#kiara_plugin.streamlit.components.data_import.tabular-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/tabular/#kiara_plugin.streamlit.components.data_import.tabular.TableDataImportComponent","title":"<code>TableDataImportComponent</code>","text":"<p>         Bases: <code>DataImportComponent</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/data_import/tabular.py</code> <pre><code>class TableDataImportComponent(DataImportComponent):\n\n    _component_name = \"import_table\"\n    _examples = [{\"doc\": \"The default table onboarding component.\", \"args\": {}}]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"table\"\n\n    def render_onboarding_page(\n        self, st: \"KiaraStreamlitAPI\", options: DataImportOptions\n    ) -&gt; Union[None, JobDesc]:\n\n        supported_file_types = [\"csv\"]\n\n        with st.expander(label=\"Select a source file\", expanded=True):\n            key = options.create_key(\"onboard\", \"table\", \"onboard\", \"file\")\n            selected_value = self.get_component(\"input_file\").render(\n                st=st,\n                key=key,\n                add_existing_file_option=True,\n                accepted_file_extensions=supported_file_types,\n                show_preview=False,\n            )\n\n        with st.expander(label=\"Create table\", expanded=True):\n            key_column, value_column = st.columns([1, 5])\n            with key_column:\n                st.write(\"File content\")\n            with value_column:\n                if selected_value:\n                    st.kiara.preview_file(selected_value)\n                else:\n                    st.write(\"*-- no file selected --*\")\n\n            key_column, value_column = st.columns([1, 5])\n            with key_column:\n                st.write(\"Options\")\n            with value_column:\n                inputs = st.kiara.operation_inputs(  # type: ignore\n                    operation_id=\"create.table.from.file\",\n                    ignore_inputs=[\"file\"],\n                    profile=\"all\",\n                )\n\n        if not selected_value:\n            return None\n        inputs = dict(inputs)\n        inputs[\"file\"] = selected_value\n\n        job_desc = {\n            \"operation\": \"create.table.from.file\",\n            \"inputs\": inputs,\n            \"doc\": \"Create a table from the imported file.\",\n        }\n        return JobDesc(**job_desc)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/data_import/tabular/#kiara_plugin.streamlit.components.data_import.tabular.TableDataImportComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/tabular/#kiara_plugin.streamlit.components.data_import.tabular.TableDataImportComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/data_import/tabular/#kiara_plugin.streamlit.components.data_import.tabular.TableDataImportComponent.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/data_import/tabular.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"table\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/data_import/tabular/#kiara_plugin.streamlit.components.data_import.tabular.TableDataImportComponent.render_onboarding_page","title":"<code>render_onboarding_page(st: KiaraStreamlitAPI, options: DataImportOptions) -&gt; Union[None, JobDesc]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/data_import/tabular.py</code> <pre><code>def render_onboarding_page(\n    self, st: \"KiaraStreamlitAPI\", options: DataImportOptions\n) -&gt; Union[None, JobDesc]:\n\n    supported_file_types = [\"csv\"]\n\n    with st.expander(label=\"Select a source file\", expanded=True):\n        key = options.create_key(\"onboard\", \"table\", \"onboard\", \"file\")\n        selected_value = self.get_component(\"input_file\").render(\n            st=st,\n            key=key,\n            add_existing_file_option=True,\n            accepted_file_extensions=supported_file_types,\n            show_preview=False,\n        )\n\n    with st.expander(label=\"Create table\", expanded=True):\n        key_column, value_column = st.columns([1, 5])\n        with key_column:\n            st.write(\"File content\")\n        with value_column:\n            if selected_value:\n                st.kiara.preview_file(selected_value)\n            else:\n                st.write(\"*-- no file selected --*\")\n\n        key_column, value_column = st.columns([1, 5])\n        with key_column:\n            st.write(\"Options\")\n        with value_column:\n            inputs = st.kiara.operation_inputs(  # type: ignore\n                operation_id=\"create.table.from.file\",\n                ignore_inputs=[\"file\"],\n                profile=\"all\",\n            )\n\n    if not selected_value:\n        return None\n    inputs = dict(inputs)\n    inputs[\"file\"] = selected_value\n\n    job_desc = {\n        \"operation\": \"create.table.from.file\",\n        \"inputs\": inputs,\n        \"doc\": \"Create a table from the imported file.\",\n    }\n    return JobDesc(**job_desc)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/explore/__init__/","title":"explore","text":""},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/","title":"tabular","text":""},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.TableExplorer","title":"<code>TableExplorer</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Explore a 'table' value visually.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/explore/tabular.py</code> <pre><code>class TableExplorer(PreviewComponent):\n\"\"\"Explore a 'table' value visually.\"\"\"\n\n    _component_name = \"explore_table\"\n\n    _examples = [\n        {\"doc\": \"A table explorer component.\", \"args\": {\"value\": \"nodes_table\"}},\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"table\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n        _value = self.api.get_value(options.value)\n        table: KiaraTable = _value.data\n\n        df = table.to_polars_dataframe()  # noqa\n        pyg_html = pyg.walk(df, return_html=True)\n        components.html(pyg_html, height=1000, scrolling=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.TableExplorer-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.TableExplorer-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.TableExplorer.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/explore/tabular.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"table\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.TableExplorer.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/explore/tabular.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n    _value = self.api.get_value(options.value)\n    table: KiaraTable = _value.data\n\n    df = table.to_polars_dataframe()  # noqa\n    pyg_html = pyg.walk(df, return_html=True)\n    components.html(pyg_html, height=1000, scrolling=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.DatabasePreview","title":"<code>DatabasePreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'database'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/explore/tabular.py</code> <pre><code>class DatabasePreview(PreviewComponent):\n\"\"\"Preview a value of type 'database'.\"\"\"\n\n    _component_name = \"explore_database\"\n    _examples = [\n        {\"doc\": \"A database preview.\", \"args\": {\"value\": \"journals_database\"}},\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"database\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n        _value = self.api.get_value(options.value)\n        db: KiaraDatabase = _value.data\n\n        table_names = list(db.table_names)\n\n        selected_table = st.selectbox(\"Select table\", table_names)\n        if not selected_table:\n            return\n\n        table = db.get_table_as_pandas_df(selected_table)\n\n        pyg_html = pyg.walk(table, return_html=True)\n        components.html(pyg_html, height=1000, scrolling=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.DatabasePreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.DatabasePreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.DatabasePreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/explore/tabular.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"database\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.DatabasePreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/explore/tabular.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n    _value = self.api.get_value(options.value)\n    db: KiaraDatabase = _value.data\n\n    table_names = list(db.table_names)\n\n    selected_table = st.selectbox(\"Select table\", table_names)\n    if not selected_table:\n        return\n\n    table = db.get_table_as_pandas_df(selected_table)\n\n    pyg_html = pyg.walk(table, return_html=True)\n    components.html(pyg_html, height=1000, scrolling=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.TablesPreview","title":"<code>TablesPreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'tables'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/explore/tabular.py</code> <pre><code>class TablesPreview(PreviewComponent):\n\"\"\"Preview a value of type 'tables'.\"\"\"\n\n    _component_name = \"explore_tables\"\n    _examples = [\n        {\"doc\": \"A tables preview.\", \"args\": {\"value\": \"journals_tables\"}},\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"database\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n        _value = self.api.get_value(options.value)\n        tables: KiaraTables = _value.data\n\n        selected_table = st.selectbox(\"Select table\", tables.table_names)\n\n        if not selected_table:\n            return\n\n        table = tables.get_table(selected_table).to_polars_dataframe()\n\n        pyg_html = pyg.walk(table, return_html=True)\n        components.html(pyg_html, height=1000, scrolling=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.TablesPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.TablesPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.TablesPreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/explore/tabular.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"database\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/explore/tabular/#kiara_plugin.streamlit.components.explore.tabular.TablesPreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/explore/tabular.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n    _value = self.api.get_value(options.value)\n    tables: KiaraTables = _value.data\n\n    selected_table = st.selectbox(\"Select table\", tables.table_names)\n\n    if not selected_table:\n        return\n\n    table = tables.get_table(selected_table).to_polars_dataframe()\n\n    pyg_html = pyg.walk(table, return_html=True)\n    components.html(pyg_html, height=1000, scrolling=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/","title":"info","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.ITEM_TYPE","title":"<code>ITEM_TYPE = TypeVar('ITEM_TYPE', bound=ItemInfo)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.InfoCompOptions","title":"<code>InfoCompOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/__init__.py</code> <pre><code>class InfoCompOptions(ComponentOptions):\n    class Config:\n        arbitrary_types_allowed = True\n\n    columns: Union[\n        Tuple[int, int], Tuple[DeltaGenerator, DeltaGenerator], None\n    ] = Field(description=\"The column layout to use for the next step.\", default=(1, 4))\n    height: Union[int, None] = Field(\n        description=\"The height of the list component.\", default=400\n    )\n    items: Union[str, List[str], None] = Field(\n        description=\"The item(s) to show info for.\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.InfoCompOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.InfoCompOptions.columns","title":"<code>columns: Union[Tuple[int, int], Tuple[DeltaGenerator, DeltaGenerator], None] = Field(description='The column layout to use for the next step.', default=(1, 4))</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.InfoCompOptions.height","title":"<code>height: Union[int, None] = Field(description='The height of the list component.', default=400)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.InfoCompOptions.items","title":"<code>items: Union[str, List[str], None] = Field(description='The item(s) to show info for.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.InfoCompOptions-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.InfoCompOptions.Config","title":"<code>Config</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/__init__.py</code> <pre><code>class Config:\n    arbitrary_types_allowed = True\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.InfoCompOptions.Config-attributes","title":"Attributes","text":"<code>arbitrary_types_allowed = True</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.InfoCompOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.KiaraInfoComponent","title":"<code>KiaraInfoComponent</code>","text":"<p>         Bases: <code>KiaraComponent[InfoCompOptions]</code>, <code>Generic[ITEM_TYPE]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/__init__.py</code> <pre><code>class KiaraInfoComponent(KiaraComponent[InfoCompOptions], Generic[ITEM_TYPE]):\n\n    _options = InfoCompOptions\n\n    @classmethod\n    @abc.abstractmethod\n    def get_info_type(cls) -&gt; Type[ITEM_TYPE]:\n        pass\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: InfoCompOptions\n    ) -&gt; Union[ITEM_TYPE, None]:\n\n        items = options.items\n        if items is None:\n\n            _items = self.get_all_item_infos()\n\n            # method = f\"get_{self.get_info_type()}s_info\"\n            # if not hasattr(self.api, method):\n            #     method = f\"retrieve_{self.get_info_type()}s_info\"\n            #     if not hasattr(self.api, method):\n            #         raise Exception(f\"No method '{method}' found on kiara api object.\")\n            #\n            # _items = getattr(self.api, method)()\n            selected = self.render_all_info(\n                st=st,\n                key=options.create_key(\"all_infos\"),\n                items=_items,\n                options=options,\n            )\n            if selected:\n                return selected\n            else:\n                return None\n\n        elif isinstance(items, str):\n\n            # ignoring columns\n            # method = f\"get_{self.get_info_type()}_info\"\n            # if not hasattr(self.api, method):\n            #     method = f\"retrieve_{self.get_info_type()}_info\"\n            #     if not hasattr(self.api, method):\n            #         raise Exception(f\"No method '{method}' found on kiara api object.\")\n            #\n            # _item = getattr(self.api, method)(items)\n\n            _item = self.get_info_item(items)\n\n            self.render_info(\n                st=st,\n                key=options.create_key(f\"info_{items}\"),\n                item=_item,\n                options=options,\n            )\n            return _item\n        else:\n            raise NotImplementedError()\n\n    @abc.abstractmethod\n    def get_all_item_infos(self) -&gt; Mapping[str, ITEM_TYPE]:\n        pass\n\n    @abc.abstractmethod\n    def get_info_item(self, item_id: str) -&gt; ITEM_TYPE:\n        pass\n\n    @abc.abstractmethod\n    def render_info(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        key: str,\n        item: ITEM_TYPE,\n        options: InfoCompOptions,\n    ):\n        pass\n\n    def render_all_info(  # type: ignore\n        self,\n        st: \"KiaraStreamlitAPI\",\n        key: str,\n        items: Mapping[str, ITEM_TYPE],\n        options: InfoCompOptions,\n    ) -&gt; Union[None, ITEM_TYPE]:\n\n        if options.columns is None:\n            left, right = st.columns((1, 4))\n        elif isinstance(options.columns[0], int):\n            left, right = st.columns(options.columns)\n        else:\n            left, right = options.columns\n\n        info_type_name = self.__class__.get_info_type().__name__.lower()\n\n        _key = options.create_key(*items.keys(), key, info_type_name, \"list\")\n\n        selected_op = create_list_component(\n            st=left,\n            title=info_type_name.capitalize(),\n            items=list(items.keys()),\n            key=_key,\n            height=options.height,\n        )\n\n        if selected_op:\n            item = items[selected_op]\n\n            self.render_info(\n                st=right,  # type: ignore\n                key=f\"{key}__{info_type_name}_{selected_op}\",\n                item=item,\n                options=options,\n            )\n            return item\n        else:\n            return None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.KiaraInfoComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.KiaraInfoComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.KiaraInfoComponent.get_info_type","title":"<code>get_info_type() -&gt; Type[ITEM_TYPE]</code>  <code>classmethod</code> <code>abstractmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/__init__.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef get_info_type(cls) -&gt; Type[ITEM_TYPE]:\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.KiaraInfoComponent.get_all_item_infos","title":"<code>get_all_item_infos() -&gt; Mapping[str, ITEM_TYPE]</code>  <code>abstractmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/__init__.py</code> <pre><code>@abc.abstractmethod\ndef get_all_item_infos(self) -&gt; Mapping[str, ITEM_TYPE]:\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.KiaraInfoComponent.get_info_item","title":"<code>get_info_item(item_id: str) -&gt; ITEM_TYPE</code>  <code>abstractmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/__init__.py</code> <pre><code>@abc.abstractmethod\ndef get_info_item(self, item_id: str) -&gt; ITEM_TYPE:\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.KiaraInfoComponent.render_info","title":"<code>render_info(st: KiaraStreamlitAPI, key: str, item: ITEM_TYPE, options: InfoCompOptions)</code>  <code>abstractmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/__init__.py</code> <pre><code>@abc.abstractmethod\ndef render_info(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    key: str,\n    item: ITEM_TYPE,\n    options: InfoCompOptions,\n):\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info.KiaraInfoComponent.render_all_info","title":"<code>render_all_info(st: KiaraStreamlitAPI, key: str, items: Mapping[str, ITEM_TYPE], options: InfoCompOptions) -&gt; Union[None, ITEM_TYPE]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/__init__.py</code> <pre><code>def render_all_info(  # type: ignore\n    self,\n    st: \"KiaraStreamlitAPI\",\n    key: str,\n    items: Mapping[str, ITEM_TYPE],\n    options: InfoCompOptions,\n) -&gt; Union[None, ITEM_TYPE]:\n\n    if options.columns is None:\n        left, right = st.columns((1, 4))\n    elif isinstance(options.columns[0], int):\n        left, right = st.columns(options.columns)\n    else:\n        left, right = options.columns\n\n    info_type_name = self.__class__.get_info_type().__name__.lower()\n\n    _key = options.create_key(*items.keys(), key, info_type_name, \"list\")\n\n    selected_op = create_list_component(\n        st=left,\n        title=info_type_name.capitalize(),\n        items=list(items.keys()),\n        key=_key,\n        height=options.height,\n    )\n\n    if selected_op:\n        item = items[selected_op]\n\n        self.render_info(\n            st=right,  # type: ignore\n            key=f\"{key}__{info_type_name}_{selected_op}\",\n            item=item,\n            options=options,\n        )\n        return item\n    else:\n        return None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/__init__/#kiara_plugin.streamlit.components.info-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/api/","title":"api","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.KiaraOperationInfoComponent","title":"<code>KiaraOperationInfoComponent</code>","text":"<p>         Bases: <code>KiaraInfoComponent[OperationInfo]</code></p> <p>Displays information for all or a single operation.</p> <p>If you only provide a single item, documentation for this item will be shown. Otherwise, a list will be rendered on the left, and users can select one of the available items to get information for.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/api.py</code> <pre><code>class KiaraOperationInfoComponent(KiaraInfoComponent[OperationInfo]):\n\"\"\"Displays information for all or a single operation.\n\n    If you only provide a single item, documentation for this item will be shown. Otherwise, a list\n    will be rendered on the left, and users can select one of the available items to get information for.\n    \"\"\"\n\n    _component_name = \"operation_info\"\n    _examples: ClassVar = [\n        {\n            \"doc\": \"Show information for the 'create.table.from.file' operation.\",\n            \"args\": {\"items\": \"create.table.from.file\"},\n        },\n        {\"doc\": \"Show informations for all available operations.\", \"args\": {}},\n    ]\n\n    @classmethod\n    def get_info_type(cls) -&gt; Type[OperationInfo]:\n        return OperationInfo\n\n    def get_all_item_infos(self) -&gt; Mapping[str, OperationInfo]:\n\n        return self.api.retrieve_operations_info().item_infos\n\n    def get_info_item(self, item_id: str) -&gt; OperationInfo:\n\n        return self.api.retrieve_operation_info(operation=item_id)\n\n    def render_info(  # type: ignore\n        self, st: \"KiaraStreamlitAPI\", key: str, item: OperationInfo, options: InfoCompOptions  # type: ignore\n    ):\n        st.markdown(f\"#### Operation: `{item.operation.operation_id}`\")\n        st.markdown(item.documentation.full_doc)\n\n        comp = self.get_component(\"fields_info\")\n        st.markdown(\"##### Inputs\")\n        # opts = FieldsInfoOptions(\n        #     key=options.create_key(\"inputs\"), fields=item.operation.inputs_schema\n        # )\n        comp.render_func(st)(\n            key=options.create_key(\"inputs\"), fields=item.operation.inputs_schema\n        )\n\n        st.markdown(\"##### Outputs\")\n        # opts = FieldsInfoOptions(\n        #     key=options.create_key(\"outputs\"), fields=item.operation.outputs_schema\n        # )\n        comp.render_func(st)(\n            key=options.create_key(\"outputs\"), fields=item.operation.outputs_schema\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.KiaraOperationInfoComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.KiaraOperationInfoComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.KiaraOperationInfoComponent.get_info_type","title":"<code>get_info_type() -&gt; Type[OperationInfo]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/api.py</code> <pre><code>@classmethod\ndef get_info_type(cls) -&gt; Type[OperationInfo]:\n    return OperationInfo\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.KiaraOperationInfoComponent.get_all_item_infos","title":"<code>get_all_item_infos() -&gt; Mapping[str, OperationInfo]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/api.py</code> <pre><code>def get_all_item_infos(self) -&gt; Mapping[str, OperationInfo]:\n\n    return self.api.retrieve_operations_info().item_infos\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.KiaraOperationInfoComponent.get_info_item","title":"<code>get_info_item(item_id: str) -&gt; OperationInfo</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/api.py</code> <pre><code>def get_info_item(self, item_id: str) -&gt; OperationInfo:\n\n    return self.api.retrieve_operation_info(operation=item_id)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.KiaraOperationInfoComponent.render_info","title":"<code>render_info(st: KiaraStreamlitAPI, key: str, item: OperationInfo, options: InfoCompOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/api.py</code> <pre><code>def render_info(  # type: ignore\n    self, st: \"KiaraStreamlitAPI\", key: str, item: OperationInfo, options: InfoCompOptions  # type: ignore\n):\n    st.markdown(f\"#### Operation: `{item.operation.operation_id}`\")\n    st.markdown(item.documentation.full_doc)\n\n    comp = self.get_component(\"fields_info\")\n    st.markdown(\"##### Inputs\")\n    # opts = FieldsInfoOptions(\n    #     key=options.create_key(\"inputs\"), fields=item.operation.inputs_schema\n    # )\n    comp.render_func(st)(\n        key=options.create_key(\"inputs\"), fields=item.operation.inputs_schema\n    )\n\n    st.markdown(\"##### Outputs\")\n    # opts = FieldsInfoOptions(\n    #     key=options.create_key(\"outputs\"), fields=item.operation.outputs_schema\n    # )\n    comp.render_func(st)(\n        key=options.create_key(\"outputs\"), fields=item.operation.outputs_schema\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.OperationDocsOptions","title":"<code>OperationDocsOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/api.py</code> <pre><code>class OperationDocsOptions(ComponentOptions):\n    height: Union[int, None] = Field(\n        description=\"The height of the list component.\", default=400\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.OperationDocsOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.OperationDocsOptions.height","title":"<code>height: Union[int, None] = Field(description='The height of the list component.', default=400)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.OperationDocsOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.OperationDocs","title":"<code>OperationDocs</code>","text":"<p>         Bases: <code>KiaraComponent</code></p> <p>Displays documentation for all available operations.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/api.py</code> <pre><code>class OperationDocs(KiaraComponent):\n\"\"\"Displays documentation for all available operations.\"\"\"\n\n    _component_name = \"operation_documentation\"\n    _options = OperationDocsOptions\n\n    _examples: ClassVar = [\n        {\n            \"doc\": \"Display operations doc.\",\n        },\n    ]\n\n    def _render(self, st: \"KiaraStreamlitAPI\", options: OperationDocsOptions):\n\n        left, right = st.columns([1, 3])\n\n        tab_names = [\"Overview\", \"Demo\"]\n        overview, demo = right.tabs(tab_names)\n\n        op_info = self.get_component(\"operation_info\")\n        selected: Union[OperationInfo, None] = op_info.render_func(st)(\n            key=options.create_key(\"ops_info\"),\n            columns=(left, overview),\n            height=options.height,\n        )\n\n        if not selected:\n            demo.markdown(\"No operation selected.\")\n        else:\n            code = \"\"\"import streamlit as st\nimport kiara_plugin.streamlit as kst\nkst.init()\n\nresult = st.kiara.process_operation(\"{}\")\n\"\"\".format(\n                selected.operation.operation_id\n            )\n\n            demo.code(code)\n            comp = self.get_component(\"operation_process_panel\")\n            comp.render_func(demo)(\n                key=options.create_key(\"demo\"),\n                operation_id=selected.operation.operation_id,\n            )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.OperationDocs-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/api/#kiara_plugin.streamlit.components.info.api.OperationDocs-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/components/","title":"components","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/components/#kiara_plugin.streamlit.components.info.components-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/components/#kiara_plugin.streamlit.components.info.components.KiaraComponentInfoComponent","title":"<code>KiaraComponentInfoComponent</code>","text":"<p>         Bases: <code>KiaraInfoComponent[ComponentInfo]</code></p> <p>Display information about a kiara streamlit component.</p> <p>This is used to create what you see here.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/components.py</code> <pre><code>class KiaraComponentInfoComponent(KiaraInfoComponent[ComponentInfo]):\n\"\"\"Display information about a kiara streamlit component.\n\n    This is used to create what you see here.\n    \"\"\"\n\n    _component_name = \"component_info\"\n\n    _examples = [\n        {\n            \"doc\": \"Display component info for the 'input_boolean' component.\",\n            \"args\": {\"items\": \"input_boolean\"},\n        },\n    ]\n\n    @classmethod\n    def get_info_type(cls) -&gt; Type[ComponentInfo]:\n        return ComponentInfo\n\n    def get_all_item_infos(self) -&gt; Mapping[str, ComponentInfo]:\n\n        components = self.kiara_streamlit.components\n\n        infos = ComponentsInfo.create_from_instances(\n            title=\"All components\",\n            kiara=self.kiara_streamlit.api.context,\n            instances=components,\n        )\n\n        # filter out workflow components, those are not ready yet\n        items = {}\n        for name, info in infos.item_infos.items():\n            if \"workflows\" in info.context.tags:\n                continue\n            else:\n                items[name] = info\n\n        return items\n\n    def get_info_item(self, item_id: str) -&gt; ComponentInfo:\n\n        comp = self.kiara_streamlit.get_component(item_id)\n        return ComponentInfo.create_from_instance(\n            kiara=self.kiara_streamlit.api.context, instance=comp\n        )\n\n    def render_info(  # type: ignore\n        self, st: \"KiaraStreamlitAPI\", key: str, item: ComponentInfo, options: InfoCompOptions  # type: ignore\n    ):\n        st.markdown(f\"#### Component: `{item.type_name}`\")\n\n        if item.examples:\n            details_tab, examples_tab = st.tabs([\"Details\", \"Examples\"])\n        else:\n            tabs = st.tabs([\"Details\"])  # type: ignore\n            # no idea, bug in streamlit?\n            details_tab = tabs[0]\n\n        with details_tab:\n            details_tab.markdown(item.documentation.full_doc)\n\n            expander = details_tab.expander(\"Component details\", expanded=False)\n\n            pkg_name = item.context.labels.get(\"package\", \"-- n/a --\")\n            table_md = f\"\"\"\n            | attribute | value |\n            | --------- | ----- |\n            | Python class      | `{item.python_class.full_name}` |\n            | Plugin            | `{pkg_name}` |\n            \"\"\"\n            expander.markdown(table_md)\n            expander.write(\"---\")\n            expander.write(\"##### Source code\")\n            expander.code(item.python_class.get_source_code())\n\n            # comp = self.get_component(\"fields_info\")\n            details_tab.markdown(\"##### Arguments\")\n            arg_table: Dict[str, List[Any]] = {\n                \"field\": [],\n                \"type\": [],\n                \"required\": [],\n                \"default\": [],\n                \"description\": [],\n            }\n\n            is_type_specific_select_comp = (\n                item.python_class.full_name\n                == \"kiara_plugin.streamlit.components.input.DefaultInputComponent\"\n                and item.type_name != \"select_value\"\n            )\n\n            for arg_name in item.arguments.keys():\n\n                # better hide this argument, otherwise it might be confusing\n                if is_type_specific_select_comp and arg_name in [\n                    \"value_schema\",\n                    \"data_type\",\n                ]:\n                    continue\n\n                arg = item.arguments[arg_name]\n                arg_table[\"field\"].append(arg_name)\n                arg_table[\"type\"].append(arg.python_type_string)\n                arg_table[\"required\"].append(\"yes\" if arg.required else \"no\")\n                arg_table[\"default\"].append(\n                    \"\" if arg.default is None else str(arg.default)\n                )\n                arg_table[\"description\"].append(arg.description)\n\n            hide_table_row_index = \"\"\"\n                        &lt;style&gt;\n                        thead tr th:first-child {display:none}\n                        tbody th {display:none}\n                        &lt;/style&gt;\n                        \"\"\"\n            # Inject CSS with Markdown\n            details_tab.markdown(hide_table_row_index, unsafe_allow_html=True)\n            details_tab.table(arg_table)\n\n            details_tab.markdown(\"##### Usage\")\n            code = \"\"\"from kiara_plugin.streamlit import kiara_streamlit_init\nst = kiara_streamlit_init\n\nresult = st.kiara.{}({})\n            \"\"\".format(\n                item.type_name, \"&lt;options&gt;\"\n            )\n            details_tab.code(code)\n\n        if item.examples:\n            with examples_tab:\n                examples_tab.markdown(\"##### Examples\")\n                comp = self.get_component(item.type_name)\n                for idx, example in enumerate(item.examples, start=1):\n                    doc = example.get(\"doc\", None)\n                    if len(item.examples) &gt; 1:\n                        idx_str = f\" #{idx}\"\n                    else:\n                        idx_str = \"\"\n                    if doc:\n                        d = DocumentationMetadataModel.create(doc)\n                        title = f\"**Example{idx_str}**: *{d.description}*\"\n                        txt = d.doc\n                    else:\n                        title = f\"**Example{idx_str}** *#{idx}*\"\n                        txt = None\n\n                    with examples_tab.expander(title, expanded=idx == 1):\n\n                        if txt:\n                            self._st.markdown(txt)\n\n                        _options = []\n                        example_args = example.get(\"args\", {})\n                        for arg_name in item.arguments.keys():\n                            if arg_name in example_args.keys():\n                                v = example_args[arg_name]\n                                if isinstance(v, str):\n                                    v = f'\"{v}\"'\n                                else:\n                                    v = str(v)\n                                _options.append(f\"{arg_name}={v}\")\n\n                        arg_str = \", \".join(_options)\n\n                        code = \"\"\"from kiara_plugin.streamlit import kiara_streamlit_init\nst = kiara_streamlit_init\n\nresult = st.kiara.{}({})\n            \"\"\".format(\n                            item.type_name, arg_str\n                        )\n                        self._st.code(code)\n\n                        with self._st.expander(\n                            \"***Rendered component***\", expanded=True\n                        ):\n\n                            try:\n                                result = comp.render_func(self._st)(\n                                    **example.get(\"args\", {})\n                                )\n                            except Exception as e:\n                                self._st.error(e)\n                                result = None\n                            if result:\n                                title = \"**Component result (not rendered)**\"\n                                if isinstance(result, Value):\n                                    with self._st.expander(title):\n                                        self._st.markdown(\n                                            \"Result type: [`Value`](https://dharpa.org/kiara/latest/reference/kiara/models/values/value/#kiara.models.values.value.Value)\"\n                                        )\n                                        self.kiara_streamlit.preview(\n                                            result, key=f\"{key}_example_result_{idx}\"\n                                        )\n                                elif isinstance(result, ValueMap):\n                                    with self._st.expander(title):\n                                        self._st.markdown(\n                                            \"Result type: [`ValueMap`](https://dharpa.org/kiara/latest/reference/kiara/models/values/value/#kiara.models.values.value.ValueMap)\"\n                                        )\n                                        self.kiara_streamlit.value_map_preview(\n                                            value_map=dict(result),\n                                            key=f\"{key}_example_result_map_{idx}\",\n                                        )\n                                else:\n                                    with self._st.expander(title):\n                                        self._st.markdown(\n                                            f\"Result type: Python instace of type ``{type(result)}`'\"\n                                        )\n                                        self._st.write(result)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/components/#kiara_plugin.streamlit.components.info.components.KiaraComponentInfoComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/components/#kiara_plugin.streamlit.components.info.components.KiaraComponentInfoComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/info/components/#kiara_plugin.streamlit.components.info.components.KiaraComponentInfoComponent.get_info_type","title":"<code>get_info_type() -&gt; Type[ComponentInfo]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/components.py</code> <pre><code>@classmethod\ndef get_info_type(cls) -&gt; Type[ComponentInfo]:\n    return ComponentInfo\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/components/#kiara_plugin.streamlit.components.info.components.KiaraComponentInfoComponent.get_all_item_infos","title":"<code>get_all_item_infos() -&gt; Mapping[str, ComponentInfo]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/components.py</code> <pre><code>def get_all_item_infos(self) -&gt; Mapping[str, ComponentInfo]:\n\n    components = self.kiara_streamlit.components\n\n    infos = ComponentsInfo.create_from_instances(\n        title=\"All components\",\n        kiara=self.kiara_streamlit.api.context,\n        instances=components,\n    )\n\n    # filter out workflow components, those are not ready yet\n    items = {}\n    for name, info in infos.item_infos.items():\n        if \"workflows\" in info.context.tags:\n            continue\n        else:\n            items[name] = info\n\n    return items\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/components/#kiara_plugin.streamlit.components.info.components.KiaraComponentInfoComponent.get_info_item","title":"<code>get_info_item(item_id: str) -&gt; ComponentInfo</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/components.py</code> <pre><code>def get_info_item(self, item_id: str) -&gt; ComponentInfo:\n\n    comp = self.kiara_streamlit.get_component(item_id)\n    return ComponentInfo.create_from_instance(\n        kiara=self.kiara_streamlit.api.context, instance=comp\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/info/components/#kiara_plugin.streamlit.components.info.components.KiaraComponentInfoComponent.render_info","title":"<code>render_info(st: KiaraStreamlitAPI, key: str, item: ComponentInfo, options: InfoCompOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/info/components.py</code> <pre><code>    def render_info(  # type: ignore\n        self, st: \"KiaraStreamlitAPI\", key: str, item: ComponentInfo, options: InfoCompOptions  # type: ignore\n    ):\n        st.markdown(f\"#### Component: `{item.type_name}`\")\n\n        if item.examples:\n            details_tab, examples_tab = st.tabs([\"Details\", \"Examples\"])\n        else:\n            tabs = st.tabs([\"Details\"])  # type: ignore\n            # no idea, bug in streamlit?\n            details_tab = tabs[0]\n\n        with details_tab:\n            details_tab.markdown(item.documentation.full_doc)\n\n            expander = details_tab.expander(\"Component details\", expanded=False)\n\n            pkg_name = item.context.labels.get(\"package\", \"-- n/a --\")\n            table_md = f\"\"\"\n            | attribute | value |\n            | --------- | ----- |\n            | Python class      | `{item.python_class.full_name}` |\n            | Plugin            | `{pkg_name}` |\n            \"\"\"\n            expander.markdown(table_md)\n            expander.write(\"---\")\n            expander.write(\"##### Source code\")\n            expander.code(item.python_class.get_source_code())\n\n            # comp = self.get_component(\"fields_info\")\n            details_tab.markdown(\"##### Arguments\")\n            arg_table: Dict[str, List[Any]] = {\n                \"field\": [],\n                \"type\": [],\n                \"required\": [],\n                \"default\": [],\n                \"description\": [],\n            }\n\n            is_type_specific_select_comp = (\n                item.python_class.full_name\n                == \"kiara_plugin.streamlit.components.input.DefaultInputComponent\"\n                and item.type_name != \"select_value\"\n            )\n\n            for arg_name in item.arguments.keys():\n\n                # better hide this argument, otherwise it might be confusing\n                if is_type_specific_select_comp and arg_name in [\n                    \"value_schema\",\n                    \"data_type\",\n                ]:\n                    continue\n\n                arg = item.arguments[arg_name]\n                arg_table[\"field\"].append(arg_name)\n                arg_table[\"type\"].append(arg.python_type_string)\n                arg_table[\"required\"].append(\"yes\" if arg.required else \"no\")\n                arg_table[\"default\"].append(\n                    \"\" if arg.default is None else str(arg.default)\n                )\n                arg_table[\"description\"].append(arg.description)\n\n            hide_table_row_index = \"\"\"\n                        &lt;style&gt;\n                        thead tr th:first-child {display:none}\n                        tbody th {display:none}\n                        &lt;/style&gt;\n                        \"\"\"\n            # Inject CSS with Markdown\n            details_tab.markdown(hide_table_row_index, unsafe_allow_html=True)\n            details_tab.table(arg_table)\n\n            details_tab.markdown(\"##### Usage\")\n            code = \"\"\"from kiara_plugin.streamlit import kiara_streamlit_init\nst = kiara_streamlit_init\n\nresult = st.kiara.{}({})\n            \"\"\".format(\n                item.type_name, \"&lt;options&gt;\"\n            )\n            details_tab.code(code)\n\n        if item.examples:\n            with examples_tab:\n                examples_tab.markdown(\"##### Examples\")\n                comp = self.get_component(item.type_name)\n                for idx, example in enumerate(item.examples, start=1):\n                    doc = example.get(\"doc\", None)\n                    if len(item.examples) &gt; 1:\n                        idx_str = f\" #{idx}\"\n                    else:\n                        idx_str = \"\"\n                    if doc:\n                        d = DocumentationMetadataModel.create(doc)\n                        title = f\"**Example{idx_str}**: *{d.description}*\"\n                        txt = d.doc\n                    else:\n                        title = f\"**Example{idx_str}** *#{idx}*\"\n                        txt = None\n\n                    with examples_tab.expander(title, expanded=idx == 1):\n\n                        if txt:\n                            self._st.markdown(txt)\n\n                        _options = []\n                        example_args = example.get(\"args\", {})\n                        for arg_name in item.arguments.keys():\n                            if arg_name in example_args.keys():\n                                v = example_args[arg_name]\n                                if isinstance(v, str):\n                                    v = f'\"{v}\"'\n                                else:\n                                    v = str(v)\n                                _options.append(f\"{arg_name}={v}\")\n\n                        arg_str = \", \".join(_options)\n\n                        code = \"\"\"from kiara_plugin.streamlit import kiara_streamlit_init\nst = kiara_streamlit_init\n\nresult = st.kiara.{}({})\n            \"\"\".format(\n                            item.type_name, arg_str\n                        )\n                        self._st.code(code)\n\n                        with self._st.expander(\n                            \"***Rendered component***\", expanded=True\n                        ):\n\n                            try:\n                                result = comp.render_func(self._st)(\n                                    **example.get(\"args\", {})\n                                )\n                            except Exception as e:\n                                self._st.error(e)\n                                result = None\n                            if result:\n                                title = \"**Component result (not rendered)**\"\n                                if isinstance(result, Value):\n                                    with self._st.expander(title):\n                                        self._st.markdown(\n                                            \"Result type: [`Value`](https://dharpa.org/kiara/latest/reference/kiara/models/values/value/#kiara.models.values.value.Value)\"\n                                        )\n                                        self.kiara_streamlit.preview(\n                                            result, key=f\"{key}_example_result_{idx}\"\n                                        )\n                                elif isinstance(result, ValueMap):\n                                    with self._st.expander(title):\n                                        self._st.markdown(\n                                            \"Result type: [`ValueMap`](https://dharpa.org/kiara/latest/reference/kiara/models/values/value/#kiara.models.values.value.ValueMap)\"\n                                        )\n                                        self.kiara_streamlit.value_map_preview(\n                                            value_map=dict(result),\n                                            key=f\"{key}_example_result_map_{idx}\",\n                                        )\n                                else:\n                                    with self._st.expander(title):\n                                        self._st.markdown(\n                                            f\"Result type: Python instace of type ``{type(result)}`'\"\n                                        )\n                                        self._st.write(result)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/","title":"input","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.INPUT_OPTIONS_TYPE","title":"<code>INPUT_OPTIONS_TYPE = TypeVar('INPUT_OPTIONS_TYPE', bound=InputOptions)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputOptions","title":"<code>InputOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>class InputOptions(ComponentOptions):\n\n    display_style: str = Field(\n        description=\"The display style to use for this input field.\", default=\"default\"\n    )\n    smart_label: bool = Field(\n        description=\"Whether to try to shorten the label.\", default=True\n    )\n    help: Union[str, None] = Field(\n        description=\"The help to display for this input field.\",\n        default=DEFAULT_NO_DESC_VALUE,\n    )\n    label: str = Field(\n        description=\"The label to use for the input field.\", default=NO_LABEL_MARKER\n    )\n    value_schema: Union[None, ValueSchema] = Field(\n        description=\"The schema for the value in question.\"\n    )\n\n    def get_default(self) -&gt; Any:\n        if self.value_schema is None:\n            return None\n        return copy.deepcopy(self.value_schema.default)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputOptions.display_style","title":"<code>display_style: str = Field(description='The display style to use for this input field.', default='default')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputOptions.smart_label","title":"<code>smart_label: bool = Field(description='Whether to try to shorten the label.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputOptions.help","title":"<code>help: Union[str, None] = Field(description='The help to display for this input field.', default=DEFAULT_NO_DESC_VALUE)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputOptions.label","title":"<code>label: str = Field(description='The label to use for the input field.', default=NO_LABEL_MARKER)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputOptions.value_schema","title":"<code>value_schema: Union[None, ValueSchema] = Field(description='The schema for the value in question.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputOptions.get_default","title":"<code>get_default() -&gt; Any</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>def get_default(self) -&gt; Any:\n    if self.value_schema is None:\n        return None\n    return copy.deepcopy(self.value_schema.default)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputComponent","title":"<code>InputComponent</code>","text":"<p>         Bases: <code>KiaraComponent[INPUT_OPTIONS_TYPE]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>class InputComponent(KiaraComponent[INPUT_OPTIONS_TYPE]):\n\n    _options = InputOptions  # type: ignore\n\n    @classmethod\n    @abc.abstractmethod\n    def get_data_type(cls) -&gt; Union[str, None]:\n\"\"\"Return the 'kiara' data type name this input component can handle.\n\n        This is used to dynamically register and auto-generate components on the\n        root 'KiaraStreamlit' instance. If 'None' is returned, the component will\n        be ignored in the registration process but can still be used manually.\n        \"\"\"\n\n    @classmethod\n    def get_input_profile(cls) -&gt; str:\n        return \"default\"\n\n    @classmethod\n    def get_default_label(cls) -&gt; str:\n        if cls.get_data_type() in [\"any\", None]:\n            return \"Select value\"\n        else:\n            return f\"Select {cls.get_data_type()} value\"\n\n    @abc.abstractmethod\n    def render_input_field(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: INPUT_OPTIONS_TYPE,\n    ) -&gt; Union[ValueLink, None, str, uuid.UUID]:\n        pass\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: INPUT_OPTIONS_TYPE\n    ) -&gt; Union[Value, None]:\n\n        if options.label == NO_LABEL_MARKER:\n            options.label = self.get_default_label()\n\n        value = self.render_input_field(st, options=options)\n        if not value:\n            return None\n        else:\n            return self.api.get_value(value)  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputComponent.get_data_type","title":"<code>get_data_type() -&gt; Union[str, None]</code>  <code>classmethod</code> <code>abstractmethod</code>","text":"<p>Return the 'kiara' data type name this input component can handle.</p> <p>This is used to dynamically register and auto-generate components on the root 'KiaraStreamlit' instance. If 'None' is returned, the component will be ignored in the registration process but can still be used manually.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef get_data_type(cls) -&gt; Union[str, None]:\n\"\"\"Return the 'kiara' data type name this input component can handle.\n\n    This is used to dynamically register and auto-generate components on the\n    root 'KiaraStreamlit' instance. If 'None' is returned, the component will\n    be ignored in the registration process but can still be used manually.\n    \"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputComponent.get_input_profile","title":"<code>get_input_profile() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>@classmethod\ndef get_input_profile(cls) -&gt; str:\n    return \"default\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputComponent.get_default_label","title":"<code>get_default_label() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>@classmethod\ndef get_default_label(cls) -&gt; str:\n    if cls.get_data_type() in [\"any\", None]:\n        return \"Select value\"\n    else:\n        return f\"Select {cls.get_data_type()} value\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.InputComponent.render_input_field","title":"<code>render_input_field(st: KiaraStreamlitAPI, options: INPUT_OPTIONS_TYPE) -&gt; Union[ValueLink, None, str, uuid.UUID]</code>  <code>abstractmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>@abc.abstractmethod\ndef render_input_field(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: INPUT_OPTIONS_TYPE,\n) -&gt; Union[ValueLink, None, str, uuid.UUID]:\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputOptions","title":"<code>DefaultInputOptions</code>","text":"<p>         Bases: <code>InputOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>class DefaultInputOptions(InputOptions):\n\n    add_no_value_option: bool = Field(\n        description=\"Add an option so the user can chose to select no value. This is overwritten by a potential value_schema (if supplied).\",\n        default=False,\n    )\n    value_has_alias: bool = Field(\n        description=\"Whether the values to present need to have a registered alias.\",\n        default=True,\n    )\n    show_preview: Union[bool, None] = Field(\n        description=\"Whether to show a preview of the value. If not provided, a selectbox will be rendered so the user can choose.\",\n        default=None,\n    )\n    display_value_type: Union[bool, None] = Field(\n        description=\"Whether to display the data type in the list. By default it hides it for a single 'data type' option, and shows for multiple.\",\n        default=None,\n    )\n    data_type: Union[str, List[str], None] = Field(\n        description=\"The data type(s) to display as selection.\", default=None\n    )\n    add_import_widget: Union[str, None, bool] = Field(\n        description=\"The name of a widget that can be used to create a new value. If specified, a 'Create' button is added that calls that widget. If 'True', the widget will be chosen automatically, if a string, the component with that name will be used.\",\n        default=None,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputOptions.add_no_value_option","title":"<code>add_no_value_option: bool = Field(description='Add an option so the user can chose to select no value. This is overwritten by a potential value_schema (if supplied).', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputOptions.value_has_alias","title":"<code>value_has_alias: bool = Field(description='Whether the values to present need to have a registered alias.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputOptions.show_preview","title":"<code>show_preview: Union[bool, None] = Field(description='Whether to show a preview of the value. If not provided, a selectbox will be rendered so the user can choose.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputOptions.display_value_type","title":"<code>display_value_type: Union[bool, None] = Field(description=\"Whether to display the data type in the list. By default it hides it for a single 'data type' option, and shows for multiple.\", default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputOptions.data_type","title":"<code>data_type: Union[str, List[str], None] = Field(description='The data type(s) to display as selection.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputOptions.add_import_widget","title":"<code>add_import_widget: Union[str, None, bool] = Field(description=\"The name of a widget that can be used to create a new value. If specified, a 'Create' button is added that calls that widget. If 'True', the widget will be chosen automatically, if a string, the component with that name will be used.\", default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.ImportResult","title":"<code>ImportResult</code>","text":"<p>         Bases: <code>ModalResult</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>class ImportResult(ModalResult):\n    value: Union[Value, None] = Field(\n        description=\"The value that was imported.\", default=None\n    )\n    alias: Union[str, None] = Field(\n        description=\"The alias that was used to store the value.\", default=None\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.ImportResult-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.ImportResult.value","title":"<code>value: Union[Value, None] = Field(description='The value that was imported.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.ImportResult.alias","title":"<code>alias: Union[str, None] = Field(description='The alias that was used to store the value.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputComponent","title":"<code>DefaultInputComponent</code>","text":"<p>         Bases: <code>InputComponent</code></p> <p>Render a selectbox with all available values (for a specific type, if applicable).</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>class DefaultInputComponent(InputComponent):\n\"\"\"Render a selectbox with all available values (for a specific type, if applicable).\"\"\"\n\n    _component_name = \"select_value\"\n    _options = DefaultInputOptions  # type: ignore\n\n    def __init__(\n        self,\n        kiara_streamlit: \"KiaraStreamlit\",\n        component_name: str,\n        data_types: Union[str, Iterable[str], None] = None,\n        doc: Any = None,\n    ):\n\n        if data_types:\n            if isinstance(data_types, str):\n                data_types = [data_types]\n\n        self._data_types: Union[None, Iterable[str]] = data_types\n        super().__init__(\n            kiara_streamlit=kiara_streamlit, component_name=component_name, doc=doc\n        )\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"any\"\n\n    def render_input_field(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: DefaultInputOptions,\n    ) -&gt; Union[ValueLink, None, str, uuid.UUID]:\n\n        if options.smart_label:\n            options.label = options.label.split(\"__\")[-1]\n\n        if options.data_type is None:\n            data_types: List[str] = []\n        elif isinstance(options.data_type, str):\n            data_types = [options.data_type]\n        else:\n            data_types = options.data_type\n\n        if self._data_types and data_types:\n            raise Exception(\"'data_types' argument not allowed for this component.\")\n\n        if not data_types:\n            if self._data_types is None:\n                data_types = []\n            else:\n                data_types = list(self._data_types)\n\n        if not data_types:\n            data_types.append(self.get_data_type())\n\n        _key = options.create_key(*sorted(data_types))\n\n        if len(data_types) == 1:\n            # here we use the instance of the input component for the data type that was auto generated, if available.\n            # it will nonetheless continue below, just a differently configured instance (unless there is a custom input widget for that data type)\n            dt = data_types[0]\n            inp_comp = self.kiara_streamlit.get_input_component(dt)\n            if inp_comp and inp_comp.__class__ != self.__class__:\n                copy_options = options.copy()\n                _key_selectbox = f\"{_key}_value_select_{_key}\"\n                copy_options.key = _key_selectbox\n                return inp_comp.render_input_field(st, options=copy_options)\n\n        if not options.add_import_widget:\n            return self._render_default_selectbox(st, options, data_types=data_types)\n        else:\n\n            if len(data_types) &gt; 1:\n                raise Exception(\n                    \"Cannot use 'add_create_widget' when multiple data types are specified.\"\n                )\n\n            data_type = data_types[0]\n\n            columns = st.columns([5, 1])\n            result, select_box_key = self._render_default_selectbox(st=columns[0], options=options, data_types=data_types, label=f\"Select existing {data_type} value\", also_return_key=True)  # type: ignore\n            columns[1].header(\"\")\n\n            import_comp = st.kiara.get_import_component(data_type)\n            if import_comp is None:\n                help = f\"No import component available for data type '{data_type}'. Contact the developers and ask them to implement one.\"\n            else:\n                help = f\"Import (or create) a new value of type '{data_type}'.\"\n            create_widget = columns[1].button(\n                f\"Import {data_type}\",\n                disabled=not import_comp,\n                help=help,\n                key=f\"{_key}_import_button\",\n            )\n            if create_widget:\n                modal_result = ImportResult()\n                modal_config = ModalConfig(store_alias_key=select_box_key)\n                modal_request = ModalRequest(\n                    modal=import_comp, config=modal_config, result=modal_result\n                )\n                st.session_state[WANTS_MODAL_MARKER_KEY].append(modal_request)  # type: ignore\n                st.experimental_rerun()\n\n            return result\n\n    def _render_default_selectbox(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: DefaultInputOptions,\n        data_types: List[str],\n        label: Union[str, None] = None,\n        also_return_key: bool = False,\n    ):\n\n        has_alias = options.value_has_alias\n        if has_alias:\n            available_values = self.api.list_aliases(data_types=list(data_types))\n        else:\n            available_values = self.api.list_values(\n                data_types=list(data_types), has_alias=False\n            )\n\n        default = None\n\n        if options.value_schema:\n            if options.value_schema.default not in [\n                SpecialValue.NO_VALUE,\n                SpecialValue.NOT_SET,\n                None,\n            ]:\n                default = options.value_schema.default\n            optional = options.value_schema.optional\n        else:\n            optional = options.add_no_value_option\n\n        display_type = options.display_value_type\n        if display_type is None and len(data_types) != 1:\n            display_type = True\n        elif display_type is None:\n            display_type = False\n\n        format_func: Callable = str\n        if display_type:\n\n            def format_func(v: Any) -&gt; str:\n                if v == NO_VALUE_MARKER:\n                    return v\n                return f\"{v} ({available_values[v].data_type_name})\"\n\n        if optional:\n            _item_options = [NO_VALUE_MARKER, *available_values.keys()]\n            if not default:\n                default = NO_VALUE_MARKER\n        else:\n            _item_options = list(available_values.keys())\n\n        callback, _select_key = self._create_session_store_callback(\n            options, \"input\", \"value\", \"select\", default=default\n        )\n\n        if label is None:\n            label = options.label\n\n        result = st.selectbox(\n            label=label,\n            options=_item_options,\n            key=_select_key,\n            format_func=format_func,\n            on_change=callback,\n            help=options.help,\n        )\n        if result == NO_VALUE_MARKER:\n            result = None\n\n        if options.show_preview is None:\n            if result:\n                _key = options.create_key(\"preview\", result)\n            else:\n                _key = options.create_key(\"preview\", \"no_value\")\n            if result is None:\n                disabled = True\n            else:\n                disabled = False\n            show_preview = st.checkbox(\n                \"Preview\", key=f\"preview_{_select_key}\", disabled=disabled\n            )\n            if show_preview:\n                comp = self.get_component(\"preview\")\n                if hasattr(st, \"__enter__\"):\n                    with st:\n                        comp.render_func(st)(key=_key, value=result)\n                else:\n                    comp.render_func(st)(key=_key, value=result)\n        elif options.show_preview is True:\n            # TODO: support preview profiles\n            if result is not None:\n                _key = options.create_key(\"preview\", result)\n                comp = self.get_component(\"preview\")\n                if hasattr(st, \"__enter__\"):\n                    with st:\n                        comp.render_func(st)(key=_key, value=result)\n                else:\n                    comp.render_func(st)(key=_key, value=result)\n\n        if not also_return_key:\n            return result\n        else:\n            return result, _select_key\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputComponent.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"any\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.DefaultInputComponent.render_input_field","title":"<code>render_input_field(st: KiaraStreamlitAPI, options: DefaultInputOptions) -&gt; Union[ValueLink, None, str, uuid.UUID]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>def render_input_field(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: DefaultInputOptions,\n) -&gt; Union[ValueLink, None, str, uuid.UUID]:\n\n    if options.smart_label:\n        options.label = options.label.split(\"__\")[-1]\n\n    if options.data_type is None:\n        data_types: List[str] = []\n    elif isinstance(options.data_type, str):\n        data_types = [options.data_type]\n    else:\n        data_types = options.data_type\n\n    if self._data_types and data_types:\n        raise Exception(\"'data_types' argument not allowed for this component.\")\n\n    if not data_types:\n        if self._data_types is None:\n            data_types = []\n        else:\n            data_types = list(self._data_types)\n\n    if not data_types:\n        data_types.append(self.get_data_type())\n\n    _key = options.create_key(*sorted(data_types))\n\n    if len(data_types) == 1:\n        # here we use the instance of the input component for the data type that was auto generated, if available.\n        # it will nonetheless continue below, just a differently configured instance (unless there is a custom input widget for that data type)\n        dt = data_types[0]\n        inp_comp = self.kiara_streamlit.get_input_component(dt)\n        if inp_comp and inp_comp.__class__ != self.__class__:\n            copy_options = options.copy()\n            _key_selectbox = f\"{_key}_value_select_{_key}\"\n            copy_options.key = _key_selectbox\n            return inp_comp.render_input_field(st, options=copy_options)\n\n    if not options.add_import_widget:\n        return self._render_default_selectbox(st, options, data_types=data_types)\n    else:\n\n        if len(data_types) &gt; 1:\n            raise Exception(\n                \"Cannot use 'add_create_widget' when multiple data types are specified.\"\n            )\n\n        data_type = data_types[0]\n\n        columns = st.columns([5, 1])\n        result, select_box_key = self._render_default_selectbox(st=columns[0], options=options, data_types=data_types, label=f\"Select existing {data_type} value\", also_return_key=True)  # type: ignore\n        columns[1].header(\"\")\n\n        import_comp = st.kiara.get_import_component(data_type)\n        if import_comp is None:\n            help = f\"No import component available for data type '{data_type}'. Contact the developers and ask them to implement one.\"\n        else:\n            help = f\"Import (or create) a new value of type '{data_type}'.\"\n        create_widget = columns[1].button(\n            f\"Import {data_type}\",\n            disabled=not import_comp,\n            help=help,\n            key=f\"{_key}_import_button\",\n        )\n        if create_widget:\n            modal_result = ImportResult()\n            modal_config = ModalConfig(store_alias_key=select_box_key)\n            modal_request = ModalRequest(\n                modal=import_comp, config=modal_config, result=modal_result\n            )\n            st.session_state[WANTS_MODAL_MARKER_KEY].append(modal_request)  # type: ignore\n            st.experimental_rerun()\n\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueInputOptions","title":"<code>PickValueInputOptions</code>","text":"<p>         Bases: <code>InputOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>class PickValueInputOptions(InputOptions):\n\n    display_value_type: Union[bool, None] = Field(\n        description=\"Whether to display the data type in the list. By default it hides it for a single 'data type' option, and shows for multiple.\",\n        default=None,\n    )\n    show_preview: Union[None, bool] = Field(\n        description=\"Whether to show a preview of the value. If not provided, a selectbox will be rendered so the user can choose.\",\n        default=None,\n    )\n    values: Mapping[str, Value] = Field(description=\"The values to pick from.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueInputOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueInputOptions.display_value_type","title":"<code>display_value_type: Union[bool, None] = Field(description=\"Whether to display the data type in the list. By default it hides it for a single 'data type' option, and shows for multiple.\", default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueInputOptions.show_preview","title":"<code>show_preview: Union[None, bool] = Field(description='Whether to show a preview of the value. If not provided, a selectbox will be rendered so the user can choose.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueInputOptions.values","title":"<code>values: Mapping[str, Value] = Field(description='The values to pick from.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueInputOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueComponent","title":"<code>PickValueComponent</code>","text":"<p>         Bases: <code>InputComponent</code></p> <p>Render a selectbox with the provided all the values in the provided value map.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>class PickValueComponent(InputComponent):\n\"\"\"Render a selectbox with the provided all the values in the provided value map.\"\"\"\n\n    _component_name = \"pick_value\"\n    _options = PickValueInputOptions  # type: ignore\n\n    @classmethod\n    def get_data_type(cls) -&gt; Union[str, None]:\n        return None\n\n    def render_input_field(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: PickValueInputOptions,\n    ) -&gt; Union[ValueLink, None, str, uuid.UUID]:\n\n        if options.smart_label:\n            options.label = options.label.split(\"__\")[-1]\n\n        data_types = []\n\n        for name, value in options.values.items():\n            data_type = value.data_type_name\n            if data_type not in data_types:\n                data_types.append(value.data_type_name)\n\n        return self._render_default_selectbox(st, options, data_types=data_types)\n\n    def _render_default_selectbox(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: PickValueInputOptions,\n        data_types: List[str],\n    ):\n\n        available_values = options.values\n\n        display_type = options.display_value_type\n        if display_type is None and len(data_types) != 1:\n            display_type = True\n        elif display_type is None:\n            display_type = False\n\n        format_func: Callable = str\n        if display_type:\n\n            def format_func(v: Any) -&gt; str:\n                if v == NO_VALUE_MARKER:\n                    return v\n                return f\"{v} ({available_values[v].data_type_name})\"\n\n        _item_options = list(available_values.keys())\n\n        # if _item_options:\n        #     default = _item_options[0]\n        # else:\n        #     default = None\n\n        callback, _select_key = self._create_session_store_callback(\n            options, \"input\", \"pick\", \"value\"\n        )\n\n        result = st.selectbox(\n            label=options.label,\n            options=_item_options,\n            key=_select_key,\n            format_func=format_func,\n            on_change=callback,\n            help=options.help,\n        )\n\n        if options.show_preview is None:\n            if result:\n                _key = options.create_key(\"preview\", result)\n            else:\n                _key = options.create_key(\"preview\", \"no_value\")\n            if result is None:\n                disabled = True\n            else:\n                disabled = False\n            show_preview = st.checkbox(\n                \"Preview\", key=f\"preview_{_select_key}\", disabled=disabled\n            )\n            if show_preview:\n                comp = self.get_component(\"preview\")\n                if hasattr(st, \"__enter__\"):\n                    with st:\n                        comp.render_func(st)(key=_key, value=result)\n                else:\n                    comp.render_func(st)(key=_key, value=result)\n        elif options.show_preview is True:\n            # TODO: support preview profiles\n            if result is not None:\n                _key = options.create_key(\"preview\", result)\n                comp = self.get_component(\"preview\")\n                if hasattr(st, \"__enter__\"):\n                    with st:\n                        comp.render_func(st)(key=_key, value=result)\n                else:\n                    comp.render_func(st)(key=_key, value=result)\n\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueComponent.get_data_type","title":"<code>get_data_type() -&gt; Union[str, None]</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; Union[str, None]:\n    return None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/__init__/#kiara_plugin.streamlit.components.input.PickValueComponent.render_input_field","title":"<code>render_input_field(st: KiaraStreamlitAPI, options: PickValueInputOptions) -&gt; Union[ValueLink, None, str, uuid.UUID]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/__init__.py</code> <pre><code>def render_input_field(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: PickValueInputOptions,\n) -&gt; Union[ValueLink, None, str, uuid.UUID]:\n\n    if options.smart_label:\n        options.label = options.label.split(\"__\")[-1]\n\n    data_types = []\n\n    for name, value in options.values.items():\n        data_type = value.data_type_name\n        if data_type not in data_types:\n            data_types.append(value.data_type_name)\n\n    return self._render_default_selectbox(st, options, data_types=data_types)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/","title":"assemblies","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.ASSEMBLY_OPTIONS_TYPE","title":"<code>ASSEMBLY_OPTIONS_TYPE = TypeVar('ASSEMBLY_OPTIONS_TYPE', bound=AssemblyOptions)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.AssemblyOptions","title":"<code>AssemblyOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>class AssemblyOptions(ComponentOptions):\n\n    max_columns: int = Field(\n        description=\"The maximum number of columns to use for the assembly.\", default=3\n    )\n    profile: str = Field(\n        description=\"The name of the profile that renders the assembly. Available: 'default' and 'all'\",\n        default=\"default\",\n    )\n    smart_label: bool = Field(\n        description=\"Whether to try to shorten the label.\", default=True\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.AssemblyOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.AssemblyOptions.max_columns","title":"<code>max_columns: int = Field(description='The maximum number of columns to use for the assembly.', default=3)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.AssemblyOptions.profile","title":"<code>profile: str = Field(description=\"The name of the profile that renders the assembly. Available: 'default' and 'all'\", default='default')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.AssemblyOptions.smart_label","title":"<code>smart_label: bool = Field(description='Whether to try to shorten the label.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.AssemblyOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputAssemblyComponent","title":"<code>InputAssemblyComponent</code>","text":"<p>         Bases: <code>KiaraComponent[ASSEMBLY_OPTIONS_TYPE]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>class InputAssemblyComponent(KiaraComponent[ASSEMBLY_OPTIONS_TYPE]):\n\n    _options = AssemblyOptions  # type: ignore\n\n    @abc.abstractmethod\n    def get_input_fields(\n        self, options: ASSEMBLY_OPTIONS_TYPE\n    ) -&gt; Mapping[str, ValueSchema]:\n        pass\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: ASSEMBLY_OPTIONS_TYPE\n    ) -&gt; ValueMap:\n\n        profile = options.profile\n\n        method_name = f\"render_{profile}\"\n        if not hasattr(self, method_name):\n            raise Exception(f\"No input fields render profile '{profile}' available.'\")\n\n        fields = self.get_input_fields(options=options)\n        func = getattr(self, method_name)\n        result = func(st, fields, options=options)\n\n        value_map = self.api.assemble_value_map(result, values_schema=fields)\n        return value_map\n\n    def render_all(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        fields: Mapping[str, ValueSchema],\n        options: ASSEMBLY_OPTIONS_TYPE,\n    ) -&gt; Mapping[str, Union[str, uuid.UUID, ValueLink, None]]:\n\n        max_columns = options.max_columns\n\n        if not fields:\n            return construct_valuemap(kiara_api=self.api, values={})\n\n        if not max_columns:\n            num_columns = len(fields)\n        elif len(fields) &gt;= max_columns:\n            num_columns = max_columns\n        else:\n            num_columns = len(fields)\n\n        columns = st.columns(num_columns)\n        values: Dict[str, Union[None, ValueLink, str, uuid.UUID]] = {}\n        for idx, field_name in enumerate(fields.keys()):\n            schema = fields[field_name]\n            help = None\n            if schema.doc.is_set:\n                help = schema.doc.full_doc\n            data_type_name = schema.type\n            _key = options.create_key(\"op_input\", \"req\", \"all\", field_name)\n            comp: InputComponent = self.kiara_streamlit.get_input_component(\n                data_type_name\n            )\n\n            column_idx = idx % num_columns\n            input_opts = DefaultInputOptions(\n                key=_key,\n                label=field_name,\n                value_schema=schema,\n                help=help,\n                smart_label=options.smart_label,\n            )\n            r = comp.render_input_field(columns[column_idx], input_opts)  # type: ignore\n\n            values[field_name] = r\n\n        return values\n\n    def render_default(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        fields: Mapping[str, ValueSchema],\n        options: AssemblyOptions,\n    ) -&gt; Mapping[str, Union[str, None, uuid.UUID, ValueLink]]:\n\n        required: Dict[str, ValueSchema] = {}\n        optional: Dict[str, ValueSchema] = {}\n        max_columns = options.max_columns\n\n        optional_expanded = True\n\n        for input_name, input_schema in fields.items():\n            if not input_schema.optional:\n                required[input_name] = input_schema\n            else:\n                optional[input_name] = input_schema\n\n        values = {}\n        if required:\n            req_expander = st.expander(\"Required inputs\", expanded=True)\n            if not max_columns:\n                num_columns = len(required)\n            elif len(required) &gt;= max_columns:\n                num_columns = max_columns\n            else:\n                num_columns = len(required)\n\n            columns = req_expander.columns(num_columns)\n            for idx, field_name in enumerate(required.keys()):\n                schema = required[field_name]\n                help = None\n                if schema.doc.is_set:\n                    help = schema.doc.full_doc\n                data_type_name = schema.type\n                _key = options.create_key(\"op_input\", \"req\", \"default\", field_name)\n                comp = self.kiara_streamlit.get_input_component(data_type_name)\n\n                column_idx = idx % num_columns\n                input_opts = DefaultInputOptions(\n                    key=_key,\n                    label=field_name,\n                    value_schema=schema,\n                    help=help,\n                    smart_label=options.smart_label,\n                )\n\n                r = comp.render_input_field(columns[column_idx], input_opts)  # type: ignore\n\n                values[field_name] = r\n\n        if optional:\n            opt_expander = st.expander(\"Optional inputs\", expanded=optional_expanded)\n\n            if not max_columns:\n                num_columns = len(optional)\n            elif len(optional) &gt;= max_columns:\n                num_columns = max_columns\n            else:\n                num_columns = len(optional)\n\n            opt_columns = opt_expander.columns(num_columns)\n\n            for idx, field_name in enumerate(optional.keys()):\n                schema = optional[field_name]\n                help = None\n                if schema.doc.is_set:\n                    help = schema.doc.full_doc\n\n                if idx &gt;= num_columns:\n                    if idx % num_columns == 0:\n                        opt_columns = opt_expander.columns(num_columns)\n\n                data_type_name = schema.type\n                _key = options.create_key(\"op_input\", \"opt\", \"default\", field_name)\n                comp = self.kiara_streamlit.get_input_component(data_type_name)\n                column_idx = idx % num_columns\n                input_opts = DefaultInputOptions(\n                    key=_key,\n                    label=field_name,\n                    value_schema=schema,\n                    help=help,\n                    smart_label=options.smart_label,\n                )\n\n                r = comp.render_input_field(opt_columns[column_idx], input_opts)  # type: ignore\n                values[field_name] = r\n\n        return values\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputAssemblyComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputAssemblyComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputAssemblyComponent.get_input_fields","title":"<code>get_input_fields(options: ASSEMBLY_OPTIONS_TYPE) -&gt; Mapping[str, ValueSchema]</code>  <code>abstractmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>@abc.abstractmethod\ndef get_input_fields(\n    self, options: ASSEMBLY_OPTIONS_TYPE\n) -&gt; Mapping[str, ValueSchema]:\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputAssemblyComponent.render_all","title":"<code>render_all(st: KiaraStreamlitAPI, fields: Mapping[str, ValueSchema], options: ASSEMBLY_OPTIONS_TYPE) -&gt; Mapping[str, Union[str, uuid.UUID, ValueLink, None]]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>def render_all(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    fields: Mapping[str, ValueSchema],\n    options: ASSEMBLY_OPTIONS_TYPE,\n) -&gt; Mapping[str, Union[str, uuid.UUID, ValueLink, None]]:\n\n    max_columns = options.max_columns\n\n    if not fields:\n        return construct_valuemap(kiara_api=self.api, values={})\n\n    if not max_columns:\n        num_columns = len(fields)\n    elif len(fields) &gt;= max_columns:\n        num_columns = max_columns\n    else:\n        num_columns = len(fields)\n\n    columns = st.columns(num_columns)\n    values: Dict[str, Union[None, ValueLink, str, uuid.UUID]] = {}\n    for idx, field_name in enumerate(fields.keys()):\n        schema = fields[field_name]\n        help = None\n        if schema.doc.is_set:\n            help = schema.doc.full_doc\n        data_type_name = schema.type\n        _key = options.create_key(\"op_input\", \"req\", \"all\", field_name)\n        comp: InputComponent = self.kiara_streamlit.get_input_component(\n            data_type_name\n        )\n\n        column_idx = idx % num_columns\n        input_opts = DefaultInputOptions(\n            key=_key,\n            label=field_name,\n            value_schema=schema,\n            help=help,\n            smart_label=options.smart_label,\n        )\n        r = comp.render_input_field(columns[column_idx], input_opts)  # type: ignore\n\n        values[field_name] = r\n\n    return values\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputAssemblyComponent.render_default","title":"<code>render_default(st: KiaraStreamlitAPI, fields: Mapping[str, ValueSchema], options: AssemblyOptions) -&gt; Mapping[str, Union[str, None, uuid.UUID, ValueLink]]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>def render_default(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    fields: Mapping[str, ValueSchema],\n    options: AssemblyOptions,\n) -&gt; Mapping[str, Union[str, None, uuid.UUID, ValueLink]]:\n\n    required: Dict[str, ValueSchema] = {}\n    optional: Dict[str, ValueSchema] = {}\n    max_columns = options.max_columns\n\n    optional_expanded = True\n\n    for input_name, input_schema in fields.items():\n        if not input_schema.optional:\n            required[input_name] = input_schema\n        else:\n            optional[input_name] = input_schema\n\n    values = {}\n    if required:\n        req_expander = st.expander(\"Required inputs\", expanded=True)\n        if not max_columns:\n            num_columns = len(required)\n        elif len(required) &gt;= max_columns:\n            num_columns = max_columns\n        else:\n            num_columns = len(required)\n\n        columns = req_expander.columns(num_columns)\n        for idx, field_name in enumerate(required.keys()):\n            schema = required[field_name]\n            help = None\n            if schema.doc.is_set:\n                help = schema.doc.full_doc\n            data_type_name = schema.type\n            _key = options.create_key(\"op_input\", \"req\", \"default\", field_name)\n            comp = self.kiara_streamlit.get_input_component(data_type_name)\n\n            column_idx = idx % num_columns\n            input_opts = DefaultInputOptions(\n                key=_key,\n                label=field_name,\n                value_schema=schema,\n                help=help,\n                smart_label=options.smart_label,\n            )\n\n            r = comp.render_input_field(columns[column_idx], input_opts)  # type: ignore\n\n            values[field_name] = r\n\n    if optional:\n        opt_expander = st.expander(\"Optional inputs\", expanded=optional_expanded)\n\n        if not max_columns:\n            num_columns = len(optional)\n        elif len(optional) &gt;= max_columns:\n            num_columns = max_columns\n        else:\n            num_columns = len(optional)\n\n        opt_columns = opt_expander.columns(num_columns)\n\n        for idx, field_name in enumerate(optional.keys()):\n            schema = optional[field_name]\n            help = None\n            if schema.doc.is_set:\n                help = schema.doc.full_doc\n\n            if idx &gt;= num_columns:\n                if idx % num_columns == 0:\n                    opt_columns = opt_expander.columns(num_columns)\n\n            data_type_name = schema.type\n            _key = options.create_key(\"op_input\", \"opt\", \"default\", field_name)\n            comp = self.kiara_streamlit.get_input_component(data_type_name)\n            column_idx = idx % num_columns\n            input_opts = DefaultInputOptions(\n                key=_key,\n                label=field_name,\n                value_schema=schema,\n                help=help,\n                smart_label=options.smart_label,\n            )\n\n            r = comp.render_input_field(opt_columns[column_idx], input_opts)  # type: ignore\n            values[field_name] = r\n\n    return values\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.OperationInputsOptions","title":"<code>OperationInputsOptions</code>","text":"<p>         Bases: <code>AssemblyOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>class OperationInputsOptions(AssemblyOptions):\n\n    module_config: Union[Dict[str, Any], None] = Field(\n        description=\"Optional module config.\", default=None\n    )\n    ignore_inputs: List[str] = Field(\n        description=\"Don't render input widgets for those fields.\", default_factory=list\n    )\n    operation_id: str = Field(\n        description=\"The id of the operation to render the inputs for.\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.OperationInputsOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.OperationInputsOptions.module_config","title":"<code>module_config: Union[Dict[str, Any], None] = Field(description='Optional module config.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.OperationInputsOptions.ignore_inputs","title":"<code>ignore_inputs: List[str] = Field(description=\"Don't render input widgets for those fields.\", default_factory=list)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.OperationInputsOptions.operation_id","title":"<code>operation_id: str = Field(description='The id of the operation to render the inputs for.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.OperationInputsOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.OperationInputs","title":"<code>OperationInputs</code>","text":"<p>         Bases: <code>InputAssemblyComponent</code></p> <p>Render all inputs for a specifc operation.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>class OperationInputs(InputAssemblyComponent):\n\"\"\"Render all inputs for a specifc operation.\"\"\"\n\n    _component_name = \"operation_inputs\"\n    _options = OperationInputsOptions  # type: ignore\n    _examples = [\n        {\n            \"doc\": \"Render the inputs for the 'table_filter.select_rows' operation.\",\n            \"args\": {\"operation_id\": \"table_filter.select_rows\"},\n        }\n    ]\n\n    def get_input_fields(\n        self, options: OperationInputsOptions\n    ) -&gt; Mapping[str, ValueSchema]:\n\n        # TODO: check argument\n        data = {\n            \"module_type\": options.operation_id,\n            \"module_config\": options.module_config,\n        }\n        op = self.api.get_operation(data)\n\n        if not options.ignore_inputs:\n            return op.inputs_schema\n        else:\n            return {\n                k: v\n                for k, v in op.inputs_schema.items()\n                if k not in options.ignore_inputs\n            }\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.OperationInputs-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.OperationInputs-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.OperationInputs.get_input_fields","title":"<code>get_input_fields(options: OperationInputsOptions) -&gt; Mapping[str, ValueSchema]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>def get_input_fields(\n    self, options: OperationInputsOptions\n) -&gt; Mapping[str, ValueSchema]:\n\n    # TODO: check argument\n    data = {\n        \"module_type\": options.operation_id,\n        \"module_config\": options.module_config,\n    }\n    op = self.api.get_operation(data)\n\n    if not options.ignore_inputs:\n        return op.inputs_schema\n    else:\n        return {\n            k: v\n            for k, v in op.inputs_schema.items()\n            if k not in options.ignore_inputs\n        }\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputFieldsOptions","title":"<code>InputFieldsOptions</code>","text":"<p>         Bases: <code>AssemblyOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>class InputFieldsOptions(AssemblyOptions):\n    fields: Mapping[str, ValueSchema] = Field(description=\"The fields to render.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputFieldsOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputFieldsOptions.fields","title":"<code>fields: Mapping[str, ValueSchema] = Field(description='The fields to render.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputFieldsOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputFields","title":"<code>InputFields</code>","text":"<p>         Bases: <code>InputAssemblyComponent</code></p> <p>Render a panel containing input widgets for each of the provided fields.</p> <p>The type of input widgets is determined by the type of each field schema.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>class InputFields(InputAssemblyComponent):\n\"\"\"Render a panel containing input widgets for each of the provided fields.\n\n    The type of input widgets is determined by the type of each field schema.\n    \"\"\"\n\n    _component_name = \"inputs_for_fields\"\n    _options = InputFieldsOptions  # type: ignore\n    _examples = [\n        {\n            \"doc\": \"Render inputs for 2 scalar field items.\\n\\nIn most cases, you would not build the field schemas up yourself, but use already existing 'inputs_schema' object attached to operations or workflows.\",\n            \"args\": {\n                \"fields\": {\n                    \"text_field\": {\n                        \"type\": \"string\",\n                        \"doc\": \"A text field.\",\n                    },\n                    \"number_field\": {\"type\": \"integer\", \"doc\": \"A number.\"},\n                }\n            },\n        }\n    ]\n\n    def get_input_fields(\n        self, options: InputFieldsOptions\n    ) -&gt; Mapping[str, ValueSchema]:\n        return options.fields\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputFields-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputFields-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/assemblies/#kiara_plugin.streamlit.components.input.assemblies.InputFields.get_input_fields","title":"<code>get_input_fields(options: InputFieldsOptions) -&gt; Mapping[str, ValueSchema]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/assemblies.py</code> <pre><code>def get_input_fields(\n    self, options: InputFieldsOptions\n) -&gt; Mapping[str, ValueSchema]:\n    return options.fields\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/container_types/","title":"container_types","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/container_types/#kiara_plugin.streamlit.components.input.container_types-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/container_types/#kiara_plugin.streamlit.components.input.container_types.ListInput","title":"<code>ListInput</code>","text":"<p>         Bases: <code>InputComponent</code></p> <p>Render a widget for input a list.</p> <p>Currently, only lists of strings are supported.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/container_types.py</code> <pre><code>class ListInput(InputComponent):\n\"\"\"Render a widget for input a list.\n\n    Currently, only lists of strings are supported.\n    \"\"\"\n\n    _component_name = \"input_list\"\n    _examples = [\n        {\"doc\": \"A simple list input widget.\", \"args\": {\"label\": \"List of words\"}},\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"list\"\n\n    @classmethod\n    def get_default_label(cls) -&gt; str:\n        return \"Provide items\"\n\n    def render_input_field(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: InputOptions,\n    ):\n        if options.smart_label:\n            options.label = options.label.split(\"__\")[-1]\n\n        with st.container():\n            items = st_tags(\n                label=options.label,\n                text=\"Press enter to add more\",\n                key=options.create_key(\"input\", \"list\"),\n            )\n            if options.help:\n                st.caption(options.help)\n\n        value = self.api.register_data(items, data_type=\"list\", reuse_existing=True)\n        return value\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/container_types/#kiara_plugin.streamlit.components.input.container_types.ListInput-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/container_types/#kiara_plugin.streamlit.components.input.container_types.ListInput-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/container_types/#kiara_plugin.streamlit.components.input.container_types.ListInput.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/container_types.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"list\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/container_types/#kiara_plugin.streamlit.components.input.container_types.ListInput.get_default_label","title":"<code>get_default_label() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/container_types.py</code> <pre><code>@classmethod\ndef get_default_label(cls) -&gt; str:\n    return \"Provide items\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/container_types/#kiara_plugin.streamlit.components.input.container_types.ListInput.render_input_field","title":"<code>render_input_field(st: KiaraStreamlitAPI, options: InputOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/container_types.py</code> <pre><code>def render_input_field(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: InputOptions,\n):\n    if options.smart_label:\n        options.label = options.label.split(\"__\")[-1]\n\n    with st.container():\n        items = st_tags(\n            label=options.label,\n            text=\"Press enter to add more\",\n            key=options.create_key(\"input\", \"list\"),\n        )\n        if options.help:\n            st.caption(options.help)\n\n    value = self.api.register_data(items, data_type=\"list\", reuse_existing=True)\n    return value\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/files/","title":"files","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FUNC_PREFIX","title":"<code>FUNC_PREFIX = 'render_import_file_from___'</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.InputFileOptions","title":"<code>InputFileOptions</code>","text":"<p>         Bases: <code>InputOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/files.py</code> <pre><code>class InputFileOptions(InputOptions):\n    allowed_input_methods: Union[List[str], None] = Field(\n        description=\"The import methods the user is allowed to choose from. Defaults to all available.\",\n        default=None,\n    )\n    add_existing_file_option: bool = Field(\n        description=\"Add an option to select an already imported file.\", default=False\n    )\n    show_preview: Union[bool, None] = Field(\n        description=\"Whether to show a preview of the file contents. If not specified, the user can choose with a checkbox.\",\n        default=None,\n    )\n    accepted_file_extensions: Union[None, List[str]] = Field(\n        description=\"A list of file extensions that are accepted. If not specified, all files are accepted.\",\n        default=None,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.InputFileOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.InputFileOptions.allowed_input_methods","title":"<code>allowed_input_methods: Union[List[str], None] = Field(description='The import methods the user is allowed to choose from. Defaults to all available.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.InputFileOptions.add_existing_file_option","title":"<code>add_existing_file_option: bool = Field(description='Add an option to select an already imported file.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.InputFileOptions.show_preview","title":"<code>show_preview: Union[bool, None] = Field(description='Whether to show a preview of the file contents. If not specified, the user can choose with a checkbox.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.InputFileOptions.accepted_file_extensions","title":"<code>accepted_file_extensions: Union[None, List[str]] = Field(description='A list of file extensions that are accepted. If not specified, all files are accepted.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.InputFileOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FileOnboarding","title":"<code>FileOnboarding</code>","text":"<p>         Bases: <code>InputComponent</code></p> <p>Render a text input widget.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/files.py</code> <pre><code>class FileOnboarding(InputComponent):\n\"\"\"Render a text input widget.\"\"\"\n\n    _component_name = \"input_file\"\n    _options = InputFileOptions\n    _examples = [{\"doc\": \"The default file input widget.\", \"args\": {}}]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"file\"\n\n    @classmethod\n    def get_default_label(cls) -&gt; str:\n        return \"Upload file\"\n\n    @classmethod\n    @lru_cache(maxsize=1)\n    def get_supported_input_methods(cls) -&gt; Dict[str, DocumentationMetadataModel]:\n\n        result = {}\n        for func_name in dir(cls):\n            if func_name.startswith(FUNC_PREFIX):\n                method_name = func_name[len(FUNC_PREFIX) :]\n                func = getattr(cls, func_name)\n                doc = extract_doc_from_func(func)\n                result[method_name] = DocumentationMetadataModel.create(doc)\n\n        return result\n\n    def render_input_field(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: InputFileOptions,\n    ) -&gt; Union[ValueLink, None, str, uuid.UUID]:\n\n        input_methods = self.__class__.get_supported_input_methods()\n        if options.allowed_input_methods is None:\n            methods_to_use = [\"upload\", \"download\"]\n        else:\n            methods_to_use = options.allowed_input_methods\n\n        if options.add_existing_file_option and \"existing\" not in methods_to_use:\n            methods_to_use.insert(0, \"existing\")\n\n        method_callback, method_key = self._create_session_store_callback(\n            options, \"import\", \"file\", \"method\"\n        )\n\n        last_value_key = f\"{method_key}_last_value\"\n        last_value: Union[None, Value] = st.session_state.get(last_value_key, None)  # type: ignore\n\n        if len(methods_to_use) &gt; 1:\n            method = st.radio(\n                label=\"Choose method\",\n                options=methods_to_use,\n                key=method_key,\n                on_change=method_callback,\n                format_func=lambda x: input_methods[x].description\n                if input_methods[x].is_set\n                else x,\n            )\n        else:\n            method = methods_to_use[0]\n\n        if method not in methods_to_use:\n            raise ValueError(\n                f\"Import file method '{method}' is not supported. Supported methods are: {', '.join(methods_to_use)}.\"\n            )\n\n        method_func_name = FUNC_PREFIX + method\n        method_func = getattr(self, method_func_name)\n        kiara_file: Union[Value, None] = method_func(st, options)\n\n        if kiara_file and not kiara_file.is_set:\n            kiara_file = None\n\n        if kiara_file:\n            if last_value:\n                changed = last_value.value_id != kiara_file.value_id\n            else:\n                changed = kiara_file is None\n        else:\n            changed = last_value is not None\n\n        preview_callback, preview_key = self._create_session_store_callback(\n            options, \"import\", \"file\", \"preview\"\n        )\n\n        if changed or kiara_file is None:\n            st.session_state[last_value_key] = kiara_file  # type: ignore\n            st.session_state[preview_key] = False  # type: ignore\n\n        preview = False\n        if options.show_preview is None:\n            preview = st.checkbox(\n                label=\"Preview file content\",\n                value=False,\n                help=\"Preview the content of the selected file.\",\n                disabled=kiara_file is None,\n                key=preview_key,\n                on_change=preview_callback,\n            )\n        elif options.show_preview is True:\n            with st.expander(label=\"Preview file content\", expanded=True):\n                if kiara_file:\n                    st.kiara.preview(value=kiara_file)\n                else:\n                    st.info(\"No file selected.\")\n        else:\n            preview = False\n\n        if kiara_file is not None and preview:\n            st.kiara.preview(value=kiara_file)\n\n        return kiara_file\n\n    def render_import_file_from___existing(\n        self, st: \"KiaraStreamlitAPI\", options: InputFileOptions\n    ) -&gt; Union[Value, None]:\n\"\"\"pick an already imported file\"\"\"\n\n        _, existing_key = self._create_session_store_callback(\n            options, \"import\", \"file\", \"existing\"\n        )\n\n        values = self.api.list_aliases(data_types=[\"file\"])\n\n        if not options.accepted_file_extensions:\n            _values = dict(values)\n        else:\n            _values = {}\n            for k, v in values.items():\n                file: KiaraFile = v.data\n                if file.file_extension in options.accepted_file_extensions:\n                    _values[k] = v\n\n        value = self.get_component(\"pick_value\").render(\n            st, values=_values, key=existing_key, show_preview=False\n        )\n\n        return value\n\n    def render_import_file_from___upload(\n        self, st: \"KiaraStreamlitAPI\", options: InputFileOptions\n    ) -&gt; Union[Value, None]:\n\"\"\"upload a file from your local file system\"\"\"\n\n        _, upload_key = self._create_session_store_callback(\n            options, \"import\", \"file\", \"upload\"\n        )\n\n        last_value_key = f\"{upload_key}_last_value\"\n        last_value = st.session_state.get(last_value_key, None)  # type: ignore\n\n        file_types = options.accepted_file_extensions\n        if not file_types:\n            file_types = None\n        uploaded_file = st.file_uploader(\n            label=options.label, help=options.help, key=upload_key, type=file_types\n        )\n\n        if not uploaded_file:\n            st.session_state[last_value_key] = None  # type: ignore\n            return None\n\n        # TODO: in some very edge cases this change detection can still go wrong\n        if (\n            last_value\n            and last_value[\"uploaded_file\"] == uploaded_file.name\n            and last_value[\"size\"] == uploaded_file.size\n        ):\n            changed = False\n        else:\n            changed = True\n\n        if not changed:\n            return last_value[\"value\"]\n\n        if not uploaded_file:\n            return None\n\n        temp_dir = tempfile.mkdtemp()\n\n        def cleanup():\n            shutil.rmtree(temp_dir, ignore_errors=True)\n\n        atexit.register(cleanup)\n\n        path = os.path.join(temp_dir, uploaded_file.name)\n        with open(path, \"wb\") as f:\n            f.write(uploaded_file.getbuffer())\n\n        kiara_file = KiaraFile.load_file(path, file_name=uploaded_file.name)\n        value = self.api.register_data(\n            kiara_file, data_type=\"file\", reuse_existing=True\n        )\n\n        st.session_state[last_value_key] = {  # type: ignore\n            \"uploaded_file\": uploaded_file.name,\n            \"size\": uploaded_file.size,\n            \"value\": value,\n        }\n        return value\n\n    def render_import_file_from___download(\n        self, st: \"KiaraStreamlitAPI\", options: InputFileOptions\n    ) -&gt; Union[Value, None]:\n\"\"\"download a file from a remote location\"\"\"\n\n        download_callback, download_key = self._create_session_store_callback(\n            options, \"import\", \"file\", \"download\"\n        )\n\n        last_value_key = f\"{download_key}_last_value\"\n        last_value = st.session_state.get(last_value_key, None)  # type: ignore\n\n        with st.form(key=f\"{download_key}_form\"):\n            url: Union[str, None] = st.text_input(\n                label=\"Enter the URL to download the file from\",\n                help=options.help,\n                key=download_key,\n            )\n            import_button = st.form_submit_button(\"Download\")\n\n        if not url:\n            url = None\n\n        if (last_value and last_value[\"url\"] == url) or (\n            last_value is None and url is None\n        ):\n            changed = False\n        else:\n            changed = True\n            last_value = None\n            st.session_state[last_value_key] = None  # type: ignore\n\n        if not changed:\n            if last_value:\n                return last_value[\"value\"]\n            else:\n                return None\n\n        valid_url = bool(url)  # TODO: validate URL\n\n        if not import_button:\n            if last_value:\n                return last_value[\"value\"]\n            else:\n                return None\n\n        if not valid_url:\n            return None\n\n        if options.accepted_file_extensions:\n            match = False\n            for ext in options.accepted_file_extensions:\n                if url and url.endswith(ext):\n                    match = True\n                    break\n            if not match:\n                st.error(\n                    f\"The selected URL does not end with any of the accepted extensions: {', '.join(options.accepted_file_extensions)}\"\n                )\n                return None\n\n        inputs = {\"source\": url, \"onboard_type\": \"url\"}\n\n        try:\n            job_desc = JobDesc(operation=\"import.file\", inputs=inputs)\n            result = st.kiara.run_job_panel(job_desc=job_desc)\n        except Exception as e:\n            msg = KiaraException.get_root_details(e)\n            st.error(msg)\n            return None\n\n        value = result.get_value_obj(\"file\")\n        st.session_state[last_value_key] = {\"url\": url, \"value\": value}  # type: ignore\n\n        return value\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FileOnboarding-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FileOnboarding-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FileOnboarding.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/files.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"file\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FileOnboarding.get_default_label","title":"<code>get_default_label() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/files.py</code> <pre><code>@classmethod\ndef get_default_label(cls) -&gt; str:\n    return \"Upload file\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FileOnboarding.get_supported_input_methods","title":"<code>get_supported_input_methods() -&gt; Dict[str, DocumentationMetadataModel]</code>  <code>classmethod</code> <code>cached</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/files.py</code> <pre><code>@classmethod\n@lru_cache(maxsize=1)\ndef get_supported_input_methods(cls) -&gt; Dict[str, DocumentationMetadataModel]:\n\n    result = {}\n    for func_name in dir(cls):\n        if func_name.startswith(FUNC_PREFIX):\n            method_name = func_name[len(FUNC_PREFIX) :]\n            func = getattr(cls, func_name)\n            doc = extract_doc_from_func(func)\n            result[method_name] = DocumentationMetadataModel.create(doc)\n\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FileOnboarding.render_input_field","title":"<code>render_input_field(st: KiaraStreamlitAPI, options: InputFileOptions) -&gt; Union[ValueLink, None, str, uuid.UUID]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/files.py</code> <pre><code>def render_input_field(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: InputFileOptions,\n) -&gt; Union[ValueLink, None, str, uuid.UUID]:\n\n    input_methods = self.__class__.get_supported_input_methods()\n    if options.allowed_input_methods is None:\n        methods_to_use = [\"upload\", \"download\"]\n    else:\n        methods_to_use = options.allowed_input_methods\n\n    if options.add_existing_file_option and \"existing\" not in methods_to_use:\n        methods_to_use.insert(0, \"existing\")\n\n    method_callback, method_key = self._create_session_store_callback(\n        options, \"import\", \"file\", \"method\"\n    )\n\n    last_value_key = f\"{method_key}_last_value\"\n    last_value: Union[None, Value] = st.session_state.get(last_value_key, None)  # type: ignore\n\n    if len(methods_to_use) &gt; 1:\n        method = st.radio(\n            label=\"Choose method\",\n            options=methods_to_use,\n            key=method_key,\n            on_change=method_callback,\n            format_func=lambda x: input_methods[x].description\n            if input_methods[x].is_set\n            else x,\n        )\n    else:\n        method = methods_to_use[0]\n\n    if method not in methods_to_use:\n        raise ValueError(\n            f\"Import file method '{method}' is not supported. Supported methods are: {', '.join(methods_to_use)}.\"\n        )\n\n    method_func_name = FUNC_PREFIX + method\n    method_func = getattr(self, method_func_name)\n    kiara_file: Union[Value, None] = method_func(st, options)\n\n    if kiara_file and not kiara_file.is_set:\n        kiara_file = None\n\n    if kiara_file:\n        if last_value:\n            changed = last_value.value_id != kiara_file.value_id\n        else:\n            changed = kiara_file is None\n    else:\n        changed = last_value is not None\n\n    preview_callback, preview_key = self._create_session_store_callback(\n        options, \"import\", \"file\", \"preview\"\n    )\n\n    if changed or kiara_file is None:\n        st.session_state[last_value_key] = kiara_file  # type: ignore\n        st.session_state[preview_key] = False  # type: ignore\n\n    preview = False\n    if options.show_preview is None:\n        preview = st.checkbox(\n            label=\"Preview file content\",\n            value=False,\n            help=\"Preview the content of the selected file.\",\n            disabled=kiara_file is None,\n            key=preview_key,\n            on_change=preview_callback,\n        )\n    elif options.show_preview is True:\n        with st.expander(label=\"Preview file content\", expanded=True):\n            if kiara_file:\n                st.kiara.preview(value=kiara_file)\n            else:\n                st.info(\"No file selected.\")\n    else:\n        preview = False\n\n    if kiara_file is not None and preview:\n        st.kiara.preview(value=kiara_file)\n\n    return kiara_file\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FileOnboarding.render_import_file_from___existing","title":"<code>render_import_file_from___existing(st: KiaraStreamlitAPI, options: InputFileOptions) -&gt; Union[Value, None]</code>","text":"<p>pick an already imported file</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/files.py</code> <pre><code>def render_import_file_from___existing(\n    self, st: \"KiaraStreamlitAPI\", options: InputFileOptions\n) -&gt; Union[Value, None]:\n\"\"\"pick an already imported file\"\"\"\n\n    _, existing_key = self._create_session_store_callback(\n        options, \"import\", \"file\", \"existing\"\n    )\n\n    values = self.api.list_aliases(data_types=[\"file\"])\n\n    if not options.accepted_file_extensions:\n        _values = dict(values)\n    else:\n        _values = {}\n        for k, v in values.items():\n            file: KiaraFile = v.data\n            if file.file_extension in options.accepted_file_extensions:\n                _values[k] = v\n\n    value = self.get_component(\"pick_value\").render(\n        st, values=_values, key=existing_key, show_preview=False\n    )\n\n    return value\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FileOnboarding.render_import_file_from___upload","title":"<code>render_import_file_from___upload(st: KiaraStreamlitAPI, options: InputFileOptions) -&gt; Union[Value, None]</code>","text":"<p>upload a file from your local file system</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/files.py</code> <pre><code>def render_import_file_from___upload(\n    self, st: \"KiaraStreamlitAPI\", options: InputFileOptions\n) -&gt; Union[Value, None]:\n\"\"\"upload a file from your local file system\"\"\"\n\n    _, upload_key = self._create_session_store_callback(\n        options, \"import\", \"file\", \"upload\"\n    )\n\n    last_value_key = f\"{upload_key}_last_value\"\n    last_value = st.session_state.get(last_value_key, None)  # type: ignore\n\n    file_types = options.accepted_file_extensions\n    if not file_types:\n        file_types = None\n    uploaded_file = st.file_uploader(\n        label=options.label, help=options.help, key=upload_key, type=file_types\n    )\n\n    if not uploaded_file:\n        st.session_state[last_value_key] = None  # type: ignore\n        return None\n\n    # TODO: in some very edge cases this change detection can still go wrong\n    if (\n        last_value\n        and last_value[\"uploaded_file\"] == uploaded_file.name\n        and last_value[\"size\"] == uploaded_file.size\n    ):\n        changed = False\n    else:\n        changed = True\n\n    if not changed:\n        return last_value[\"value\"]\n\n    if not uploaded_file:\n        return None\n\n    temp_dir = tempfile.mkdtemp()\n\n    def cleanup():\n        shutil.rmtree(temp_dir, ignore_errors=True)\n\n    atexit.register(cleanup)\n\n    path = os.path.join(temp_dir, uploaded_file.name)\n    with open(path, \"wb\") as f:\n        f.write(uploaded_file.getbuffer())\n\n    kiara_file = KiaraFile.load_file(path, file_name=uploaded_file.name)\n    value = self.api.register_data(\n        kiara_file, data_type=\"file\", reuse_existing=True\n    )\n\n    st.session_state[last_value_key] = {  # type: ignore\n        \"uploaded_file\": uploaded_file.name,\n        \"size\": uploaded_file.size,\n        \"value\": value,\n    }\n    return value\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/files/#kiara_plugin.streamlit.components.input.files.FileOnboarding.render_import_file_from___download","title":"<code>render_import_file_from___download(st: KiaraStreamlitAPI, options: InputFileOptions) -&gt; Union[Value, None]</code>","text":"<p>download a file from a remote location</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/files.py</code> <pre><code>def render_import_file_from___download(\n    self, st: \"KiaraStreamlitAPI\", options: InputFileOptions\n) -&gt; Union[Value, None]:\n\"\"\"download a file from a remote location\"\"\"\n\n    download_callback, download_key = self._create_session_store_callback(\n        options, \"import\", \"file\", \"download\"\n    )\n\n    last_value_key = f\"{download_key}_last_value\"\n    last_value = st.session_state.get(last_value_key, None)  # type: ignore\n\n    with st.form(key=f\"{download_key}_form\"):\n        url: Union[str, None] = st.text_input(\n            label=\"Enter the URL to download the file from\",\n            help=options.help,\n            key=download_key,\n        )\n        import_button = st.form_submit_button(\"Download\")\n\n    if not url:\n        url = None\n\n    if (last_value and last_value[\"url\"] == url) or (\n        last_value is None and url is None\n    ):\n        changed = False\n    else:\n        changed = True\n        last_value = None\n        st.session_state[last_value_key] = None  # type: ignore\n\n    if not changed:\n        if last_value:\n            return last_value[\"value\"]\n        else:\n            return None\n\n    valid_url = bool(url)  # TODO: validate URL\n\n    if not import_button:\n        if last_value:\n            return last_value[\"value\"]\n        else:\n            return None\n\n    if not valid_url:\n        return None\n\n    if options.accepted_file_extensions:\n        match = False\n        for ext in options.accepted_file_extensions:\n            if url and url.endswith(ext):\n                match = True\n                break\n        if not match:\n            st.error(\n                f\"The selected URL does not end with any of the accepted extensions: {', '.join(options.accepted_file_extensions)}\"\n            )\n            return None\n\n    inputs = {\"source\": url, \"onboard_type\": \"url\"}\n\n    try:\n        job_desc = JobDesc(operation=\"import.file\", inputs=inputs)\n        result = st.kiara.run_job_panel(job_desc=job_desc)\n    except Exception as e:\n        msg = KiaraException.get_root_details(e)\n        st.error(msg)\n        return None\n\n    value = result.get_value_obj(\"file\")\n    st.session_state[last_value_key] = {\"url\": url, \"value\": value}  # type: ignore\n\n    return value\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/","title":"scalars","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.ScalarInput","title":"<code>ScalarInput</code>","text":"<p>         Bases: <code>InputComponent</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>class ScalarInput(InputComponent):\n    @classmethod\n    def get_default_label(cls) -&gt; str:\n        return \"Provide value\"\n\n    def render_input_field(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: InputOptions,\n    ):\n        if options.smart_label:\n            options.label = options.label.split(\"__\")[-1]\n\n        scalar = self.render_scalar_input(st, options=options)\n        if scalar is None:\n            return None\n        value = self.api.register_data(\n            scalar, data_type=self.get_data_type(), reuse_existing=True\n        )\n        return value\n\n    @abc.abstractmethod\n    def render_scalar_input(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: InputOptions,\n    ) -&gt; Any:\n        pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.ScalarInput-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.ScalarInput-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.ScalarInput.get_default_label","title":"<code>get_default_label() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>@classmethod\ndef get_default_label(cls) -&gt; str:\n    return \"Provide value\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.ScalarInput.render_input_field","title":"<code>render_input_field(st: KiaraStreamlitAPI, options: InputOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>def render_input_field(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: InputOptions,\n):\n    if options.smart_label:\n        options.label = options.label.split(\"__\")[-1]\n\n    scalar = self.render_scalar_input(st, options=options)\n    if scalar is None:\n        return None\n    value = self.api.register_data(\n        scalar, data_type=self.get_data_type(), reuse_existing=True\n    )\n    return value\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.ScalarInput.render_scalar_input","title":"<code>render_scalar_input(st: KiaraStreamlitAPI, options: InputOptions) -&gt; Any</code>  <code>abstractmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>@abc.abstractmethod\ndef render_scalar_input(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: InputOptions,\n) -&gt; Any:\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.BooleanInput","title":"<code>BooleanInput</code>","text":"<p>         Bases: <code>ScalarInput</code></p> <p>Render a checkbox for a boolean input.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>class BooleanInput(ScalarInput):\n\"\"\"Render a checkbox for a boolean input.\"\"\"\n\n    _component_name = \"input_boolean\"\n    _examples = [\n        {\"doc\": \"A simple boolean input.\", \"args\": {\"label\": \"Should I?\"}},\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"boolean\"\n\n    @classmethod\n    def get_default_label(cls) -&gt; str:\n        return \"Check enabled\"\n\n    def render_scalar_input(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: InputOptions,\n    ):\n        default = options.get_default()\n\n        if options.value_schema and options.value_schema.optional:\n            if default in [None, SpecialValue.NO_VALUE, SpecialValue.NOT_SET]:\n                default = None\n            else:\n                default = bool(default)\n\n            callback, _key = self._create_session_store_callback(\n                options,\n                \"input\",\n                \"scalar\",\n                \"radio\",\n                self.__class__.get_data_type(),\n                default=default,\n            )\n\n            choices = [\"auto\", \"true\", \"false\"]\n            if default is None:\n                idx = 0\n            elif default:\n                idx = 1\n            else:\n                idx = 2\n\n            result = st.radio(\n                label=options.label,\n                options=choices,\n                index=idx,\n                key=_key,\n                help=options.help,\n                on_change=callback,\n                horizontal=True,\n            )\n            if result == \"auto\":\n                inp = None\n            elif result == \"true\":\n                inp = True\n            else:\n                inp = False\n        else:\n            if default in [None, SpecialValue.NO_VALUE, SpecialValue.NOT_SET]:\n                default = False\n            else:\n                default = bool(default)\n\n            callback, _key = self._create_session_store_callback(\n                options,\n                \"input\",\n                \"scalar\",\n                \"checkbox\",\n                self.__class__.get_data_type(),\n                default=default,\n            )\n\n            inp = st.checkbox(\n                label=options.label, key=_key, help=options.help, on_change=callback\n            )\n        return inp\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.BooleanInput-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.BooleanInput-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.BooleanInput.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"boolean\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.BooleanInput.get_default_label","title":"<code>get_default_label() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>@classmethod\ndef get_default_label(cls) -&gt; str:\n    return \"Check enabled\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.BooleanInput.render_scalar_input","title":"<code>render_scalar_input(st: KiaraStreamlitAPI, options: InputOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>def render_scalar_input(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: InputOptions,\n):\n    default = options.get_default()\n\n    if options.value_schema and options.value_schema.optional:\n        if default in [None, SpecialValue.NO_VALUE, SpecialValue.NOT_SET]:\n            default = None\n        else:\n            default = bool(default)\n\n        callback, _key = self._create_session_store_callback(\n            options,\n            \"input\",\n            \"scalar\",\n            \"radio\",\n            self.__class__.get_data_type(),\n            default=default,\n        )\n\n        choices = [\"auto\", \"true\", \"false\"]\n        if default is None:\n            idx = 0\n        elif default:\n            idx = 1\n        else:\n            idx = 2\n\n        result = st.radio(\n            label=options.label,\n            options=choices,\n            index=idx,\n            key=_key,\n            help=options.help,\n            on_change=callback,\n            horizontal=True,\n        )\n        if result == \"auto\":\n            inp = None\n        elif result == \"true\":\n            inp = True\n        else:\n            inp = False\n    else:\n        if default in [None, SpecialValue.NO_VALUE, SpecialValue.NOT_SET]:\n            default = False\n        else:\n            default = bool(default)\n\n        callback, _key = self._create_session_store_callback(\n            options,\n            \"input\",\n            \"scalar\",\n            \"checkbox\",\n            self.__class__.get_data_type(),\n            default=default,\n        )\n\n        inp = st.checkbox(\n            label=options.label, key=_key, help=options.help, on_change=callback\n        )\n    return inp\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.StringInput","title":"<code>StringInput</code>","text":"<p>         Bases: <code>ScalarInput</code></p> <p>Render a text input widget.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>class StringInput(ScalarInput):\n\"\"\"Render a text input widget.\"\"\"\n\n    _component_name = \"input_string\"\n    _examples = [\n        {\"doc\": \"A simple text field input.\", \"args\": {\"label\": \"Say somthing\"}},\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"string\"\n\n    @classmethod\n    def get_default_label(cls) -&gt; str:\n        return \"Enter text\"\n\n    def render_scalar_input(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: InputOptions,\n    ):\n\n        default = options.get_default()\n        if default in [None, SpecialValue.NOT_SET, SpecialValue.NO_VALUE]:\n            default = \"\"\n\n        callback, _key = self._create_session_store_callback(\n            options, \"input\", \"scalar\", self.__class__.get_data_type(), default=default\n        )\n\n        txt = st.text_input(\n            label=options.label, key=_key, help=options.help, on_change=callback\n        )\n        return txt\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.StringInput-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.StringInput-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.StringInput.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"string\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.StringInput.get_default_label","title":"<code>get_default_label() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>@classmethod\ndef get_default_label(cls) -&gt; str:\n    return \"Enter text\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.StringInput.render_scalar_input","title":"<code>render_scalar_input(st: KiaraStreamlitAPI, options: InputOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>def render_scalar_input(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: InputOptions,\n):\n\n    default = options.get_default()\n    if default in [None, SpecialValue.NOT_SET, SpecialValue.NO_VALUE]:\n        default = \"\"\n\n    callback, _key = self._create_session_store_callback(\n        options, \"input\", \"scalar\", self.__class__.get_data_type(), default=default\n    )\n\n    txt = st.text_input(\n        label=options.label, key=_key, help=options.help, on_change=callback\n    )\n    return txt\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.IntegerInput","title":"<code>IntegerInput</code>","text":"<p>         Bases: <code>ScalarInput</code></p> <p>Render an integer input widget.</p> <p>You can select between two different styles: - \"default\": a number input widget - \"text_input\": a text input widget, which will be converted to an integer</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>class IntegerInput(ScalarInput):\n\"\"\"Render an integer input widget.\n\n    You can select between two different styles:\n    - \"default\": a number input widget\n    - \"text_input\": a text input widget, which will be converted to an integer\n    \"\"\"\n\n    _component_name = \"input_integer\"\n    _examples = [\n        {\"doc\": \"A simple integer input.\", \"args\": {\"label\": \"Select an integer.\"}},\n        {\n            \"doc\": \"A text field to provide an interger.\",\n            \"args\": {\"label\": \"Enter a number.\", \"display_style\": \"text_input\"},\n        },\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"integer\"\n\n    @classmethod\n    def get_default_label(cls) -&gt; str:\n        return \"Enter integer\"\n\n    def render_scalar_input(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: InputOptions,\n    ):\n\n        default = options.get_default()\n        if default in [None, SpecialValue.NOT_SET, SpecialValue.NO_VALUE]:\n            default = int(0)\n        else:\n            default = int(default)\n\n        style = options.display_style\n        if not style:\n            style = \"default\"\n\n        if style == \"text_input\":\n            default = str(default)\n\n        callback, _key = self._create_session_store_callback(\n            options, \"input\", \"scalar\", self.__class__.get_data_type(), default=default\n        )\n\n        if style == \"default\":\n            number = st.number_input(\n                label=options.label,\n                key=f\"{_key}__default\",\n                help=options.help,\n                on_change=callback,\n                step=1,\n            )\n\n        elif style == \"text_input\":\n            number_str = st.text_input(\n                label=options.label,\n                key=f\"{_key}__text_input\",\n                on_change=callback,\n                help=options.help,\n            )\n            if not number_str:\n                return None\n            try:\n                number = int(number_str)\n            except Exception:\n                raise KiaraException(f\"Can't parse input as integer: {number_str}.\")\n        else:\n            raise Exception(f\"Invalid style argument: {style}.\")\n\n        return number\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.IntegerInput-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.IntegerInput-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.IntegerInput.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"integer\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.IntegerInput.get_default_label","title":"<code>get_default_label() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>@classmethod\ndef get_default_label(cls) -&gt; str:\n    return \"Enter integer\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.IntegerInput.render_scalar_input","title":"<code>render_scalar_input(st: KiaraStreamlitAPI, options: InputOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>def render_scalar_input(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: InputOptions,\n):\n\n    default = options.get_default()\n    if default in [None, SpecialValue.NOT_SET, SpecialValue.NO_VALUE]:\n        default = int(0)\n    else:\n        default = int(default)\n\n    style = options.display_style\n    if not style:\n        style = \"default\"\n\n    if style == \"text_input\":\n        default = str(default)\n\n    callback, _key = self._create_session_store_callback(\n        options, \"input\", \"scalar\", self.__class__.get_data_type(), default=default\n    )\n\n    if style == \"default\":\n        number = st.number_input(\n            label=options.label,\n            key=f\"{_key}__default\",\n            help=options.help,\n            on_change=callback,\n            step=1,\n        )\n\n    elif style == \"text_input\":\n        number_str = st.text_input(\n            label=options.label,\n            key=f\"{_key}__text_input\",\n            on_change=callback,\n            help=options.help,\n        )\n        if not number_str:\n            return None\n        try:\n            number = int(number_str)\n        except Exception:\n            raise KiaraException(f\"Can't parse input as integer: {number_str}.\")\n    else:\n        raise Exception(f\"Invalid style argument: {style}.\")\n\n    return number\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.FloatInput","title":"<code>FloatInput</code>","text":"<p>         Bases: <code>ScalarInput</code></p> <p>Render an input widget for a floating point number.</p> <p>You can select between two different styles: - \"default\": a number input widget - \"text_input\": a text input widget, which will be converted to an integer</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>class FloatInput(ScalarInput):\n\"\"\"Render an input widget for a floating point number.\n\n    You can select between two different styles:\n    - \"default\": a number input widget\n    - \"text_input\": a text input widget, which will be converted to an integer\n    \"\"\"\n\n    _component_name = \"input_float\"\n    _examples = [\n        {\"doc\": \"A simple float input.\", \"args\": {\"label\": \"Select a float.\"}},\n        {\n            \"doc\": \"A text field to provide an interger.\",\n            \"args\": {\"label\": \"Enter a float.\", \"display_style\": \"text_input\"},\n        },\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"float\"\n\n    @classmethod\n    def get_default_label(cls) -&gt; str:\n        return \"Enter float\"\n\n    def render_scalar_input(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: InputOptions,\n    ):\n\n        default = options.get_default()\n        if default in [None, SpecialValue.NOT_SET, SpecialValue.NO_VALUE]:\n            default = 0.0\n        else:\n            default = float(default)\n\n        style = options.display_style\n        if not style:\n            style = \"default\"\n\n        if style == \"text_input\":\n            default = str(default)\n\n        callback, _key = self._create_session_store_callback(\n            options, \"input\", \"scalar\", self.__class__.get_data_type(), default=default\n        )\n\n        if style == \"default\":\n            number = st.number_input(\n                label=options.label,\n                key=f\"{_key}_number_input\",\n                on_change=callback,\n                help=options.help,\n                step=1.0,\n            )\n        elif style == \"text_input\":\n            number_str = st.text_input(\n                label=options.label,\n                key=f\"{_key}_text_field\",\n                on_change=callback,\n                help=options.help,\n            )\n            if not number_str:\n                return None\n            try:\n                number = float(number_str)\n            except Exception:\n                raise KiaraException(f\"Can't parse input as float: {number_str}\")\n        else:\n            raise Exception(f\"Invalid style argument: {style}.\")\n\n        return number\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.FloatInput-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.FloatInput-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.FloatInput.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"float\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.FloatInput.get_default_label","title":"<code>get_default_label() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>@classmethod\ndef get_default_label(cls) -&gt; str:\n    return \"Enter float\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/input/scalars/#kiara_plugin.streamlit.components.input.scalars.FloatInput.render_scalar_input","title":"<code>render_scalar_input(st: KiaraStreamlitAPI, options: InputOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/input/scalars.py</code> <pre><code>def render_scalar_input(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: InputOptions,\n):\n\n    default = options.get_default()\n    if default in [None, SpecialValue.NOT_SET, SpecialValue.NO_VALUE]:\n        default = 0.0\n    else:\n        default = float(default)\n\n    style = options.display_style\n    if not style:\n        style = \"default\"\n\n    if style == \"text_input\":\n        default = str(default)\n\n    callback, _key = self._create_session_store_callback(\n        options, \"input\", \"scalar\", self.__class__.get_data_type(), default=default\n    )\n\n    if style == \"default\":\n        number = st.number_input(\n            label=options.label,\n            key=f\"{_key}_number_input\",\n            on_change=callback,\n            help=options.help,\n            step=1.0,\n        )\n    elif style == \"text_input\":\n        number_str = st.text_input(\n            label=options.label,\n            key=f\"{_key}_text_field\",\n            on_change=callback,\n            help=options.help,\n        )\n        if not number_str:\n            return None\n        try:\n            number = float(number_str)\n        except Exception:\n            raise KiaraException(f\"Can't parse input as float: {number_str}\")\n    else:\n        raise Exception(f\"Invalid style argument: {style}.\")\n\n    return number\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/","title":"modals","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalConfig","title":"<code>ModalConfig</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/modals/__init__.py</code> <pre><code>class ModalConfig(BaseModel):\n\n    request_alias: Union[bool, None] = Field(\n        description=\"If 'True', require an alias to be provided. If 'None', the alias field will be rendered, but the user can choose to ignore it.\",\n        default=False,\n    )\n    store_alias_key: Union[str, None] = Field(\n        description=\"If provided, use store the new alias under the given key. Ignored if 'require_alias' is False\",\n        default=None,\n    )\n    store_value_key: Union[str, None] = Field(\n        description=\"If provided, use store the new value under the given key.\",\n        default=None,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalConfig.request_alias","title":"<code>request_alias: Union[bool, None] = Field(description=\"If 'True', require an alias to be provided. If 'None', the alias field will be rendered, but the user can choose to ignore it.\", default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalConfig.store_alias_key","title":"<code>store_alias_key: Union[str, None] = Field(description=\"If provided, use store the new alias under the given key. Ignored if 'require_alias' is False\", default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalConfig.store_value_key","title":"<code>store_value_key: Union[str, None] = Field(description='If provided, use store the new value under the given key.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalResult","title":"<code>ModalResult</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/modals/__init__.py</code> <pre><code>class ModalResult(BaseModel):\n\n    modal_finished: bool = Field(\n        description=\"Whether the modal was finished.\", default=False\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalResult-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalResult.modal_finished","title":"<code>modal_finished: bool = Field(description='Whether the modal was finished.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalRequest","title":"<code>ModalRequest</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/modals/__init__.py</code> <pre><code>class ModalRequest(BaseModel):\n    class Config:\n        arbitrary_types_allowed = True\n\n    modal: \"KiaraStreamlitModal\" = Field(description=\"The modal component to show.\")\n    config: ModalConfig = Field(\n        description=\"The configuration to use when calling the 'show_modal' method on the modal instance.\"\n    )\n    result: ModalResult = Field(\n        description=\"Placeholder instance for the result of the modal component.\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalRequest-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalRequest.modal","title":"<code>modal: KiaraStreamlitModal = Field(description='The modal component to show.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalRequest.config","title":"<code>config: ModalConfig = Field(description=\"The configuration to use when calling the 'show_modal' method on the modal instance.\")</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalRequest.result","title":"<code>result: ModalResult = Field(description='Placeholder instance for the result of the modal component.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalRequest-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalRequest.Config","title":"<code>Config</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/modals/__init__.py</code> <pre><code>class Config:\n    arbitrary_types_allowed = True\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.ModalRequest.Config-attributes","title":"Attributes","text":"<code>arbitrary_types_allowed = True</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.KiaraStreamlitModal","title":"<code>KiaraStreamlitModal</code>","text":"<p>         Bases: <code>Protocol</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/modals/__init__.py</code> <pre><code>@runtime_checkable\nclass KiaraStreamlitModal(Protocol):\n    @abc.abstractmethod\n    def show_modal(self, st: \"KiaraStreamlitAPI\", request: ModalRequest) -&gt; bool:\n        pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.KiaraStreamlitModal-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/modals/__init__/#kiara_plugin.streamlit.components.modals.KiaraStreamlitModal.show_modal","title":"<code>show_modal(st: KiaraStreamlitAPI, request: ModalRequest) -&gt; bool</code>  <code>abstractmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/modals/__init__.py</code> <pre><code>@abc.abstractmethod\ndef show_modal(self, st: \"KiaraStreamlitAPI\", request: ModalRequest) -&gt; bool:\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/","title":"operations","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobOptions","title":"<code>RunJobOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/operations/__init__.py</code> <pre><code>class RunJobOptions(ComponentOptions):\n\n    reuse_previous_result: bool = Field(\n        description=\"Whether to cache previous results and return them straight away.\",\n        default=False,\n    )\n    preview_result: bool = Field(\n        description=\"Whether to preview the result.\", default=False\n    )\n    run_instantly: bool = Field(\n        description=\"Whether to not display a 'Process' button and run the job instantly.\",\n        default=False,\n    )\n    disabled: bool = Field(\n        description=\"Whether the component is disabled.\", default=False\n    )\n    job_desc: Union[JobDesc, None] = Field(\n        description=\"The description of the job to run.\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobOptions.reuse_previous_result","title":"<code>reuse_previous_result: bool = Field(description='Whether to cache previous results and return them straight away.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobOptions.preview_result","title":"<code>preview_result: bool = Field(description='Whether to preview the result.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobOptions.run_instantly","title":"<code>run_instantly: bool = Field(description=\"Whether to not display a 'Process' button and run the job instantly.\", default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobOptions.disabled","title":"<code>disabled: bool = Field(description='Whether the component is disabled.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobOptions.job_desc","title":"<code>job_desc: Union[JobDesc, None] = Field(description='The description of the job to run.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobPanel","title":"<code>RunJobPanel</code>","text":"<p>         Bases: <code>KiaraComponent[RunJobOptions]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/operations/__init__.py</code> <pre><code>class RunJobPanel(KiaraComponent[RunJobOptions]):\n\n    _component_name = \"run_job_panel\"\n    _options = RunJobOptions\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: RunJobOptions\n    ) -&gt; Union[ValueMap, None]:\n\n        job_desc = options.job_desc\n        if job_desc is None:\n            raise Exception(\"No job description provided\")\n\n        disabled = options.disabled or job_desc is None\n\n        has_previous_result = False\n        if options.reuse_previous_result:\n            if st.kiara.has_job_result(job_desc):\n                has_previous_result = True\n\n        if not options.run_instantly:\n            process_btn = st.button(\"Process\", disabled=disabled or has_previous_result)\n            if has_previous_result:\n                process_btn = True\n        else:\n            process_btn = True\n\n        result: Union[None, ValueMap] = None\n        if process_btn:\n            if disabled:\n                st.write(\"This panel is disabled, not running job...\")\n            else:\n                with st.container():\n                    with self._st.spinner(\"Processing...\"):  # type: ignore\n                        try:\n                            result = st.kiara.run_job(\n                                job=job_desc,\n                                reuse_previous=options.reuse_previous_result,\n                            )\n                        except Exception as e:\n                            st.error(KiaraException.get_root_details(e))\n\n        if result is None:\n            return None\n        elif options.preview_result:\n            comp = self.get_component(\"value_map_preview\")\n            st.write(\"**Result preview**\")\n            comp.render_func(st)(\n                value_map=dict(result),\n                key=options.create_key(\"result\", job_desc.operation),\n            )\n\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobPanel-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.RunJobPanel-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.OperationProcessOptions","title":"<code>OperationProcessOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/operations/__init__.py</code> <pre><code>class OperationProcessOptions(ComponentOptions):\n    reuse_previous_result: bool = Field(\n        description=\"Whether to cache previous results and return them straight away.\",\n        default=False,\n    )\n\n    module_config: Union[Dict[str, Any], None] = Field(\n        description=\"Optional module config.\", default=None\n    )\n    fixed_inputs: Dict[str, Any] = Field(\n        description=\"Use those fixed values and Don't render input widgets for their fields.\",\n        default_factory=dict,\n    )\n    operation_id: str = Field(description=\"The id of the operation to use.\")\n\n    @validator(\"operation_id\")\n    def _validate_operation_id(cls, v: str) -&gt; str:\n\n        if isinstance(v, str):\n            return v\n        elif isinstance(v, Operation):\n            return v.operation_id\n        elif isinstance(v, OperationInfo):\n            return v.operation.operation_id\n        else:\n            raise ValueError(f\"Invalid type for operation id: {type(v)}.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.OperationProcessOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.OperationProcessOptions.reuse_previous_result","title":"<code>reuse_previous_result: bool = Field(description='Whether to cache previous results and return them straight away.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.OperationProcessOptions.module_config","title":"<code>module_config: Union[Dict[str, Any], None] = Field(description='Optional module config.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.OperationProcessOptions.fixed_inputs","title":"<code>fixed_inputs: Dict[str, Any] = Field(description=\"Use those fixed values and Don't render input widgets for their fields.\", default_factory=dict)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.OperationProcessOptions.operation_id","title":"<code>operation_id: str = Field(description='The id of the operation to use.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.OperationProcessOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.OperationProcessPanel","title":"<code>OperationProcessPanel</code>","text":"<p>         Bases: <code>KiaraComponent[OperationProcessOptions]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/operations/__init__.py</code> <pre><code>class OperationProcessPanel(KiaraComponent[OperationProcessOptions]):\n\n    _component_name = \"operation_process_panel\"\n    _options = OperationProcessOptions\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: OperationProcessOptions\n    ) -&gt; Union[ValueMap, None]:\n\n        comp = self.get_component(\"operation_inputs\")\n        operation_inputs: ValueMap = comp.render_func(st)(\n            operation_id=options.operation_id,\n            module_config=options.module_config,\n            key=options.create_key(\"inputs\", options.operation_id),\n        )\n\n        invalid = operation_inputs.check_invalid()\n\n        if invalid:\n            txt = \"Invalid inputs:\\n\\n\"\n            for k, v in invalid.items():\n                txt += f\"- {k}: {v}\\n\"\n            st.error(txt)\n\n        job_desc = JobDesc(\n            operation=options.operation_id, inputs=dict(operation_inputs)\n        )\n        _key = options.create_key(\"process_panel\", job_desc.operation)\n\n        process_btn = st.button(\"Process\", disabled=bool(invalid), key=f\"{_key}_btn\")\n        result: Union[None, ValueMap] = None\n        if process_btn:\n            with st.container():\n                with self._st.spinner(\"Processing...\"):  # type: ignore\n\n                    try:\n                        result = self.kiara_streamlit.run_job_panel(\n                            job_desc=job_desc,\n                            reuse_previous_result=options.reuse_previous_result,\n                            key=f\"{_key}_run_job_panel\",\n                            run_instantly=True,\n                        )\n                    except Exception as e:\n                        st.error(KiaraException.get_root_details(e))\n\n        if result is None:\n            return None\n        else:\n            comp = self.get_component(\"value_map_preview\")\n            comp.render_func(st)(\n                value_map=dict(result),\n                key=options.create_key(\"result\", options.operation_id),\n            )\n\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.OperationProcessPanel-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/operations/__init__/#kiara_plugin.streamlit.components.operations.OperationProcessPanel-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/","title":"pipelines","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineSelectOptions","title":"<code>PipelineSelectOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/pipelines/__init__.py</code> <pre><code>class PipelineSelectOptions(ComponentOptions):\n    filters: List[str] = Field(\n        description=\"Filter tokens that must be present in the pipeline/operation name.\",\n        default_factory=list,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineSelectOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineSelectOptions.filters","title":"<code>filters: List[str] = Field(description='Filter tokens that must be present in the pipeline/operation name.', default_factory=list)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineSelectOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineSelect","title":"<code>PipelineSelect</code>","text":"<p>         Bases: <code>KiaraComponent[PipelineSelectOptions]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/pipelines/__init__.py</code> <pre><code>class PipelineSelect(KiaraComponent[PipelineSelectOptions]):\n\n    _component_name = \"select_pipeline\"\n    _options = PipelineSelectOptions\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: PipelineSelectOptions\n    ) -&gt; Union[None, OperationInfo]:\n\n        pipeline_infos = self.api.retrieve_operations_info(\n            *options.filters, operation_types=[\"pipeline\"]\n        )\n\n        op_ids = list(pipeline_infos.item_infos.keys())\n        result = st.selectbox(\"Select pipeline\", options=op_ids)\n        if result:\n            return pipeline_infos.item_infos[result]\n        else:\n            return None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineSelect-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineSelect-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraphOptions","title":"<code>PipelineGraphOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/pipelines/__init__.py</code> <pre><code>class PipelineGraphOptions(ComponentOptions):\n    class Config:\n        arbitrary_types_allowed = True\n\n    graph_type: Literal[\"execution\", \"data_flow\", \"data_flow_simple\"] = Field(\n        description=\"The type of graph to display.\", default=\"execution\"\n    )\n    pipeline: Union[str, Operation, OperationInfo, PipelineConfig, Pipeline] = Field(\n        description=\"The pipeline to display.\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraphOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraphOptions.graph_type","title":"<code>graph_type: Literal['execution', 'data_flow', 'data_flow_simple'] = Field(description='The type of graph to display.', default='execution')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraphOptions.pipeline","title":"<code>pipeline: Union[str, Operation, OperationInfo, PipelineConfig, Pipeline] = Field(description='The pipeline to display.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraphOptions-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraphOptions.Config","title":"<code>Config</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/pipelines/__init__.py</code> <pre><code>class Config:\n    arbitrary_types_allowed = True\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraphOptions.Config-attributes","title":"Attributes","text":"<code>arbitrary_types_allowed = True</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraphOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraph","title":"<code>PipelineGraph</code>","text":"<p>         Bases: <code>KiaraComponent[PipelineGraphOptions]</code></p> <p>Display the structure of a pipeline as a graph.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/pipelines/__init__.py</code> <pre><code>class PipelineGraph(KiaraComponent[PipelineGraphOptions]):\n\"\"\"Display the structure of a pipeline as a graph.\"\"\"\n\n    _component_name = \"pipeline_graph\"\n    _options = PipelineGraphOptions\n    _examples = [\n        {\n            \"doc\": \"Display the execution graph of the 'logic.xor' pipeline.\",\n            \"args\": {\n                \"pipeline\": \"logic.xor\",\n                \"graph_type\": \"execution\",\n            },\n        }\n    ]\n\n    def _render(self, st: \"KiaraStreamlitAPI\", options: PipelineGraphOptions) -&gt; None:\n\n        if isinstance(options.pipeline, str):\n            op: Operation = self.api.get_operation(options.pipeline)\n            structure = op.pipeline_config.structure\n        elif isinstance(options.pipeline, OperationInfo):\n            structure = options.pipeline.operation.pipeline_config.structure\n        elif isinstance(options.pipeline, Operation):\n            structure = options.pipeline.pipeline_config.structure\n        elif isinstance(options.pipeline, PipelineConfig):\n            structure = options.pipeline.structure\n        elif isinstance(options.pipeline, Pipeline):\n            structure = options.pipeline.structure\n        else:\n            raise Exception(f\"Invalid type for pipeline: {type(options.pipeline)}.\")\n\n        if options.graph_type == \"execution\":\n            dot = nx.nx_pydot.to_pydot(structure.execution_graph)\n        elif options.graph_type == \"data_flow\":\n            dot = nx.nx_pydot.to_pydot(structure.data_flow_graph)\n        elif options.graph_type == \"data_flow_simple\":\n            dot = nx.nx_pydot.to_pydot(structure.data_flow_graph_simple)\n        else:\n            raise Exception(\"Invalid graph type: {options.graph_type}\")\n\n        graph = dot.to_string()\n        st.graphviz_chart(graph)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraph-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/pipelines/__init__/#kiara_plugin.streamlit.components.pipelines.PipelineGraph-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/","title":"preview","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewOptions","title":"<code>PreviewOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>class PreviewOptions(ComponentOptions):\n\n    show_properties: bool = Field(\n        description=\"Whether to show the properties of the value.\", default=True\n    )\n    height: Union[int, None] = Field(\n        description=\"The height of the preview.\", default=None\n    )\n    display_style: str = Field(\n        description=\"The display style to use for this preview.\", default=\"default\"\n    )\n    value: Union[str, uuid.UUID, Value] = Field(description=\"The value to preview.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewOptions.show_properties","title":"<code>show_properties: bool = Field(description='Whether to show the properties of the value.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewOptions.height","title":"<code>height: Union[int, None] = Field(description='The height of the preview.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewOptions.display_style","title":"<code>display_style: str = Field(description='The display style to use for this preview.', default='default')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewOptions.value","title":"<code>value: Union[str, uuid.UUID, Value] = Field(description='The value to preview.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewComponent","title":"<code>PreviewComponent</code>","text":"<p>         Bases: <code>KiaraComponent[PreviewOptions]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>class PreviewComponent(KiaraComponent[PreviewOptions]):\n\n    _options = PreviewOptions  # type: ignore\n\n    @classmethod\n    @abstractmethod\n    def get_data_type(cls) -&gt; str:\n        pass\n\n    @classmethod\n    def get_preview_name(cls) -&gt; str:\n        return \"default\"\n\n    @abstractmethod\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n        pass\n\n    def _render(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: PreviewOptions,\n    ):\n\n        self.render_preview(st=st, options=options)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewComponent.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code> <code>abstractmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>@classmethod\n@abstractmethod\ndef get_data_type(cls) -&gt; str:\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewComponent.get_preview_name","title":"<code>get_preview_name() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>@classmethod\ndef get_preview_name(cls) -&gt; str:\n    return \"default\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewComponent.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions)</code>  <code>abstractmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>@abstractmethod\ndef render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PropertiesViewOptions","title":"<code>PropertiesViewOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> <p>Options for the properties view component.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>class PropertiesViewOptions(ComponentOptions):\n\"\"\"Options for the properties view component.\"\"\"\n\n    value: Union[str, uuid.UUID, Value] = Field(description=\"The value to preview.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PropertiesViewOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PropertiesViewOptions.value","title":"<code>value: Union[str, uuid.UUID, Value] = Field(description='The value to preview.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PropertiesViewOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PropertiesViewComponent","title":"<code>PropertiesViewComponent</code>","text":"<p>         Bases: <code>KiaraComponent[PropertiesViewOptions]</code></p> <p>Display the properties of a value.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>class PropertiesViewComponent(KiaraComponent[PropertiesViewOptions]):\n\"\"\"Display the properties of a value.\"\"\"\n\n    _component_name = \"display_value_properties\"\n    _options = PropertiesViewOptions\n\n    def _render(self, st: \"KiaraStreamlitAPI\", options: PropertiesViewOptions):\n\n        value = self.api.get_value(value=options.value)\n\n        for prop_name, prop_value in value.property_values.items():\n            _prop_name = prop_name.replace(\"metadata.\", \"\")\n            st.write(f\"Metadata item: **{_prop_name}**\")\n\n            table_data = create_recursive_table_from_model_object(prop_value.data)\n            name_col, val_col = st.columns([1, 3])\n\n            for key, value in table_data.items():\n\n                with name_col:\n                    name_col.write(key)\n\n                with val_col:\n                    if isinstance(value, (Mapping, List)):\n                        val_col.json(value, expanded=False)\n                    else:\n                        val_col.write(value)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PropertiesViewComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PropertiesViewComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.DefaultPreviewComponent","title":"<code>DefaultPreviewComponent</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>The default preview component, will render a preview component dependent on the data type of the provided value.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>class DefaultPreviewComponent(PreviewComponent):\n\"\"\"The default preview component, will render a preview component dependent on the data type of the provided value.\"\"\"\n\n    _component_name = \"preview\"\n    _examples = [\n        {\"doc\": \"Preview a table value.\", \"args\": {\"value\": \"nodes_table\"}},\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"any\"\n\n    def render_preview(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: PreviewOptions,\n    ):\n\n        preview_name = options.display_style\n        height = options.height\n        if not height:\n            height = 400\n\n        _value = self.api.get_value(options.value)\n        if not _value.is_set:\n            st.write(\"Value not set.\")\n            return\n\n        component = self._kiara_streamlit.get_preview_component(\n            data_type=_value.data_type_name, preview_name=preview_name\n        )\n        if component is not None:\n            component.render_func(st)(value=_value, key=options.create_key(\"preview\"))\n        else:\n            if isinstance(options.value, Value):\n                name = str(_value.value_id)\n            else:\n                name = str(options.value)\n\n            renderable = self.api.render_value(\n                value=_value, target_format=\"string\", use_pretty_print=True\n            )\n            st.text_area(\n                f\"Value: {name}\",\n                value=renderable,\n                disabled=True,\n                height=height,\n                key=options.create_key(\"preview\", \"default\"),\n            )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.DefaultPreviewComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.DefaultPreviewComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.DefaultPreviewComponent.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"any\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.DefaultPreviewComponent.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>def render_preview(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    options: PreviewOptions,\n):\n\n    preview_name = options.display_style\n    height = options.height\n    if not height:\n        height = 400\n\n    _value = self.api.get_value(options.value)\n    if not _value.is_set:\n        st.write(\"Value not set.\")\n        return\n\n    component = self._kiara_streamlit.get_preview_component(\n        data_type=_value.data_type_name, preview_name=preview_name\n    )\n    if component is not None:\n        component.render_func(st)(value=_value, key=options.create_key(\"preview\"))\n    else:\n        if isinstance(options.value, Value):\n            name = str(_value.value_id)\n        else:\n            name = str(options.value)\n\n        renderable = self.api.render_value(\n            value=_value, target_format=\"string\", use_pretty_print=True\n        )\n        st.text_area(\n            f\"Value: {name}\",\n            value=renderable,\n            disabled=True,\n            height=height,\n            key=options.create_key(\"preview\", \"default\"),\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewListOptions","title":"<code>PreviewListOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>class PreviewListOptions(ComponentOptions):\n\n    data_types: Union[str, List[str], None] = Field(\n        description=\"The data types to display.\", default=None\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewListOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewListOptions.data_types","title":"<code>data_types: Union[str, List[str], None] = Field(description='The data types to display.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.PreviewListOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueList","title":"<code>ValueList</code>","text":"<p>         Bases: <code>KiaraComponent[PreviewListOptions]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>class ValueList(KiaraComponent[PreviewListOptions]):\n\n    _component_name = \"value_list\"\n    _options = PreviewListOptions\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: PreviewListOptions\n    ) -&gt; Union[str, None]:\n\n        data_types = []\n        if options.data_types:\n            if isinstance(options.data_types, str):\n                data_types.append(options.data_types)\n            else:\n                data_types.extend(options.data_types)\n\n        values = self.api.list_aliases(data_types=data_types)\n\n        _key = options.create_key(\"value_list\")\n        selected_alias = create_list_component(\n            st=st, key=_key, title=\"Values\", items=list(values.keys())\n        )\n\n        return selected_alias\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueList-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueList-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueListPreview","title":"<code>ValueListPreview</code>","text":"<p>         Bases: <code>KiaraComponent[PreviewListOptions]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>class ValueListPreview(KiaraComponent[PreviewListOptions]):\n\n    _component_name = \"value_list_preview\"\n    _options = PreviewListOptions\n\n    def _render(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: PreviewListOptions,\n    ) -&gt; Union[str, None]:\n        ratio_preview: int = 3\n        data_list_column, preview_column = st.columns([1, ratio_preview])\n\n        _key = options.create_key(\"data_list\")\n\n        comp = self.get_component(\"value_list\")\n        selected_alias = comp.render_func(data_list_column)(\n            key=_key, data_types=options.data_types\n        )\n\n        if selected_alias:\n            value = self.api.get_value(selected_alias)\n            component = self.kiara_streamlit.get_preview_component(value.data_type_name)\n\n            if component is None:\n                component = self.kiara_streamlit.get_preview_component(\"any\")\n\n            pr_opts = PreviewOptions(key=options.create_key(\"preview\"), value=value)\n            component.render_preview(preview_column, options=pr_opts)  # type: ignore\n\n        return selected_alias\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueListPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueListPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueMapPreviewOptions","title":"<code>ValueMapPreviewOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>class ValueMapPreviewOptions(ComponentOptions):\n\n    add_value_types: bool = Field(\n        description=\"Whether to add the type of the value to the tab titles.\",\n        default=True,\n    )\n    add_save_option: bool = Field(\n        description=\"Whether to add a save option for every value.\", default=False\n    )\n    value_map: Mapping[str, Union[str, uuid.UUID, Value]] = Field(\n        description=\"The values to display.\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueMapPreviewOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueMapPreviewOptions.add_value_types","title":"<code>add_value_types: bool = Field(description='Whether to add the type of the value to the tab titles.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueMapPreviewOptions.add_save_option","title":"<code>add_save_option: bool = Field(description='Whether to add a save option for every value.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueMapPreviewOptions.value_map","title":"<code>value_map: Mapping[str, Union[str, uuid.UUID, Value]] = Field(description='The values to display.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueMapPreviewOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueMapPreview","title":"<code>ValueMapPreview</code>","text":"<p>         Bases: <code>KiaraComponent[ValueMapPreviewOptions]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/__init__.py</code> <pre><code>class ValueMapPreview(KiaraComponent[ValueMapPreviewOptions]):\n\n    _component_name = \"value_map_preview\"\n    _options = ValueMapPreviewOptions\n\n    def _render(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: ValueMapPreviewOptions,\n    ) -&gt; Union[ValueMap, None]:\n\n        if not options.value_map:\n            st.write(\"-- no values --\")\n            return None\n\n        _values = self.api.assemble_value_map(options.value_map)\n\n        field_names = sorted(_values.keys())\n        if not options.add_value_types:\n            tab_names = field_names\n        else:\n            tab_names = sorted(\n                (f\"{x} ({_values[x].data_type_name})\" for x in _values.keys())\n            )\n\n        tabs = st.tabs(tab_names)\n        for idx, field in enumerate(field_names):\n\n            value = _values[field]\n            if not value.is_set:\n                tabs[idx].markdown(\"-- value not set --\")\n            else:\n                component = self.kiara_streamlit.get_preview_component(\n                    value.data_type_name\n                )\n                if component is None:\n                    component = self.kiara_streamlit.get_preview_component(\"any\")\n\n                if options.add_save_option:\n                    center, right = tabs[idx].columns([4, 1])\n                else:\n                    center = tabs[idx]\n                    right = None\n\n                _key = options.create_key(\"preview\", f\"{idx}_{field}\")\n                preview_opts = PreviewOptions(key=_key, value=value)\n                component.render_preview(st=center, options=preview_opts)  # type: ignore\n\n                if options.add_save_option:\n                    assert right is not None\n                    right.write(\"Save value\")\n                    with right.form(\n                        key=options.create_key(\"save_form\", f\"{idx}_{field}\")\n                    ):\n                        _key = options.create_key(\"alias\", f\"{idx}_{field}\")\n                        alias = self._st.text_input(\n                            \"alias\",\n                            value=\"\",\n                            key=_key,\n                            placeholder=\"alias\",\n                            label_visibility=\"hidden\",\n                        )\n                        _key = options.create_key(\"save\", f\"{idx}_{field}\")\n                        save = self._st.form_submit_button(\"Save\")\n\n                    if save and alias:\n                        store_result = self.api.store_value(\n                            value=value, alias=alias, allow_overwrite=False\n                        )\n                        if store_result.error:\n                            right.error(store_result.error)\n                        else:\n                            right.success(\"Value saved\")\n\n        return _values\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueMapPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview.ValueMapPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/__init__/#kiara_plugin.streamlit.components.preview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/assemblies/","title":"assemblies","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/assemblies/#kiara_plugin.streamlit.components.preview.assemblies-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/assemblies/#kiara_plugin.streamlit.components.preview.assemblies.FieldsInfoOptions","title":"<code>FieldsInfoOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/assemblies.py</code> <pre><code>class FieldsInfoOptions(ComponentOptions):\n\n    fields: Mapping[str, ValueSchema] = Field(\n        description=\"The fields and their schema.\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/assemblies/#kiara_plugin.streamlit.components.preview.assemblies.FieldsInfoOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/assemblies/#kiara_plugin.streamlit.components.preview.assemblies.FieldsInfoOptions.fields","title":"<code>fields: Mapping[str, ValueSchema] = Field(description='The fields and their schema.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/assemblies/#kiara_plugin.streamlit.components.preview.assemblies.FieldsInfoOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/assemblies/#kiara_plugin.streamlit.components.preview.assemblies.FieldsInfo","title":"<code>FieldsInfo</code>","text":"<p>         Bases: <code>KiaraComponent[FieldsInfoOptions]</code></p> <p>Display information about a set of input fields.</p> <p>This is mostly used to display the input requirements of an operation or pipeline to users.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/assemblies.py</code> <pre><code>class FieldsInfo(KiaraComponent[FieldsInfoOptions]):\n\"\"\"Display information about a set of input fields.\n\n    This is mostly used to display the input requirements of an operation or pipeline to users.\n    \"\"\"\n\n    _component_name = \"fields_info\"\n    _options = FieldsInfoOptions\n\n    _examples = [\n        {\n            \"doc\": \"Render a table with information about the provided input field items.\\n\\nIn most cases, you would not build the field schemas up yourself, but use already existing 'inputs_schema' object attached to operations or workflows.\",\n            \"args\": {\n                \"fields\": {\n                    \"text_field\": {\n                        \"type\": \"string\",\n                        \"doc\": \"A text field.\",\n                    },\n                    \"number_field\": {\"type\": \"integer\", \"doc\": \"A number.\"},\n                }\n            },\n        }\n    ]\n\n    def _render(self, st: \"KiaraStreamlitAPI\", options: FieldsInfoOptions):\n\n        import pandas as pd\n\n        fields = options.fields\n        fields_data = create_dict_from_field_schemas(fields)\n        dataframe = pd.DataFrame(fields_data, columns=list(fields_data.keys()))\n        dataframe.set_index(\"field_name\", inplace=True)  # noqa\n        st.table(dataframe)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/assemblies/#kiara_plugin.streamlit.components.preview.assemblies.FieldsInfo-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/assemblies/#kiara_plugin.streamlit.components.preview.assemblies.FieldsInfo-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/","title":"core_types","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.DictPreview","title":"<code>DictPreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'dict'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>class DictPreview(PreviewComponent):\n\"\"\"Preview a value of type 'dict'.\"\"\"\n\n    _component_name = \"preview_dict\"\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"dict\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n        _value = self.api.get_value(options.value)\n        dict_data: KiaraDict = _value.data\n\n        data, schema = st.tabs([\"Data\", \"Schema\"])\n\n        try:\n            json_str = orjson_dumps(dict_data.dict_data)\n        except Exception as e:\n            json_str = f\"Error parsing data: {e}\"\n        data.json(json_str)\n\n        try:\n            json_str = orjson_dumps(dict_data.data_schema)\n        except Exception as e:\n            json_str = f\"Error parsing schema: {e}\"\n        schema.json(json_str)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.DictPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.DictPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.DictPreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"dict\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.DictPreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n    _value = self.api.get_value(options.value)\n    dict_data: KiaraDict = _value.data\n\n    data, schema = st.tabs([\"Data\", \"Schema\"])\n\n    try:\n        json_str = orjson_dumps(dict_data.dict_data)\n    except Exception as e:\n        json_str = f\"Error parsing data: {e}\"\n    data.json(json_str)\n\n    try:\n        json_str = orjson_dumps(dict_data.data_schema)\n    except Exception as e:\n        json_str = f\"Error parsing schema: {e}\"\n    schema.json(json_str)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.ListPreview","title":"<code>ListPreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'list'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>class ListPreview(PreviewComponent):\n\"\"\"Preview a value of type 'list'.\"\"\"\n\n    _component_name = \"preview_list\"\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"list\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n        _value = self.api.get_value(options.value)\n        list_data: KiaraList = _value.data\n\n        data, schema = st.tabs([\"Data\", \"Schema\"])\n\n        try:\n            json_str = orjson_dumps(list_data.list_data)\n        except Exception as e:\n            json_str = f\"Error parsing data: {e}\"\n        data.json(json_str)\n\n        try:\n            json_str = orjson_dumps(list_data.item_schema)\n        except Exception as e:\n            json_str = f\"Error parsing schema: {e}\"\n        schema.json(json_str)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.ListPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.ListPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.ListPreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"list\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.ListPreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n    _value = self.api.get_value(options.value)\n    list_data: KiaraList = _value.data\n\n    data, schema = st.tabs([\"Data\", \"Schema\"])\n\n    try:\n        json_str = orjson_dumps(list_data.list_data)\n    except Exception as e:\n        json_str = f\"Error parsing data: {e}\"\n    data.json(json_str)\n\n    try:\n        json_str = orjson_dumps(list_data.item_schema)\n    except Exception as e:\n        json_str = f\"Error parsing schema: {e}\"\n    schema.json(json_str)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FileBundlePreview","title":"<code>FileBundlePreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'file_bundle'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>class FileBundlePreview(PreviewComponent):\n\"\"\"Preview a value of type 'file_bundle'.\"\"\"\n\n    _component_name = \"preview_file_bundle\"\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"file_bundle\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n        _value = self.api.get_value(options.value)\n        bundle: KiaraFileBundle = _value.data\n\n        table: Dict[str, Any] = {}\n        for file_path, file_info in bundle.included_files.items():\n            table.setdefault(\"path\", []).append(file_path)\n            table.setdefault(\"size\", []).append(file_info.size)\n            table.setdefault(\"mime-type\", []).append(file_info.mime_type)\n\n        st.dataframe(table, use_container_width=True, hide_index=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FileBundlePreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FileBundlePreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FileBundlePreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"file_bundle\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FileBundlePreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n    _value = self.api.get_value(options.value)\n    bundle: KiaraFileBundle = _value.data\n\n    table: Dict[str, Any] = {}\n    for file_path, file_info in bundle.included_files.items():\n        table.setdefault(\"path\", []).append(file_path)\n        table.setdefault(\"size\", []).append(file_info.size)\n        table.setdefault(\"mime-type\", []).append(file_info.mime_type)\n\n    st.dataframe(table, use_container_width=True, hide_index=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FilePreview","title":"<code>FilePreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'file'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>class FilePreview(PreviewComponent):\n\"\"\"Preview a value of type 'file'.\"\"\"\n\n    _component_name = \"preview_file\"\n    _examples = [{\"doc\": \"A file preview.\", \"args\": {\"value\": \"nodes_file\"}}]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"file\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n        _value = self.api.get_value(options.value)\n        file_model: KiaraFile = _value.data\n\n        _key = options.create_key(\"file\", \"preview\", file_model.path)\n\n        if options.display_style == \"default\":\n            # TODO: check if binary file?\n            max_lines = 100\n            with open(file_model.path, \"rt\") as f:\n                if max_lines &lt;= 0:\n                    content = f.read()\n                else:\n                    lines = []\n                    idx = 0\n                    while idx &lt; max_lines:\n                        lines.append(f.readline())\n                        idx += 1\n\n                    if idx &gt;= max_lines:\n                        lines.append(\"...\\n\")\n                        lines.append(\"...\")\n                    content = \"\".join(lines)\n            stx.scrollableTextbox(content, height=150, fontFamily=\"monospace\", key=_key)\n\n        elif options.display_style == \"metadata\":\n\n            table: Dict[str, Any] = {\"key\": [], \"value\": []}\n            table[\"key\"].append(\"path\")\n            table[\"value\"].append(file_model.path)\n            table[\"key\"].append(\"size\")\n            table[\"value\"].append(humanfriendly.format_size(file_model.size))\n            table[\"key\"].append(\"mime-type\")\n            table[\"value\"].append(file_model.mime_type)\n            table[\"key\"].append(\"content\")\n            table[\"value\"].append(file_model.read_text())\n            st.dataframe(table, hide_index=True)\n        else:\n            raise Exception(\n                f\"Unknown display style for file preview: {options.display_style}\"\n            )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FilePreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FilePreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FilePreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"file\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FilePreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n    _value = self.api.get_value(options.value)\n    file_model: KiaraFile = _value.data\n\n    _key = options.create_key(\"file\", \"preview\", file_model.path)\n\n    if options.display_style == \"default\":\n        # TODO: check if binary file?\n        max_lines = 100\n        with open(file_model.path, \"rt\") as f:\n            if max_lines &lt;= 0:\n                content = f.read()\n            else:\n                lines = []\n                idx = 0\n                while idx &lt; max_lines:\n                    lines.append(f.readline())\n                    idx += 1\n\n                if idx &gt;= max_lines:\n                    lines.append(\"...\\n\")\n                    lines.append(\"...\")\n                content = \"\".join(lines)\n        stx.scrollableTextbox(content, height=150, fontFamily=\"monospace\", key=_key)\n\n    elif options.display_style == \"metadata\":\n\n        table: Dict[str, Any] = {\"key\": [], \"value\": []}\n        table[\"key\"].append(\"path\")\n        table[\"value\"].append(file_model.path)\n        table[\"key\"].append(\"size\")\n        table[\"value\"].append(humanfriendly.format_size(file_model.size))\n        table[\"key\"].append(\"mime-type\")\n        table[\"value\"].append(file_model.mime_type)\n        table[\"key\"].append(\"content\")\n        table[\"value\"].append(file_model.read_text())\n        st.dataframe(table, hide_index=True)\n    else:\n        raise Exception(\n            f\"Unknown display style for file preview: {options.display_style}\"\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.BooleanPreview","title":"<code>BooleanPreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'boolean'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>class BooleanPreview(PreviewComponent):\n\"\"\"Preview a value of type 'boolean'.\"\"\"\n\n    _component_name = \"preview_boolean\"\n\n    @classmethod\n    def get_data_type(self) -&gt; str:\n        return \"boolean\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n        _value = self.api.get_value(options.value)\n        if _value.data is True:\n            st.write(\"true\")\n        else:\n            st.write(\"false\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.BooleanPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.BooleanPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.BooleanPreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>@classmethod\ndef get_data_type(self) -&gt; str:\n    return \"boolean\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.BooleanPreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n    _value = self.api.get_value(options.value)\n    if _value.data is True:\n        st.write(\"true\")\n    else:\n        st.write(\"false\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.StringPreview","title":"<code>StringPreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'string'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>class StringPreview(PreviewComponent):\n\"\"\"Preview a value of type 'string'.\"\"\"\n\n    _component_name = \"preview_string\"\n\n    @classmethod\n    def get_data_type(self) -&gt; str:\n        return \"string\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n        _value = self.api.get_value(options.value)\n        text = _value.data\n        st.text_area(\n            label=\"The string content\",\n            value=text,\n            disabled=True,\n            label_visibility=\"hidden\",\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.StringPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.StringPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.StringPreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>@classmethod\ndef get_data_type(self) -&gt; str:\n    return \"string\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.StringPreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n    _value = self.api.get_value(options.value)\n    text = _value.data\n    st.text_area(\n        label=\"The string content\",\n        value=text,\n        disabled=True,\n        label_visibility=\"hidden\",\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.IntegerPreview","title":"<code>IntegerPreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'integer'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>class IntegerPreview(PreviewComponent):\n\"\"\"Preview a value of type 'integer'.\"\"\"\n\n    _component_name = \"preview_integer\"\n\n    @classmethod\n    def get_data_type(self) -&gt; str:\n        return \"integer\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n        _value = self.api.get_value(options.value)\n        text = _value.data\n        st.text_input(label=\"The integer value\", value=str(text), disabled=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.IntegerPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.IntegerPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.IntegerPreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>@classmethod\ndef get_data_type(self) -&gt; str:\n    return \"integer\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.IntegerPreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n    _value = self.api.get_value(options.value)\n    text = _value.data\n    st.text_input(label=\"The integer value\", value=str(text), disabled=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FloatPreview","title":"<code>FloatPreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'float'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>class FloatPreview(PreviewComponent):\n\"\"\"Preview a value of type 'float'.\"\"\"\n\n    _component_name = \"preview_float\"\n\n    @classmethod\n    def get_data_type(self) -&gt; str:\n        return \"float\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n        _value = self.api.get_value(options.value)\n        text = _value.data\n        st.text_input(label=\"The float value\", value=str(text), disabled=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FloatPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FloatPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FloatPreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>@classmethod\ndef get_data_type(self) -&gt; str:\n    return \"float\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.FloatPreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n    _value = self.api.get_value(options.value)\n    text = _value.data\n    st.text_input(label=\"The float value\", value=str(text), disabled=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.NonePreview","title":"<code>NonePreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a none-type value, you should not need this'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>class NonePreview(PreviewComponent):\n\"\"\"Preview a none-type value, you should not need this'.\"\"\"\n\n    _component_name = \"preview_none\"\n\n    @classmethod\n    def get_data_type(self) -&gt; str:\n        return \"none\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n        st.write(\"-- value not set --\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.NonePreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.NonePreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.NonePreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>@classmethod\ndef get_data_type(self) -&gt; str:\n    return \"none\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/core_types/#kiara_plugin.streamlit.components.preview.core_types.NonePreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/core_types.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions) -&gt; None:\n\n    st.write(\"-- value not set --\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/","title":"tabular","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.ArrayPreview","title":"<code>ArrayPreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'array'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>class ArrayPreview(PreviewComponent):\n\"\"\"Preview a value of type 'array'.\"\"\"\n\n    _component_name = \"preview_array\"\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"array\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n        _value = self.api.get_value(options.value)\n        table: KiaraArray = _value.data\n\n        st.dataframe(table.to_pandas(), use_container_width=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.ArrayPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.ArrayPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.ArrayPreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"array\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.ArrayPreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n    _value = self.api.get_value(options.value)\n    table: KiaraArray = _value.data\n\n    st.dataframe(table.to_pandas(), use_container_width=True)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.TablePreview","title":"<code>TablePreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'table'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>class TablePreview(PreviewComponent):\n\"\"\"Preview a value of type 'table'.\"\"\"\n\n    _component_name = \"preview_table\"\n\n    _examples = [\n        {\"doc\": \"A table preview.\", \"args\": {\"value\": \"nodes_table\"}},\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"table\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n        _value = self.api.get_value(options.value)\n        table: KiaraTable = _value.data\n\n        st.dataframe(\n            table.to_pandas_dataframe(),\n            use_container_width=True,\n            hide_index=True,\n            height=options.height,\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.TablePreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.TablePreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.TablePreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"table\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.TablePreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n    _value = self.api.get_value(options.value)\n    table: KiaraTable = _value.data\n\n    st.dataframe(\n        table.to_pandas_dataframe(),\n        use_container_width=True,\n        hide_index=True,\n        height=options.height,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.DatabasePreview","title":"<code>DatabasePreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'database'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>class DatabasePreview(PreviewComponent):\n\"\"\"Preview a value of type 'database'.\"\"\"\n\n    _component_name = \"preview_database\"\n    _examples = [\n        {\"doc\": \"A database preview.\", \"args\": {\"value\": \"journals_database\"}},\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"database\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n        _value = self.api.get_value(options.value)\n        db: KiaraDatabase = _value.data\n        tabs = st.tabs(list(db.table_names))\n\n        for idx, table_name in enumerate(db.table_names):\n            # TODO: this is probably not ideal, as it always loads all tables because\n            # of how tabs are implemented in streamlit\n            # maybe there is an easy way to do this better, otherwise, maybe not use tabs\n            table = db.get_table_as_pandas_df(table_name)\n            tabs[idx].dataframe(\n                table, use_container_width=True, hide_index=True, height=options.height\n            )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.DatabasePreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.DatabasePreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.DatabasePreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"database\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.DatabasePreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n    _value = self.api.get_value(options.value)\n    db: KiaraDatabase = _value.data\n    tabs = st.tabs(list(db.table_names))\n\n    for idx, table_name in enumerate(db.table_names):\n        # TODO: this is probably not ideal, as it always loads all tables because\n        # of how tabs are implemented in streamlit\n        # maybe there is an easy way to do this better, otherwise, maybe not use tabs\n        table = db.get_table_as_pandas_df(table_name)\n        tabs[idx].dataframe(\n            table, use_container_width=True, hide_index=True, height=options.height\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.TablesPreview","title":"<code>TablesPreview</code>","text":"<p>         Bases: <code>PreviewComponent</code></p> <p>Preview a value of type 'tables'.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>class TablesPreview(PreviewComponent):\n\"\"\"Preview a value of type 'tables'.\"\"\"\n\n    _component_name = \"preview_tables\"\n    _examples = [\n        {\"doc\": \"A tables preview.\", \"args\": {\"value\": \"journals_tables\"}},\n    ]\n\n    @classmethod\n    def get_data_type(cls) -&gt; str:\n        return \"tables\"\n\n    def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n        _value = self.api.get_value(options.value)\n        tables: KiaraTables = _value.data\n        tabs = st.tabs(tables.table_names)\n\n        for idx, table_name in enumerate(tables.table_names):\n            # TODO: this is probably not ideal, as it always loads all tables because\n            # of how tabs are implemented in streamlit\n            # maybe there is an easy way to do this better, otherwise, maybe not use tabs\n            table = tables.get_table(table_name).to_pandas_dataframe()\n            tabs[idx].dataframe(\n                table, use_container_width=True, hide_index=True, height=options.height\n            )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.TablesPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.TablesPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.TablesPreview.get_data_type","title":"<code>get_data_type() -&gt; str</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>@classmethod\ndef get_data_type(cls) -&gt; str:\n    return \"tables\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/preview/tabular/#kiara_plugin.streamlit.components.preview.tabular.TablesPreview.render_preview","title":"<code>render_preview(st: KiaraStreamlitAPI, options: PreviewOptions)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/preview/tabular.py</code> <pre><code>def render_preview(self, st: \"KiaraStreamlitAPI\", options: PreviewOptions):\n\n    _value = self.api.get_value(options.value)\n    tables: KiaraTables = _value.data\n    tabs = st.tabs(tables.table_names)\n\n    for idx, table_name in enumerate(tables.table_names):\n        # TODO: this is probably not ideal, as it always loads all tables because\n        # of how tabs are implemented in streamlit\n        # maybe there is an easy way to do this better, otherwise, maybe not use tabs\n        table = tables.get_table(table_name).to_pandas_dataframe()\n        tabs[idx].dataframe(\n            table, use_container_width=True, hide_index=True, height=options.height\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/","title":"workflow","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.KIARA_METADATA","title":"<code>KIARA_METADATA = {'description': 'Kiara streamlit compoents to work with workflows', 'tags': ['workflows'], 'labels': {'package': 'kiara_plugin.core_types'}}</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowSession","title":"<code>WorkflowSession</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/__init__.py</code> <pre><code>class WorkflowSession(BaseModel):\n    class Config:\n        arbitrary_types_allowed = True\n\n    workflow: Workflow = Field(description=\"The workflow instance.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowSession-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowSession.workflow","title":"<code>workflow: Workflow = Field(description='The workflow instance.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowSession-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowSession.Config","title":"<code>Config</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/__init__.py</code> <pre><code>class Config:\n    arbitrary_types_allowed = True\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowSession.Config-attributes","title":"Attributes","text":"<code>arbitrary_types_allowed = True</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowOptions","title":"<code>WorkflowOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/__init__.py</code> <pre><code>class WorkflowOptions(ComponentOptions):\n\n    session: WorkflowSession = Field(description=\"The current workflow session.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowOptions.session","title":"<code>session: WorkflowSession = Field(description='The current workflow session.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowComponent","title":"<code>WorkflowComponent</code>","text":"<p>         Bases: <code>KiaraComponent</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/__init__.py</code> <pre><code>class WorkflowComponent(KiaraComponent):\n\n    _options = WorkflowOptions\n    _component_type = \"workflow\"\n\n    def _render(self, st: \"KiaraStreamlitAPI\", options: WorkflowOptions):\n\n        from kiara_plugin.streamlit.components.workflow.dynamic import (\n            WorkflowSessionDynamic,\n        )\n        from kiara_plugin.streamlit.components.workflow.static import (\n            WorkflowSessionStatic,\n        )\n\n        if isinstance(options.session, WorkflowSessionStatic):\n            comp = self.get_component(\"workflow_static\")\n            return comp._render(st, options)\n        elif isinstance(options.session, WorkflowSessionDynamic):\n            comp = self.get_component(\"workflow_dynamic\")\n            return comp._render(st, options=options)\n        else:\n            raise Exception(f\"Invalid workflow session type '{type(options.session)}'.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/__init__/#kiara_plugin.streamlit.components.workflow.WorkflowComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/","title":"dynamic","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.LEFT_COLUMN","title":"<code>LEFT_COLUMN = 1</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.RIGHT_COLUMN","title":"<code>RIGHT_COLUMN = 4</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic","title":"<code>WorkflowSessionDynamic</code>","text":"<p>         Bases: <code>WorkflowSession</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/__init__.py</code> <pre><code>class WorkflowSessionDynamic(WorkflowSession):\n\n    initial_value: Union[None, Value] = Field(\n        description=\"The initial value for workflow.\", default=None\n    )\n    current_value: Union[None, Value] = Field(\n        description=\"The current value for the next step.\", default=None\n    )\n\n    input_values: Dict[int, Dict[str, Value]] = Field(\n        description=\"The values that are already set for this workflow.\",\n        default_factory=dict,\n    )\n    output_values: Dict[int, Dict[str, Value]] = Field(\n        description=\"The values that are already set for this workflow.\",\n        default_factory=dict,\n    )\n    operations: Dict[int, OperationInfo] = Field(\n        description=\"The operations for each step.\", default_factory=dict\n    )\n    pipeline_steps: List[str] = Field(\n        description=\"The steps that were added to this workflow, in order.\",\n        default_factory=list,\n    )\n    last_step_processed: bool = Field(\n        description=\"Whether the last step was valid.\", default=False\n    )\n    last_operation: Union[None, OperationInfo] = Field(\n        description=\"The last operation that was selected.\", default=None\n    )\n    current_outputs: Union[None, Dict[str, Value]] = Field(\n        description=\"The outputs of the last operation (if applicable).\", default=None\n    )\n\n    def reset(self, workflow: Workflow):\n\n        self.initial_value = None\n        self.current_value = None\n        self.input_values = {}\n        self.output_values = {}\n        self.operations = {}\n        self.pipeline_steps = []\n        self.workflow = workflow\n        self.last_step_processed = False\n        self.current_outputs = None\n        self.last_operation = None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic.initial_value","title":"<code>initial_value: Union[None, Value] = Field(description='The initial value for workflow.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic.current_value","title":"<code>current_value: Union[None, Value] = Field(description='The current value for the next step.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic.input_values","title":"<code>input_values: Dict[int, Dict[str, Value]] = Field(description='The values that are already set for this workflow.', default_factory=dict)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic.output_values","title":"<code>output_values: Dict[int, Dict[str, Value]] = Field(description='The values that are already set for this workflow.', default_factory=dict)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic.operations","title":"<code>operations: Dict[int, OperationInfo] = Field(description='The operations for each step.', default_factory=dict)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic.pipeline_steps","title":"<code>pipeline_steps: List[str] = Field(description='The steps that were added to this workflow, in order.', default_factory=list)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic.last_step_processed","title":"<code>last_step_processed: bool = Field(description='Whether the last step was valid.', default=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic.last_operation","title":"<code>last_operation: Union[None, OperationInfo] = Field(description='The last operation that was selected.', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic.current_outputs","title":"<code>current_outputs: Union[None, Dict[str, Value]] = Field(description='The outputs of the last operation (if applicable).', default=None)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/__init__/#kiara_plugin.streamlit.components.workflow.dynamic.WorkflowSessionDynamic.reset","title":"<code>reset(workflow: Workflow)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/__init__.py</code> <pre><code>def reset(self, workflow: Workflow):\n\n    self.initial_value = None\n    self.current_value = None\n    self.input_values = {}\n    self.output_values = {}\n    self.operations = {}\n    self.pipeline_steps = []\n    self.workflow = workflow\n    self.last_step_processed = False\n    self.current_outputs = None\n    self.last_operation = None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/","title":"components","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.DYN_WORKFLOW_OPTIONS_TYPE","title":"<code>DYN_WORKFLOW_OPTIONS_TYPE = TypeVar('DYN_WORKFLOW_OPTIONS_TYPE', bound=DynamicWorkflowOptions)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.DynamicWorkflowOptions","title":"<code>DynamicWorkflowOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class DynamicWorkflowOptions(ComponentOptions):\n\n    session: WorkflowSessionDynamic = Field(description=\"The current workflow session.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.DynamicWorkflowOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.DynamicWorkflowOptions.session","title":"<code>session: WorkflowSessionDynamic = Field(description='The current workflow session.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.DynamicWorkflowOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.DynamicWorkflowComponent","title":"<code>DynamicWorkflowComponent</code>","text":"<p>         Bases: <code>KiaraComponent[DYN_WORKFLOW_OPTIONS_TYPE]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class DynamicWorkflowComponent(KiaraComponent[DYN_WORKFLOW_OPTIONS_TYPE]):\n\n    # _component_name = \"dynamic_workflow\"\n    _options = DynamicWorkflowOptions  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.DynamicWorkflowComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.DynamicWorkflowComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.StepDetailsOptions","title":"<code>StepDetailsOptions</code>","text":"<p>         Bases: <code>DynamicWorkflowOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class StepDetailsOptions(DynamicWorkflowOptions):\n\n    step_id: str = Field(description=\"The id of the step to show details for.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.StepDetailsOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.StepDetailsOptions.step_id","title":"<code>step_id: str = Field(description='The id of the step to show details for.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.StepDetailsOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.WriteStepComponent","title":"<code>WriteStepComponent</code>","text":"<p>         Bases: <code>DynamicWorkflowComponent</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class WriteStepComponent(DynamicWorkflowComponent):\n\n    _component_name = \"write_step_details\"\n    _options = StepDetailsOptions  # type: ignore\n\n    def _render(self, st: \"KiaraStreamlitAPI\", options: StepDetailsOptions):\n\n        idx = options.session.pipeline_steps.index(options.step_id)\n\n        with st.expander(\"Operation\", expanded=False):\n            operation_id = options.session.operations[idx].operation.operation_id\n            comp = self._kiara_streamlit.get_component(\"operation_info\")\n            comp.render_func(st)(\n                operation_id, key=options.create_key(options.step_id, \"operation_info\")\n            )\n\n        with st.expander(\"Inputs\", expanded=False):\n            field_names = list(options.session.input_values[idx].keys())\n            tabs = st.tabs([x.split(\"__\")[-1] for x in field_names])\n            for idx, field in enumerate(field_names):\n                # _key = options.create_key(\"input\", \"preview\", field)\n                # self.kiara_streamlit.preview(key=_key, value=value)\n                comp = self.get_component(\"preview\")\n                _key = options.create_key(options.step_id, \"input\", \"value\", field)\n                value = options.session.input_values[idx][field]\n                comp.render_func(tabs[idx])(key=_key, value=value)\n\n        with st.expander(\"Outputs\", expanded=False):\n            field_names = list(options.session.output_values[idx].keys())\n            tabs = st.tabs([x.split(\"__\")[-1] for x in field_names])\n            for idx, field in enumerate(field_names):\n                comp = self.get_component(\"preview\")\n                _key = options.create_key(options.step_id, \"output\", \"value\", field)\n                value = options.session.output_values[idx][field]\n                comp.render_func(tabs[idx])(key=_key, value=value)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.WriteStepComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.WriteStepComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepOptions","title":"<code>NextStepOptions</code>","text":"<p>         Bases: <code>DynamicWorkflowOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class NextStepOptions(DynamicWorkflowOptions):\n    class Config:\n        arbitrary_types_allowed = True\n\n    value: Value = Field(description=\"The value to use for the next step.\")\n    columns: Union[Tuple[int, int], Tuple[DeltaGenerator, DeltaGenerator]] = Field(\n        description=\"The column layout to use for the next step.\", default=(1, 4)\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepOptions.value","title":"<code>value: Value = Field(description='The value to use for the next step.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepOptions.columns","title":"<code>columns: Union[Tuple[int, int], Tuple[DeltaGenerator, DeltaGenerator]] = Field(description='The column layout to use for the next step.', default=(1, 4))</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepOptions-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepOptions.Config","title":"<code>Config</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class Config:\n    arbitrary_types_allowed = True\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepOptions.Config-attributes","title":"Attributes","text":"<code>arbitrary_types_allowed = True</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepComponent","title":"<code>NextStepComponent</code>","text":"<p>         Bases: <code>DynamicWorkflowComponent</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class NextStepComponent(DynamicWorkflowComponent):\n\n    _component_name = \"ask_next_step\"\n    _options = NextStepOptions\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: NextStepOptions\n    ) -&gt; Tuple[Union[Operation, None], Union[str, None]]:\n\n        value = options.value\n\n        if isinstance(options.columns[0], int):\n            left, right = st.columns(options.columns)\n        else:\n            left, right = options.columns\n\n        operations = self.api.retrieve_operations_info(input_types=value.data_type_name)\n        all_tags = set()\n        for op in operations.item_infos.values():\n            all_tags.update(op.context.tags)\n\n        left.markdown(\"**Select next step**\")\n\n        selectbox_placeholder = left.empty()\n\n        expander = left.expander(\"Filter available operations\", expanded=False)\n        with expander:\n            op_filter = st.text_input(\n                label=\"filter tokens\",\n                value=\"\",\n                key=options.create_key(\"filter\", \"value\"),\n            )\n            selected_tags = st.multiselect(\n                label=\"Tags\", options=all_tags, key=options.create_key(\"tags\")\n            )\n\n        ops = dict(operations.item_infos)\n        if op_filter:\n            temp = {}\n            for op_id, op in ops.items():\n                if op_filter in op_id:\n                    temp[op_id] = op\n            ops = temp\n        if selected_tags:\n            temp = {}\n            for op_id, op in ops.items():\n                match = True\n                for tag in selected_tags:\n                    if tag not in op.context.tags:\n                        match = False\n                        break\n                if match:\n                    temp[op_id] = op\n            ops = temp\n\n        with selectbox_placeholder.container():\n            selected = st.selectbox(\n                label=\"Operation\",\n                options=sorted(ops.keys()),\n                key=options.create_key(\"operation_select\"),\n            )\n            show_op_details = st.checkbox(\"Show operation details\", value=False)\n            if selected:\n                right.write(\"\")\n                right.write(\"\")\n                if show_op_details:\n                    with right:\n                        with st.expander(\"Operation details\", expanded=True):\n                            self.kiara_streamlit.operation_info(selected)\n                st.write(operations[selected].documentation.description)\n\n                field_name_placeholder = st.empty()\n                field_name_desc_placeholder = st.empty()\n\n                matches = {}\n                for field_name, schema in operations[\n                    selected\n                ].operation.inputs_schema.items():\n                    if schema.type == value.data_type_name:\n                        matches[field_name] = schema\n\n                if not matches:\n                    raise Exception(\n                        \"No matching inputs found for value, this is most likely a bug.\"\n                    )\n                elif len(matches) == 1:\n                    field_name = next(iter(matches.keys()))\n                else:\n                    field_name = field_name_placeholder.selectbox(\n                        label=\"Select input field to use for value\",\n                        options=sorted(matches.keys()),\n                    )\n                    field_name_desc_placeholder.markdown(\n                        matches[field_name].doc.description\n                    )\n\n                return operations[selected], field_name\n            else:\n                return None, None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.NextStepComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.StepInputFields","title":"<code>StepInputFields</code>","text":"<p>         Bases: <code>DynamicWorkflowComponent</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class StepInputFields(DynamicWorkflowComponent):\n    class Config:\n        arbitrary_types_allowed = True\n\n    _component_name = \"step_input_fields\"\n    _options = StepDetailsOptions\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: StepDetailsOptions\n    ) -&gt; Dict[str, Value]:\n\n        step_id = options.step_id\n        idx = options.session.pipeline_steps.index(step_id)\n        workflow = options.session.workflow\n\n        fixed_input = options.session.input_values[idx]\n        assert len(fixed_input) == 1\n        field_name = next(iter(fixed_input.keys()))\n        value = fixed_input[field_name]\n\n        missing_fields = {}\n        for _f, schema in workflow.get_current_inputs_schema_for_step(step_id).items():\n            if _f == field_name:\n                continue\n            missing_fields[_f] = schema\n\n        step = workflow.get_step(step_id)\n        _key = options.create_key(\"missing_inputs_step\", step.step_id)\n\n        with st.expander(label=\"Provide missing operation inputs\", expanded=True):\n            if not missing_fields:\n                st.write(\"No additional inputs necessary.\")\n                new_inputs = {}\n            else:\n                comp = self.kiara_streamlit.get_component(\"inputs_for_fields\")\n                _key = options.create_key(\"missing_inputs_fields\", step.step_id)\n                new_inputs = comp.render_func(st)(key=_key, fields=missing_fields)\n\n        assert field_name not in new_inputs\n        result = {field_name: value}\n        for k, v in new_inputs.items():\n            result[k] = v\n\n        return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.StepInputFields-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.StepInputFields-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.StepInputFields.Config","title":"<code>Config</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class Config:\n    arbitrary_types_allowed = True\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.StepInputFields.Config-attributes","title":"Attributes","text":"<code>arbitrary_types_allowed = True</code> <code>instance-attribute</code> <code>class-attribute</code> \u00b6"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.StepInputFields-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.CurrentValuesPreviewOptions","title":"<code>CurrentValuesPreviewOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class CurrentValuesPreviewOptions(ComponentOptions):\n    values: Mapping[str, Value] = Field(description=\"The values to display.\")\n    add_value_types: bool = Field(\n        description=\"Whether to add the type of the value to the tab titles.\",\n        default=True,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.CurrentValuesPreviewOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.CurrentValuesPreviewOptions.values","title":"<code>values: Mapping[str, Value] = Field(description='The values to display.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.CurrentValuesPreviewOptions.add_value_types","title":"<code>add_value_types: bool = Field(description='Whether to add the type of the value to the tab titles.', default=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.CurrentValuesPreviewOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.CurrentValuesPreview","title":"<code>CurrentValuesPreview</code>","text":"<p>         Bases: <code>KiaraComponent[CurrentValuesPreviewOptions]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/components.py</code> <pre><code>class CurrentValuesPreview(KiaraComponent[CurrentValuesPreviewOptions]):\n\n    _component_name = \"current_values_preview\"\n    _options = CurrentValuesPreviewOptions\n\n    def _render(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        options: CurrentValuesPreviewOptions,\n    ) -&gt; Union[Value, None]:\n\n        if not options.values:\n            st.write(\"-- no values --\")\n            return None\n\n        field_names = sorted(options.values.keys())\n        if not options.add_value_types:\n            tab_names = field_names\n        else:\n            tab_names = sorted(\n                (\n                    f\"{x} ({options.values[x].data_type_name})\"\n                    for x in options.values.keys()\n                )\n            )\n\n        tabs = st.tabs(tab_names)\n        selected = None\n        for idx, field in enumerate(field_names):\n\n            value = options.values[field]\n            component = self.kiara_streamlit.get_preview_component(value.data_type_name)\n            if component is None:\n                component = self.kiara_streamlit.get_preview_component(\"any\")\n            left, center, right = tabs[idx].columns([1, 4, 1])\n\n            _key = options.create_key(\"select\", f\"{idx}_{field}\")\n            select = left.button(\"Select for next step\", key=_key)\n            _key = options.create_key(\"preview\", f\"{idx}_{field}\")\n            preview_opts = PreviewOptions(key=_key, value=value)\n            component.render_preview(st=center, options=preview_opts)  # type: ignore\n\n            right.write(\"Save value\")\n            with right.form(key=options.create_key(\"save_form\", f\"{idx}_{field}\")):\n                _key = options.create_key(\"alias\", f\"{idx}_{field}\")\n                alias = self._st.text_input(\n                    \"alias\",\n                    value=\"\",\n                    key=_key,\n                    placeholder=\"alias\",\n                    label_visibility=\"hidden\",\n                )\n                _key = options.create_key(\"save\", f\"{idx}_{field}\")\n                save = self._st.form_submit_button(\"Save\")\n\n            if save and alias:\n                store_result = self.api.store_value(\n                    value=value, alias=alias, allow_overwrite=False\n                )\n                if store_result.error:\n                    right.error(store_result.error)\n                else:\n                    right.success(\"Value saved\")\n            if select:\n                selected = field\n\n        if selected:\n            return options.values[selected]\n        else:\n            return None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.CurrentValuesPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/components/#kiara_plugin.streamlit.components.workflow.dynamic.components.CurrentValuesPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/","title":"workflow_page","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page.DynamicWorkflow","title":"<code>DynamicWorkflow</code>","text":"<p>         Bases: <code>KiaraComponent</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page.py</code> <pre><code>class DynamicWorkflow(KiaraComponent):\n\n    _component_name = \"workflow_dynamic\"\n    _options = DynamicWorkflowOptions\n\n    def remove_last_step(self, workflow_session: WorkflowSessionDynamic) -&gt; None:\n\n        if workflow_session.pipeline_steps:\n            idx = len(workflow_session.pipeline_steps) - 1\n            last_step = workflow_session.pipeline_steps.pop()\n            try:\n                workflow_session.input_values.pop(idx)\n            except Exception:\n                pass\n            try:\n                workflow_session.operations.pop(idx)\n            except Exception:\n                pass\n\n            try:\n                workflow_session.output_values.pop(idx)\n            except Exception:\n                pass\n            workflow_session.workflow.clear_steps(last_step)\n\n        workflow_session.last_step_processed = False\n\n    def write_workflow_details(\n        self, st: \"KiaraStreamlitAPI\", workflow_session: WorkflowSessionDynamic\n    ):\n\n        st.write(workflow_session.input_values)\n        st.write(workflow_session.pipeline_steps)\n\n    def add_step(\n        self,\n        workflow_session: WorkflowSessionDynamic,\n        operation: OperationInfo,\n    ) -&gt; None:\n\n        pipeline_step = workflow_session.workflow.add_step(\n            operation=operation.operation.operation_id\n        )\n\n        workflow_session.pipeline_steps.append(pipeline_step.step_id)\n\n        workflow_session.last_step_processed = False\n        workflow_session.current_outputs = None\n        workflow_session.last_operation = operation\n\n    def write_step_desc(\n        self, st: \"KiaraStreamlitAPI\", key: str, pipeline_step: PipelineStep\n    ) -&gt; None:\n\n        left, right = st.columns((1, 10))\n        left.write(\"Step description\")\n        doc = None\n        if not pipeline_step.doc.is_set:\n            op_id = self.api.find_operation_id(\n                pipeline_step.module_type, pipeline_step.module_config\n            )\n            if op_id is not None:\n                op = self.api.get_operation(op_id)\n                doc = op.doc\n        if not doc:\n            doc = DocumentationMetadataModel()\n        right.markdown(doc.full_doc)\n\n    def display_current_outputs(\n        self,\n        st: \"KiaraStreamlitAPI\",\n        key: str,\n        workflow_session: WorkflowSessionDynamic,\n        step_id: str,\n    ) -&gt; Union[None, Value]:\n\n        if workflow_session.current_outputs is None:\n\n            step_fields = workflow_session.workflow.get_current_outputs_schema_for_step(\n                step_id\n            )\n            outputs = {}\n            for field_name in step_fields.keys():\n                value = workflow_session.workflow.current_output_values.get_value_obj(\n                    field_name\n                )\n                smart_field_name = field_name.split(\"__\")[-1]\n                outputs[smart_field_name] = value\n\n            workflow_session.current_outputs = outputs\n\n        comp = self._kiara_streamlit.get_component(\"current_values_preview\")\n        selected_value = comp.render_func(st)(\n            key=f\"{key}_preview_result_{step_id}\",\n            values=workflow_session.current_outputs,\n        )\n        return selected_value\n\n    def write_columns(self, st: \"KiaraStreamlitAPI\") -&gt; List[DeltaGenerator]:\n\n        columns = st.columns((LEFT_COLUMN, RIGHT_COLUMN))\n        return columns\n\n    def write_separator(self, st: \"KiaraStreamlitAPI\") -&gt; None:\n\n        st.markdown(\"---\")\n\n    def _render(self, st: \"KiaraStreamlitAPI\", options: DynamicWorkflowOptions):\n\n        session: WorkflowSessionDynamic = options.session\n        if session.workflow is None:\n            session.workflow = self.api.create_workflow()\n\n        current_value: Union[None, Value] = session.current_value\n\n        left, right = self.write_columns(st)\n\n        if not current_value or (\n            len(session.pipeline_steps) == 1 and not session.last_step_processed\n        ):\n            # if we are at the beginning, without anything processed yet, we want to give\n            # Users the option to change the initial value\n\n            with left:\n                init_value: Value = self.kiara_streamlit.value_input(\n                    label=\"**Select initial value**\", preview=False\n                )\n\n            right.write(\"\")\n            right.write(\"\")\n            with right.expander(\"Value preview\", expanded=False):\n                if init_value:\n                    self.kiara_streamlit.preview(init_value)\n                else:\n                    st.write(\"-- no value --\")\n\n            if not init_value:\n                st.write(\"No value selected, doing nothing...\")\n                return\n            else:\n                session.current_value = init_value\n                if session.initial_value is None or len(session.pipeline_steps) &lt; 2:\n                    # we have to record the initial value, once\n                    session.initial_value = init_value\n                current_value = init_value\n        else:\n            assert session.initial_value is not None\n            left.markdown(f\"**Initial value** ({session.initial_value.data_type_name})\")\n            with right.expander(\"Value preview\", expanded=False):\n                if current_value:\n                    assert session.initial_value is not None\n                    self.kiara_streamlit.preview(session.initial_value)\n            reset = left.button(\"Reset\")\n            if reset:\n                workflow = self.api.create_workflow()\n                options.session.reset(workflow)\n                st.experimental_rerun()\n\n        self.write_separator(st)\n\n        # if there are previously computed steps, we want to print details about them here, so users can\n        # refer back to them\n\n        if session.pipeline_steps:\n            # skip if we have selected an operation, but haven't processed anything yet\n            if session.last_step_processed or len(session.pipeline_steps) &gt; 1:\n                left, right = self.write_columns(st)\n\n                # align vertically as good as possible\n                right.write()\n                right.write()\n\n                left.write(\"**Previous steps**\")\n                for idx, step_id in enumerate(session.pipeline_steps[0:-1]):\n                    step_details = right.expander(\n                        label=f\"Step {idx+1}: {step_id}\", expanded=False\n                    )\n                    _key = options.create_key(\"previous_step_details\", step_id)\n                    with step_details:\n                        self.kiara_streamlit.write_step_details(\n                            key=_key, step_id=step_id, session=session\n                        )\n\n                self.write_separator(st)\n                left, right = self.write_columns(st)\n\n                right.write()\n                right.write()\n                left.markdown(f\"**Current value** ({current_value.data_type_name})\")\n                with right.expander(\"Preview\", expanded=False):\n                    self._kiara_streamlit.preview(\n                        current_value, key=options.create_key(\"preview_current_value\")\n                    )\n\n        # now we want to ask for the next operation to apply to the current value\n        left, right = self.write_columns(st)\n\n        next_operation, field_name = self.kiara_streamlit.ask_next_step(\n            columns=(left, right),\n            value=current_value,\n            session=session,\n            key=options.create_key(\"ask_next_step\"),\n        )\n\n        # now we need to check if the operation itself changed during the last cycle\n        if session.last_operation:\n            if next_operation:\n                operation_changed = (\n                    session.last_operation.operation.operation_id\n                    != next_operation.operation.operation_id\n                )\n            else:\n                operation_changed = True\n        else:\n            operation_changed = True\n\n        if operation_changed:\n            if next_operation:\n                if not session.last_step_processed:\n                    self.remove_last_step(workflow_session=session)\n                self.add_step(\n                    workflow_session=session,\n                    operation=next_operation,\n                )\n                st.experimental_rerun()\n            else:\n                self.remove_last_step(workflow_session=session)\n                session.last_operation = next_operation\n\n        if not session.last_operation:\n            # if there is no loperation, there is nothing to do\n            return\n\n        if session.pipeline_steps:\n            pipeline_step = session.pipeline_steps[-1]\n        else:\n            pipeline_step = None\n\n        assert pipeline_step\n        assert current_value\n        assert field_name\n\n        name = generate_pipeline_endpoint_name(pipeline_step, field_name)\n        session.input_values[session.pipeline_steps.index(pipeline_step)] = {\n            name: current_value\n        }\n        session.operations[\n            session.pipeline_steps.index(pipeline_step)\n        ] = session.last_operation\n        session.workflow.clear_current_inputs_for_step(pipeline_step)\n\n        session.workflow.set_input(field_name=name, value=current_value)\n\n        with right:\n            _key = options.create_key(\"step_input_fields\", pipeline_step)\n            current_inputs = self.kiara_streamlit.step_input_fields(\n                key=_key, session=session, step_id=pipeline_step\n            )\n\n        try:\n            session.workflow.set_inputs(**current_inputs)\n        except Exception as e:\n            st.write(e)\n\n        # left, right = self.write_columns(st)\n\n        process = right.button(\"Process\")\n        if process:\n            with st.spinner(\"Processing...\"):  # type: ignore\n                errors = {}\n                try:\n                    session.last_step_processed = True\n                    session.current_outputs = None\n                    job_ids, errors = session.workflow.process_steps()\n                except Exception as e:\n                    right.error(e)\n\n                for _step_id, error in errors.items():\n                    right.error(error.error)\n            _key = options.create_key(\"display_current_outputs\")\n\n            step_fields = session.workflow.get_current_outputs_schema_for_step(\n                pipeline_step\n            )\n            temp = {}\n            for field_name in step_fields.keys():\n                value = session.workflow.current_output_values.get_value_obj(field_name)\n                temp[field_name] = value\n            session.output_values[session.pipeline_steps.index(pipeline_step)] = temp\n\n            selected_value = self.display_current_outputs(\n                right, key=_key, workflow_session=session, step_id=pipeline_step\n            )\n        elif session.last_step_processed:\n            _key = options.create_key(\"display_current_outputs\")\n            selected_value = self.display_current_outputs(\n                right, key=_key, workflow_session=session, step_id=pipeline_step  # type: ignore\n            )\n        else:\n            selected_value = None\n\n        if selected_value:\n            session.current_value = selected_value\n            session.last_operation = None\n            st.experimental_rerun()\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page.DynamicWorkflow-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page.DynamicWorkflow-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page.DynamicWorkflow.remove_last_step","title":"<code>remove_last_step(workflow_session: WorkflowSessionDynamic) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page.py</code> <pre><code>def remove_last_step(self, workflow_session: WorkflowSessionDynamic) -&gt; None:\n\n    if workflow_session.pipeline_steps:\n        idx = len(workflow_session.pipeline_steps) - 1\n        last_step = workflow_session.pipeline_steps.pop()\n        try:\n            workflow_session.input_values.pop(idx)\n        except Exception:\n            pass\n        try:\n            workflow_session.operations.pop(idx)\n        except Exception:\n            pass\n\n        try:\n            workflow_session.output_values.pop(idx)\n        except Exception:\n            pass\n        workflow_session.workflow.clear_steps(last_step)\n\n    workflow_session.last_step_processed = False\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page.DynamicWorkflow.write_workflow_details","title":"<code>write_workflow_details(st: KiaraStreamlitAPI, workflow_session: WorkflowSessionDynamic)</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page.py</code> <pre><code>def write_workflow_details(\n    self, st: \"KiaraStreamlitAPI\", workflow_session: WorkflowSessionDynamic\n):\n\n    st.write(workflow_session.input_values)\n    st.write(workflow_session.pipeline_steps)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page.DynamicWorkflow.add_step","title":"<code>add_step(workflow_session: WorkflowSessionDynamic, operation: OperationInfo) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page.py</code> <pre><code>def add_step(\n    self,\n    workflow_session: WorkflowSessionDynamic,\n    operation: OperationInfo,\n) -&gt; None:\n\n    pipeline_step = workflow_session.workflow.add_step(\n        operation=operation.operation.operation_id\n    )\n\n    workflow_session.pipeline_steps.append(pipeline_step.step_id)\n\n    workflow_session.last_step_processed = False\n    workflow_session.current_outputs = None\n    workflow_session.last_operation = operation\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page.DynamicWorkflow.write_step_desc","title":"<code>write_step_desc(st: KiaraStreamlitAPI, key: str, pipeline_step: PipelineStep) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page.py</code> <pre><code>def write_step_desc(\n    self, st: \"KiaraStreamlitAPI\", key: str, pipeline_step: PipelineStep\n) -&gt; None:\n\n    left, right = st.columns((1, 10))\n    left.write(\"Step description\")\n    doc = None\n    if not pipeline_step.doc.is_set:\n        op_id = self.api.find_operation_id(\n            pipeline_step.module_type, pipeline_step.module_config\n        )\n        if op_id is not None:\n            op = self.api.get_operation(op_id)\n            doc = op.doc\n    if not doc:\n        doc = DocumentationMetadataModel()\n    right.markdown(doc.full_doc)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page.DynamicWorkflow.display_current_outputs","title":"<code>display_current_outputs(st: KiaraStreamlitAPI, key: str, workflow_session: WorkflowSessionDynamic, step_id: str) -&gt; Union[None, Value]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page.py</code> <pre><code>def display_current_outputs(\n    self,\n    st: \"KiaraStreamlitAPI\",\n    key: str,\n    workflow_session: WorkflowSessionDynamic,\n    step_id: str,\n) -&gt; Union[None, Value]:\n\n    if workflow_session.current_outputs is None:\n\n        step_fields = workflow_session.workflow.get_current_outputs_schema_for_step(\n            step_id\n        )\n        outputs = {}\n        for field_name in step_fields.keys():\n            value = workflow_session.workflow.current_output_values.get_value_obj(\n                field_name\n            )\n            smart_field_name = field_name.split(\"__\")[-1]\n            outputs[smart_field_name] = value\n\n        workflow_session.current_outputs = outputs\n\n    comp = self._kiara_streamlit.get_component(\"current_values_preview\")\n    selected_value = comp.render_func(st)(\n        key=f\"{key}_preview_result_{step_id}\",\n        values=workflow_session.current_outputs,\n    )\n    return selected_value\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page.DynamicWorkflow.write_columns","title":"<code>write_columns(st: KiaraStreamlitAPI) -&gt; List[DeltaGenerator]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page.py</code> <pre><code>def write_columns(self, st: \"KiaraStreamlitAPI\") -&gt; List[DeltaGenerator]:\n\n    columns = st.columns((LEFT_COLUMN, RIGHT_COLUMN))\n    return columns\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page/#kiara_plugin.streamlit.components.workflow.dynamic.workflow_page.DynamicWorkflow.write_separator","title":"<code>write_separator(st: KiaraStreamlitAPI) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/dynamic/workflow_page.py</code> <pre><code>def write_separator(self, st: \"KiaraStreamlitAPI\") -&gt; None:\n\n    st.markdown(\"---\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/requirements/__init__/","title":"requirements","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/requirements/__init__/#kiara_plugin.streamlit.components.workflow.requirements-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/requirements/__init__/#kiara_plugin.streamlit.components.workflow.requirements.StepRequirementsOptions","title":"<code>StepRequirementsOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/requirements/__init__.py</code> <pre><code>class StepRequirementsOptions(ComponentOptions):\n    pass\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/requirements/__init__/#kiara_plugin.streamlit.components.workflow.requirements.StepRequirement","title":"<code>StepRequirement</code>","text":"<p>         Bases: <code>KiaraComponent[StepRequirementsOptions]</code></p> <p>A component to gather step requirements from users</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/requirements/__init__.py</code> <pre><code>class StepRequirement(KiaraComponent[StepRequirementsOptions]):\n\"\"\"A component to gather step requirements from users\"\"\"\n\n    _component_name = \"step_requirements\"\n    _options = StepRequirementsOptions\n\n    _examples = [{\"doc\": \"A simple example\", \"args\": {}}]\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: StepRequirementsOptions\n    ) -&gt; Union[None, DummyModuleConfig]:\n\n        st.write(\"INSIDE COMPONENT\")\n\n        _key = options.create_key(\"step_title\")\n        title = st.text_input(\"Step title\", key=_key)\n        _key = options.create_key(\"step_desc\")\n        desc = st.text_area(\"Step description\", key=_key)\n\n        _key = options.create_key(\"create_btn\")\n        inputs_schema = {\n            \"input_1\": {\n                \"type\": \"any\",\n                \"doc\": \"The first input\",\n                \"optional\": True,\n            }\n        }\n\n        outputs_schema = {\n            \"input_1\": {\n                \"type\": \"any\",\n                \"doc\": \"The step output\",\n            }\n        }\n\n        try:\n            config = DummyModuleConfig(\n                title=title,\n                inputs_schema=inputs_schema,\n                outputs_schema=outputs_schema,\n                desc=desc,\n            )  # type: ignore\n            return config\n        except Exception:\n            return None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/requirements/__init__/#kiara_plugin.streamlit.components.workflow.requirements.StepRequirement-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/requirements/__init__/#kiara_plugin.streamlit.components.workflow.requirements.StepRequirement-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/__init__/","title":"static","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/__init__/#kiara_plugin.streamlit.components.workflow.static-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/__init__/#kiara_plugin.streamlit.components.workflow.static.WorkflowSessionStatic","title":"<code>WorkflowSessionStatic</code>","text":"<p>         Bases: <code>WorkflowSession</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/static/__init__.py</code> <pre><code>class WorkflowSessionStatic(WorkflowSession):\n\n    current_stage: int = Field(\n        description=\"The current stage of the workflow.\", default=1\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/__init__/#kiara_plugin.streamlit.components.workflow.static.WorkflowSessionStatic-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/__init__/#kiara_plugin.streamlit.components.workflow.static.WorkflowSessionStatic.current_stage","title":"<code>current_stage: int = Field(description='The current stage of the workflow.', default=1)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/__init__/#kiara_plugin.streamlit.components.workflow.static.WorkflowSessionStatic-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/","title":"components","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.STATIC_WORKFLOW_OPTIONS_TYPE","title":"<code>STATIC_WORKFLOW_OPTIONS_TYPE = TypeVar('STATIC_WORKFLOW_OPTIONS_TYPE', bound=StaticWorkflowOptions)</code>  <code>module-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StaticWorkflowOptions","title":"<code>StaticWorkflowOptions</code>","text":"<p>         Bases: <code>ComponentOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/static/components.py</code> <pre><code>class StaticWorkflowOptions(ComponentOptions):\n\n    session: WorkflowSessionStatic = Field(description=\"The current workflow session.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StaticWorkflowOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StaticWorkflowOptions.session","title":"<code>session: WorkflowSessionStatic = Field(description='The current workflow session.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StaticWorkflowOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StaticWorkflowComponent","title":"<code>StaticWorkflowComponent</code>","text":"<p>         Bases: <code>KiaraComponent[STATIC_WORKFLOW_OPTIONS_TYPE]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/static/components.py</code> <pre><code>class StaticWorkflowComponent(KiaraComponent[STATIC_WORKFLOW_OPTIONS_TYPE]):\n\n    _options = StaticWorkflowOptions  # type: ignore\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StaticWorkflowComponent-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StaticWorkflowComponent-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StageOutputsPreviewOptions","title":"<code>StageOutputsPreviewOptions</code>","text":"<p>         Bases: <code>StaticWorkflowOptions</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/static/components.py</code> <pre><code>class StageOutputsPreviewOptions(StaticWorkflowOptions):\n\n    stage_idx: List[int] = Field(\n        description=\"The index of the stage(s) to preview the outputs for.\"\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StageOutputsPreviewOptions-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StageOutputsPreviewOptions.stage_idx","title":"<code>stage_idx: List[int] = Field(description='The index of the stage(s) to preview the outputs for.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.StageOutputsPreviewOptions-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.PreviousOutputsPreview","title":"<code>PreviousOutputsPreview</code>","text":"<p>         Bases: <code>StaticWorkflowComponent</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/static/components.py</code> <pre><code>class PreviousOutputsPreview(StaticWorkflowComponent):\n\n    _component_name = \"stage_outputs_preview\"\n    _options = StageOutputsPreviewOptions\n\n    def _render(\n        self, st: \"KiaraStreamlitAPI\", options: StageOutputsPreviewOptions\n    ) -&gt; Union[ValueMap, None]:\n\n        session = options.session\n        workflow = session.workflow\n        pipeline_structure = workflow.pipeline.structure\n\n        current_step_outputs: Dict[str, Dict[str, uuid.UUID]] = {}\n        for stage_idx in options.stage_idx:\n\n            stage = pipeline_structure.processing_stages[stage_idx - 1]\n\n            for step in stage:\n                for field, value_id in workflow.pipeline.get_current_step_outputs(\n                    step\n                ).items():\n                    current_step_outputs.setdefault(step, {})[field] = value_id\n\n        comp = self.get_component(\"value_map_preview\")\n\n        step_names = list(current_step_outputs.keys())\n        tabs = st.tabs(step_names)\n\n        for idx, step in enumerate(step_names):\n            values = current_step_outputs[step]\n            with tabs[idx]:\n                value_map = comp.render_func(st)(\n                    value_map=values,\n                    add_value_types=True,\n                    key=options.create_key(\"preview\", \"previous_stages_outputs\", step),\n                )\n\n        return value_map\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.PreviousOutputsPreview-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/components/#kiara_plugin.streamlit.components.workflow.static.components.PreviousOutputsPreview-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/workflow_page/","title":"workflow_page","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/workflow_page/#kiara_plugin.streamlit.components.workflow.static.workflow_page-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/workflow_page/#kiara_plugin.streamlit.components.workflow.static.workflow_page.WorkflowStatic","title":"<code>WorkflowStatic</code>","text":"<p>         Bases: <code>KiaraComponent[StaticWorkflowOptions]</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/components/workflow/static/workflow_page.py</code> <pre><code>class WorkflowStatic(KiaraComponent[StaticWorkflowOptions]):\n\n    _component_name = \"workflow_static\"\n    _options = StaticWorkflowOptions\n\n    def _render(self, st: \"KiaraStreamlitAPI\", options: StaticWorkflowOptions):\n\n        session = options.session\n        workflow = session.workflow\n        pipeline_structure: PipelineStructure = workflow.pipeline.structure\n        stages = pipeline_structure.processing_stages\n\n        no_input_stages = []\n        # calculate no-input stages\n        for stage_idx, stage in enumerate(stages, start=1):\n            _inputs: Dict[str, ValueSchema] = {}\n            for step in stage:\n                inputs = pipeline_structure.get_pipeline_inputs_schema_for_step(step)\n                _inputs.update(inputs)\n            if not _inputs:\n                no_input_stages.append(stage_idx)\n\n        left, center, right = st.columns([1, 6, 1])\n        prev_placeholder = left.empty()\n        next_placeholder = center.empty()\n        indicator_placeholder = right.empty()\n\n        if session.current_stage &lt; 1 or session.current_stage &gt; len(stages):\n            raise Exception(f\"Invalid stage index '{session.current_stage}'.\")\n\n        if session.current_stage &gt; 1:\n            stage_idx = session.current_stage - 1\n            previous_steps = stages[0:stage_idx]\n\n            all_outputs = {}\n            stages_to_preview = list(range(1, session.current_stage))\n            for stage in previous_steps:\n                for step in stage:\n                    outputs = workflow.pipeline.get_current_step_outputs(step)\n                    all_outputs.update({f\"{step}__{k}\": v for k, v in outputs.items()})\n\n            with st.expander(\"Outputs (previous stages)\", expanded=False):\n                comp = self.get_component(\"stage_outputs_preview\")\n                comp.render_func(st)(\n                    session=session,\n                    stage_idx=stages_to_preview,\n                    key=options.create_key(\"stage_outputs_preview\"),\n                )\n\n        current_steps = stages[session.current_stage - 1]\n\n        current_inputs: Dict[str, ValueSchema] = {}\n        for step in current_steps:\n            inputs = pipeline_structure.get_pipeline_inputs_schema_for_step(step)\n            current_inputs.update(inputs)\n\n        comp = self.get_component(\"inputs_for_fields\")\n        inputs = comp.render(st, current_inputs, smart_label=False)\n\n        workflow.set_inputs(**inputs)\n\n        # st.write(workflow.current_state.dict())\n        # step_states = workflow.current_state.pipeline_info.pipeline_state.step_states\n        # ready = True\n        # for step in current_steps:\n        #     if step_states[step].status != StepStatus.RESULTS_READY:\n        #         print(f\"NOT READY: {step}\")\n        #         ready = False\n        #         break\n\n        steps_to_process = []\n        stages_to_process = [session.current_stage]\n        for stage in stages[0 : session.current_stage]:\n            steps_to_process.append(stage)\n\n        cur = session.current_stage + 1\n\n        while cur in no_input_stages:\n            stages_to_process.append(cur)\n            steps_to_process.append(stages[cur - 1])\n            cur += 1\n\n        left, center, right = st.columns([1, 1, 6])\n        process_button = left.button(\"Process\")\n        if process_button:\n            with st.spinner(\"Processing...\"):  # type: ignore\n                for stage in steps_to_process:\n                    print(f\"PROCESSING STEPS: {stage}\")\n                    try:\n                        job_ids, errors = session.workflow.process_steps(*stage)\n                    except Exception as e:\n                        st.error(KiaraException.get_root_details(e))\n                        break\n\n                    for _step_id, error in errors.items():\n                        st.error(error.error)\n                    if errors:\n                        break\n\n        step_states = workflow.current_state.pipeline_info.pipeline_state.step_states\n        ready = True\n        for stage in steps_to_process:\n            for step in stage:\n                if step_states[step].status != StepStatus.RESULTS_READY:\n                    print(f\"NOT READY: {step}\")\n                    ready = False\n                    break\n\n        if session.current_stage + 1 &lt;= len(stages):\n            next_step_disabled = session.current_stage + 1 &gt; len(stages) or not ready\n            next_step_button = center.button(\"Next step\", disabled=next_step_disabled)\n            if next_step_button:\n                current = options.session.current_stage\n                if current + 1 &lt;= len(stages):\n                    new_stage = current + 1\n                    while new_stage in no_input_stages:\n                        new_stage += 1\n                    options.session.current_stage = new_stage\n                    self._st.experimental_rerun()\n\n        with st.expander(\"Current stage outputs\", expanded=True):\n\n            comp = self.get_component(\"stage_outputs_preview\")\n            comp.render_func(st)(\n                session=session,\n                stage_idx=stages_to_process,\n                key=options.create_key(\"stage_outputs_preview\"),\n            )\n\n        prev_disabled = session.current_stage - 1 &lt; 1\n        next_disabled = session.current_stage + 1 &gt; len(stages)\n\n        prev = prev_placeholder.button(\"Previous\", disabled=prev_disabled)\n        next = next_placeholder.button(\"Next\", disabled=next_disabled)\n\n        if prev:\n            current = options.session.current_stage\n            if current - 1 &gt;= 1:\n                new_stage = current - 1\n                while new_stage in no_input_stages:\n                    new_stage -= 1\n                options.session.current_stage = new_stage\n                self._st.experimental_rerun()\n\n        elif next:\n            current = options.session.current_stage\n            if current + 1 &lt;= len(stages):\n                new_stage = current + 1\n                while new_stage in no_input_stages:\n                    new_stage += 1\n                options.session.current_stage = new_stage\n                self._st.experimental_rerun()\n\n        actual_stage = session.current_stage\n        for s in no_input_stages:\n            if s &lt; actual_stage:\n                actual_stage -= 1\n        indicator_placeholder.markdown(\n            f\"Stage {actual_stage} of {len(stages)-len(no_input_stages)}\"\n        )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/workflow_page/#kiara_plugin.streamlit.components.workflow.static.workflow_page.WorkflowStatic-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/components/workflow/static/workflow_page/#kiara_plugin.streamlit.components.workflow.static.workflow_page.WorkflowStatic-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/interfaces/__init__/","title":"interfaces","text":""},{"location":"reference/kiara_plugin/streamlit/interfaces/cli/__init__/","title":"cli","text":""},{"location":"reference/kiara_plugin/streamlit/interfaces/cli/streamlit/","title":"streamlit","text":""},{"location":"reference/kiara_plugin/streamlit/interfaces/cli/streamlit/#kiara_plugin.streamlit.interfaces.cli.streamlit-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/interfaces/cli/streamlit/#kiara_plugin.streamlit.interfaces.cli.streamlit.streamlit","title":"<code>streamlit(ctx)</code>","text":"<p>Kiara context related sub-commands.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/interfaces/cli/streamlit.py</code> <pre><code>@click.group(\"streamlit\")\n@click.pass_context\ndef streamlit(ctx):\n\"\"\"Kiara context related sub-commands.\"\"\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/interfaces/cli/streamlit/#kiara_plugin.streamlit.interfaces.cli.streamlit.list_components","title":"<code>list_components(ctx, filter: Iterable[str], full_doc: bool, format: str)</code>","text":"<p>List all available streamlit components.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/interfaces/cli/streamlit.py</code> <pre><code>@streamlit.command(\"list-components\")\n@click.argument(\"filter\", nargs=-1, required=False)\n@click.option(\n    \"--full-doc\",\n    \"-d\",\n    is_flag=True,\n    help=\"Display the full doc for all operations (when using 'terminal' as format).\",\n)\n@output_format_option()\n@click.pass_context\ndef list_components(ctx, filter: Iterable[str], full_doc: bool, format: str):\n\"\"\"List all available streamlit components.\"\"\"\n\n    from kiara_plugin.streamlit.components import ComponentsInfo\n    from kiara_plugin.streamlit.streamlit import KiaraStreamlit\n\n    kiara_streamlit = KiaraStreamlit()\n\n    components = kiara_streamlit.components\n\n    title = \"Available components\"\n    if filter:\n        title = \"Filtered components\"\n        temp = {}\n        for comp_name, comp in components.items():\n            match = True\n            for f in filter:\n                if f.lower() not in comp_name.lower():\n                    match = False\n                    break\n            if match:\n                temp[comp_name] = comp\n        components = temp\n\n    infos = ComponentsInfo.create_from_instances(\n        title=title, kiara=kiara_streamlit.api.context, instances=components\n    )\n\n    terminal_print_model(infos, format=format, in_panel=title, full_doc=full_doc)\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/modules/__init__/","title":"modules","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.DummyModuleConfig","title":"<code>DummyModuleConfig</code>","text":"<p>         Bases: <code>KiaraModuleConfig</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/modules/__init__.py</code> <pre><code>class DummyModuleConfig(KiaraModuleConfig):\n    @classmethod\n    def create_pipeline_config(\n        cls, title: str, description: str, author: str, *steps: \"DummyModuleConfig\"\n    ) -&gt; PipelineConfig:\n\n        data: Dict[str, Any] = {\n            \"pipeline_name\": slugify(title),\n            \"doc\": description,\n            \"context\": {\"authors\": [author]},\n            \"steps\": [],\n        }\n        for step in steps:\n            step_data = {\n                \"step_id\": slugify(step.title),\n                \"module_type\": \"dummy\",\n                \"module_config\": {\n                    \"title\": step.title,\n                    \"inputs_schema\": step.inputs_schema,\n                    \"outputs_schema\": step.outputs_schema,\n                    \"desc\": step.desc,\n                },\n            }\n            data[\"steps\"].append(step_data)\n\n        pipeline_config = PipelineConfig.from_config(data)\n        return pipeline_config\n\n    inputs_schema: Dict[str, Dict[str, Any]] = Field(\n        description=\"The input fields and their types.\",\n    )\n\n    outputs_schema: Dict[str, Dict[str, Any]] = Field(\n        description=\"The outputs fields and their types.\",\n    )\n    title: str = Field(description=\"The title of the step.\")\n\n    desc: str = Field(description=\"A description of what this step does.\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.DummyModuleConfig-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.DummyModuleConfig.inputs_schema","title":"<code>inputs_schema: Dict[str, Dict[str, Any]] = Field(description='The input fields and their types.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.DummyModuleConfig.outputs_schema","title":"<code>outputs_schema: Dict[str, Dict[str, Any]] = Field(description='The outputs fields and their types.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.DummyModuleConfig.title","title":"<code>title: str = Field(description='The title of the step.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.DummyModuleConfig.desc","title":"<code>desc: str = Field(description='A description of what this step does.')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.DummyModuleConfig-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.DummyModuleConfig.create_pipeline_config","title":"<code>create_pipeline_config(title: str, description: str, author: str, *steps: DummyModuleConfig) -&gt; PipelineConfig</code>  <code>classmethod</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/modules/__init__.py</code> <pre><code>@classmethod\ndef create_pipeline_config(\n    cls, title: str, description: str, author: str, *steps: \"DummyModuleConfig\"\n) -&gt; PipelineConfig:\n\n    data: Dict[str, Any] = {\n        \"pipeline_name\": slugify(title),\n        \"doc\": description,\n        \"context\": {\"authors\": [author]},\n        \"steps\": [],\n    }\n    for step in steps:\n        step_data = {\n            \"step_id\": slugify(step.title),\n            \"module_type\": \"dummy\",\n            \"module_config\": {\n                \"title\": step.title,\n                \"inputs_schema\": step.inputs_schema,\n                \"outputs_schema\": step.outputs_schema,\n                \"desc\": step.desc,\n            },\n        }\n        data[\"steps\"].append(step_data)\n\n    pipeline_config = PipelineConfig.from_config(data)\n    return pipeline_config\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.Dummymodule","title":"<code>Dummymodule</code>","text":"<p>         Bases: <code>KiaraModule</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/modules/__init__.py</code> <pre><code>class Dummymodule(KiaraModule):\n\n    _module_type_name = \"dummy\"\n    _config_cls = DummyModuleConfig\n\n    def create_inputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        result = {}\n        v: Mapping[str, Any]\n        for k, v in self.get_config_value(\"inputs_schema\").items():\n            data = {\n                \"type\": v[\"type\"],\n                \"doc\": v.get(\"doc\", \"-- n/a --\"),\n                \"optional\": v.get(\"optional\", True),\n            }\n            result[k] = data\n\n        return result\n\n    def create_outputs_schema(\n        self,\n    ) -&gt; ValueMapSchema:\n\n        result = {}\n        for k, v in self.get_config_value(\"outputs_schema\").items():\n            data = {\n                \"type\": v[\"type\"],\n                \"doc\": v.get(\"doc\", \"-- n/a --\"),\n                \"optional\": v.get(\"optional\", False),\n            }\n            result[k] = data\n\n        return result\n\n    def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n        config = self.get_config_value(\"desc\")\n        print(f\"XXXX: {config}\")\n\n        outputs_schema = self.get_config_value(\"outputs_schema\")\n        field_name = next(iter(outputs_schema.keys()))\n        outputs.set_value(field_name, \"result\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.Dummymodule-attributes","title":"Attributes","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.Dummymodule._config_cls","title":"<code>_config_cls = DummyModuleConfig</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.Dummymodule-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.Dummymodule.create_inputs_schema","title":"<code>create_inputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/modules/__init__.py</code> <pre><code>def create_inputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    result = {}\n    v: Mapping[str, Any]\n    for k, v in self.get_config_value(\"inputs_schema\").items():\n        data = {\n            \"type\": v[\"type\"],\n            \"doc\": v.get(\"doc\", \"-- n/a --\"),\n            \"optional\": v.get(\"optional\", True),\n        }\n        result[k] = data\n\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.Dummymodule.create_outputs_schema","title":"<code>create_outputs_schema() -&gt; ValueMapSchema</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/modules/__init__.py</code> <pre><code>def create_outputs_schema(\n    self,\n) -&gt; ValueMapSchema:\n\n    result = {}\n    for k, v in self.get_config_value(\"outputs_schema\").items():\n        data = {\n            \"type\": v[\"type\"],\n            \"doc\": v.get(\"doc\", \"-- n/a --\"),\n            \"optional\": v.get(\"optional\", False),\n        }\n        result[k] = data\n\n    return result\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/modules/__init__/#kiara_plugin.streamlit.modules.Dummymodule.process","title":"<code>process(inputs: ValueMap, outputs: ValueMap) -&gt; None</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/modules/__init__.py</code> <pre><code>def process(self, inputs: ValueMap, outputs: ValueMap) -&gt; None:\n\n    config = self.get_config_value(\"desc\")\n    print(f\"XXXX: {config}\")\n\n    outputs_schema = self.get_config_value(\"outputs_schema\")\n    field_name = next(iter(outputs_schema.keys()))\n    outputs.set_value(field_name, \"result\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/pipelines/__init__/","title":"pipelines","text":"<p>Default (empty) module that is used as a base path for pipelines contained in this package.</p>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/","title":"renderers","text":""},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.PipelineRendererStreamlit","title":"<code>PipelineRendererStreamlit</code>","text":"<p>         Bases: <code>BaseJinjaRenderer[Pipeline, RenderInputsSchema]</code></p> <p>Renders a basic streamlit app from a pipeline structure.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>class PipelineRendererStreamlit(BaseJinjaRenderer[Pipeline, RenderInputsSchema]):\n\"\"\"Renders a basic streamlit app from a pipeline structure.\"\"\"\n\n    _renderer_name = \"pipeline_streamlit_app\"\n\n    def retrieve_jinja_env(self) -&gt; JinjaEnv:\n\n        jinja_env = JinjaEnv(template_base=\"kiara_plugin.streamlit\")\n        return jinja_env\n\n    def retrieve_supported_render_sources(self) -&gt; str:\n        return \"pipeline\"\n\n    def retrieve_supported_render_targets(cls) -&gt; Union[Iterable[str], str]:\n        return \"streamlit_app\"\n\n    def retrieve_source_transformers(self) -&gt; Iterable[SourceTransformer]:\n        return [PipelineTransformer(kiara=self._kiara)]\n\n    def get_template(self, render_config: RenderInputsSchema) -&gt; Template:\n\n        return self.get_jinja_env().get_template(\"pipeline/streamlit_app.py.j2\")\n\n    def assemble_render_inputs(\n        self, instance: Any, render_config: RenderInputsSchema\n    ) -&gt; Mapping[str, Any]:\n\n        inputs = render_config.dict()\n        inputs[\"pipeline\"] = instance\n        return inputs\n\n    def _post_process(self, rendered: str) -&gt; str:\n\n        try:\n            import black\n            from black import Mode  # type: ignore\n\n            cleaned = black.format_str(rendered, mode=Mode())\n            return cleaned\n\n        except Exception as e:\n            log_message(\n                f\"Could not format python code, 'black' not in virtual environment: {e}.\"\n            )\n            return rendered\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.PipelineRendererStreamlit-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.PipelineRendererStreamlit.retrieve_jinja_env","title":"<code>retrieve_jinja_env() -&gt; JinjaEnv</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def retrieve_jinja_env(self) -&gt; JinjaEnv:\n\n    jinja_env = JinjaEnv(template_base=\"kiara_plugin.streamlit\")\n    return jinja_env\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.PipelineRendererStreamlit.retrieve_supported_render_sources","title":"<code>retrieve_supported_render_sources() -&gt; str</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def retrieve_supported_render_sources(self) -&gt; str:\n    return \"pipeline\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.PipelineRendererStreamlit.retrieve_supported_render_targets","title":"<code>retrieve_supported_render_targets() -&gt; Union[Iterable[str], str]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def retrieve_supported_render_targets(cls) -&gt; Union[Iterable[str], str]:\n    return \"streamlit_app\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.PipelineRendererStreamlit.retrieve_source_transformers","title":"<code>retrieve_source_transformers() -&gt; Iterable[SourceTransformer]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def retrieve_source_transformers(self) -&gt; Iterable[SourceTransformer]:\n    return [PipelineTransformer(kiara=self._kiara)]\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.PipelineRendererStreamlit.get_template","title":"<code>get_template(render_config: RenderInputsSchema) -&gt; Template</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def get_template(self, render_config: RenderInputsSchema) -&gt; Template:\n\n    return self.get_jinja_env().get_template(\"pipeline/streamlit_app.py.j2\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.PipelineRendererStreamlit.assemble_render_inputs","title":"<code>assemble_render_inputs(instance: Any, render_config: RenderInputsSchema) -&gt; Mapping[str, Any]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def assemble_render_inputs(\n    self, instance: Any, render_config: RenderInputsSchema\n) -&gt; Mapping[str, Any]:\n\n    inputs = render_config.dict()\n    inputs[\"pipeline\"] = instance\n    return inputs\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitTransformer","title":"<code>KiaraStreamlitTransformer</code>","text":"<p>         Bases: <code>SourceTransformer</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>class KiaraStreamlitTransformer(SourceTransformer):\n    def __init__(self, kiara: \"Kiara\"):\n        self._kiara: \"Kiara\" = kiara\n        super().__init__()\n\n    def retrieve_supported_python_classes(self) -&gt; Iterable[Type]:\n        return [str]\n\n    def retrieve_supported_inputs_descs(self) -&gt; Union[str, Iterable[str]]:\n        return []\n\n    def validate_and_transform(self, source: Any) -&gt; Union[KiaraStreamlit, None]:\n\n        if not source or source == \"kiara_streamlit\":\n            context_config = self._kiara.context_config\n            runtime_config = self._kiara.runtime_config\n            return KiaraStreamlit(\n                context_config=context_config, runtime_config=runtime_config\n            )\n        else:\n            return None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitTransformer-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitTransformer.retrieve_supported_python_classes","title":"<code>retrieve_supported_python_classes() -&gt; Iterable[Type]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def retrieve_supported_python_classes(self) -&gt; Iterable[Type]:\n    return [str]\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitTransformer.retrieve_supported_inputs_descs","title":"<code>retrieve_supported_inputs_descs() -&gt; Union[str, Iterable[str]]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def retrieve_supported_inputs_descs(self) -&gt; Union[str, Iterable[str]]:\n    return []\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitTransformer.validate_and_transform","title":"<code>validate_and_transform(source: Any) -&gt; Union[KiaraStreamlit, None]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def validate_and_transform(self, source: Any) -&gt; Union[KiaraStreamlit, None]:\n\n    if not source or source == \"kiara_streamlit\":\n        context_config = self._kiara.context_config\n        runtime_config = self._kiara.runtime_config\n        return KiaraStreamlit(\n            context_config=context_config, runtime_config=runtime_config\n        )\n    else:\n        return None\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitAPIClassRenderer","title":"<code>KiaraStreamlitAPIClassRenderer</code>","text":"<p>         Bases: <code>BaseJinjaRenderer[KiaraStreamlit, RenderInputsSchema]</code></p> <p>Renders a Python module containing a Protocol Class.</p> <p>This is useful for development, so all the dynamic components can be picked up by IDEs.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>class KiaraStreamlitAPIClassRenderer(\n    BaseJinjaRenderer[KiaraStreamlit, RenderInputsSchema]\n):\n\"\"\"Renders a Python module containing a Protocol Class.\n\n    This is useful for development, so all the dynamic components can be picked up by IDEs.\n    \"\"\"\n\n    _renderer_name = \"streamlit_api_class\"\n\n    def retrieve_jinja_env(self) -&gt; JinjaEnv:\n\n        jinja_env = JinjaEnv(template_base=\"kiara_plugin.streamlit\")\n        return jinja_env\n\n    def retrieve_supported_render_sources(self) -&gt; str:\n        return \"kiara_streamlit\"\n\n    def retrieve_supported_render_targets(cls) -&gt; Union[Iterable[str], str]:\n        return \"python_code\"\n\n    def retrieve_source_transformers(self) -&gt; Iterable[SourceTransformer]:\n        return [KiaraStreamlitTransformer(kiara=self._kiara)]\n\n    def get_template(self, render_config: RenderInputsSchema) -&gt; Template:\n\n        return self.get_jinja_env().get_template(\"code_gen/kiara_streamlit_api.py.j2\")\n\n    def assemble_render_inputs(\n        self, instance: Any, render_config: RenderInputsSchema\n    ) -&gt; Mapping[str, Any]:\n\n        render_config.dict()\n\n        kiara_streamlit: KiaraStreamlit = instance\n        components = kiara_streamlit.components\n\n        all_methods = {}\n        imports: Dict[str, Set] = {\n            \"typing\": set(),\n            \"streamlit\": set(),\n            \"kiara\": set(),\n            \"uuid\": set(),\n        }\n        # imports[\"kiara_plugin.streamlit.streamlit\"] = {\"KiaraStreamlit\"}\n\n        for comp_name in sorted(components.keys()):\n            comp = components[comp_name]\n\n            comp_info = comp.info\n            doc = comp_info.documentation\n\n            is_type_specific_select_comp = (\n                isinstance(comp, InputComponent)\n                and comp.component_name != \"select_value\"\n            )\n\n            params = []\n            for arg_name, arg in comp_info.arguments.items():\n\n                # better hide this component, otherwise it might be confusing\n                if is_type_specific_select_comp and arg_name in [\n                    \"value_schema\",\n                    \"data_type\",\n                ]:\n                    continue\n\n                if isinstance(arg.default, str):\n                    arg_default = f'\"{arg.default}\"'\n                else:\n                    arg_default = arg.default\n\n                arg_type = arg.python_type\n                arg_type_string = arg.python_type_string\n\n                module = arg_type.__module__\n                if module != \"builtins\":\n                    imports.setdefault(module, set()).add(arg_type.__name__)\n\n                # sorry, this is dodgy as...\n                if arg_default is not None:\n                    params.append(\n                        {\n                            \"name\": arg_name,\n                            \"type\": arg_type_string,\n                            \"default\": arg_default,\n                        }\n                    )\n                elif \"Union\" in arg_type_string and \"None\" in arg_type_string:\n                    params.append(\n                        {\n                            \"name\": arg_name,\n                            \"type\": arg_type_string,\n                            \"default\": arg_default,\n                        }\n                    )\n                else:\n                    params.append({\"name\": arg_name, \"type\": arg_type_string})\n\n            imports[\"typing\"] = set()\n            signature = [\"self\"]\n            for param in params:\n                if \"default\" in param.keys():\n                    continue\n                token = f\"{param['name']}: \\\"{param['type']}\\\"\"\n                signature.append(token)\n\n            for param in params:\n                if \"default\" not in param.keys():\n                    continue\n                token = f\"{param['name']}: \\\"{param['type']}\\\"\"\n                token += f\" = {param['default']}\"\n                signature.append(token)\n\n            signature_string = f\"def {comp_name}({', '.join(signature)})\"\n            signature_string = signature_string.replace(\"NoneType\", \"None\")\n            signature_string = signature_string.replace(\"Literal\", \"str\")\n            all_methods[signature_string] = doc\n\n        data = {\"imports\": imports, \"methods\": all_methods}\n\n        return data\n\n    def _post_process(self, rendered: str) -&gt; str:\n\n        try:\n            import black\n            from black import Mode  # type: ignore\n\n            cleaned = black.format_str(rendered, mode=Mode())\n            return cleaned\n\n        except Exception as e:\n            log_message(\n                f\"Could not format python code, 'black' not in virtual environment: {e}.\"\n            )\n            return rendered\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitAPIClassRenderer-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitAPIClassRenderer.retrieve_jinja_env","title":"<code>retrieve_jinja_env() -&gt; JinjaEnv</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def retrieve_jinja_env(self) -&gt; JinjaEnv:\n\n    jinja_env = JinjaEnv(template_base=\"kiara_plugin.streamlit\")\n    return jinja_env\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitAPIClassRenderer.retrieve_supported_render_sources","title":"<code>retrieve_supported_render_sources() -&gt; str</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def retrieve_supported_render_sources(self) -&gt; str:\n    return \"kiara_streamlit\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitAPIClassRenderer.retrieve_supported_render_targets","title":"<code>retrieve_supported_render_targets() -&gt; Union[Iterable[str], str]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def retrieve_supported_render_targets(cls) -&gt; Union[Iterable[str], str]:\n    return \"python_code\"\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitAPIClassRenderer.retrieve_source_transformers","title":"<code>retrieve_source_transformers() -&gt; Iterable[SourceTransformer]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def retrieve_source_transformers(self) -&gt; Iterable[SourceTransformer]:\n    return [KiaraStreamlitTransformer(kiara=self._kiara)]\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitAPIClassRenderer.get_template","title":"<code>get_template(render_config: RenderInputsSchema) -&gt; Template</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def get_template(self, render_config: RenderInputsSchema) -&gt; Template:\n\n    return self.get_jinja_env().get_template(\"code_gen/kiara_streamlit_api.py.j2\")\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/renderers/__init__/#kiara_plugin.streamlit.renderers.KiaraStreamlitAPIClassRenderer.assemble_render_inputs","title":"<code>assemble_render_inputs(instance: Any, render_config: RenderInputsSchema) -&gt; Mapping[str, Any]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/renderers/__init__.py</code> <pre><code>def assemble_render_inputs(\n    self, instance: Any, render_config: RenderInputsSchema\n) -&gt; Mapping[str, Any]:\n\n    render_config.dict()\n\n    kiara_streamlit: KiaraStreamlit = instance\n    components = kiara_streamlit.components\n\n    all_methods = {}\n    imports: Dict[str, Set] = {\n        \"typing\": set(),\n        \"streamlit\": set(),\n        \"kiara\": set(),\n        \"uuid\": set(),\n    }\n    # imports[\"kiara_plugin.streamlit.streamlit\"] = {\"KiaraStreamlit\"}\n\n    for comp_name in sorted(components.keys()):\n        comp = components[comp_name]\n\n        comp_info = comp.info\n        doc = comp_info.documentation\n\n        is_type_specific_select_comp = (\n            isinstance(comp, InputComponent)\n            and comp.component_name != \"select_value\"\n        )\n\n        params = []\n        for arg_name, arg in comp_info.arguments.items():\n\n            # better hide this component, otherwise it might be confusing\n            if is_type_specific_select_comp and arg_name in [\n                \"value_schema\",\n                \"data_type\",\n            ]:\n                continue\n\n            if isinstance(arg.default, str):\n                arg_default = f'\"{arg.default}\"'\n            else:\n                arg_default = arg.default\n\n            arg_type = arg.python_type\n            arg_type_string = arg.python_type_string\n\n            module = arg_type.__module__\n            if module != \"builtins\":\n                imports.setdefault(module, set()).add(arg_type.__name__)\n\n            # sorry, this is dodgy as...\n            if arg_default is not None:\n                params.append(\n                    {\n                        \"name\": arg_name,\n                        \"type\": arg_type_string,\n                        \"default\": arg_default,\n                    }\n                )\n            elif \"Union\" in arg_type_string and \"None\" in arg_type_string:\n                params.append(\n                    {\n                        \"name\": arg_name,\n                        \"type\": arg_type_string,\n                        \"default\": arg_default,\n                    }\n                )\n            else:\n                params.append({\"name\": arg_name, \"type\": arg_type_string})\n\n        imports[\"typing\"] = set()\n        signature = [\"self\"]\n        for param in params:\n            if \"default\" in param.keys():\n                continue\n            token = f\"{param['name']}: \\\"{param['type']}\\\"\"\n            signature.append(token)\n\n        for param in params:\n            if \"default\" not in param.keys():\n                continue\n            token = f\"{param['name']}: \\\"{param['type']}\\\"\"\n            token += f\" = {param['default']}\"\n            signature.append(token)\n\n        signature_string = f\"def {comp_name}({', '.join(signature)})\"\n        signature_string = signature_string.replace(\"NoneType\", \"None\")\n        signature_string = signature_string.replace(\"Literal\", \"str\")\n        all_methods[signature_string] = doc\n\n    data = {\"imports\": imports, \"methods\": all_methods}\n\n    return data\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/utils/__init__/","title":"utils","text":""},{"location":"reference/kiara_plugin/streamlit/utils/class_loading/","title":"class_loading","text":""},{"location":"reference/kiara_plugin/streamlit/utils/class_loading/#kiara_plugin.streamlit.utils.class_loading-classes","title":"Classes","text":""},{"location":"reference/kiara_plugin/streamlit/utils/class_loading/#kiara_plugin.streamlit.utils.class_loading-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/utils/class_loading/#kiara_plugin.streamlit.utils.class_loading.find_kiara_streamlit_components_under","title":"<code>find_kiara_streamlit_components_under(module: Union[str, ModuleType]) -&gt; List[Type[KiaraComponent]]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/utils/class_loading.py</code> <pre><code>def find_kiara_streamlit_components_under(\n    module: Union[str, ModuleType],\n) -&gt; List[Type[\"KiaraComponent\"]]:\n\n    from kiara.utils.class_loading import find_subclasses_under\n    from kiara_plugin.streamlit.components import KiaraComponent\n\n    return find_subclasses_under(\n        base_class=KiaraComponent,  # type: ignore\n        python_module=module,\n    )\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/utils/class_loading/#kiara_plugin.streamlit.utils.class_loading.find_all_kiara_streamlit_components","title":"<code>find_all_kiara_streamlit_components() -&gt; Dict[str, Type[KiaraComponent]]</code>","text":"<p>Find all KiaraComponent subclasses via package entry points.</p> <p>TODO</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/utils/class_loading.py</code> <pre><code>def find_all_kiara_streamlit_components() -&gt; Dict[str, Type[\"KiaraComponent\"]]:\n\"\"\"Find all [KiaraComponent][kiara_plugin.streamilt.components.KiaraComponent] subclasses via package entry points.\n\n    TODO\n    \"\"\"\n\n    from kiara.utils.class_loading import load_all_subclasses_for_entry_point\n    from kiara_plugin.streamlit.components import KiaraComponent\n\n    components = load_all_subclasses_for_entry_point(\n        entry_point_name=\"kiara.streamlit_components\",\n        base_class=KiaraComponent,  # type: ignore\n        type_id_key=\"_component_name\",\n        type_id_func=_cls_name_id_func,\n        attach_python_metadata=True,\n    )\n\n    return components\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/utils/components/","title":"components","text":""},{"location":"reference/kiara_plugin/streamlit/utils/components/#kiara_plugin.streamlit.utils.components-functions","title":"Functions","text":""},{"location":"reference/kiara_plugin/streamlit/utils/components/#kiara_plugin.streamlit.utils.components.create_list_component","title":"<code>create_list_component(st: DeltaGenerator, key: str, title: str, items: List[str], height: Union[None, int] = None, default: Union[str, None] = None) -&gt; Union[None, str]</code>","text":"Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/kiara_plugin/streamlit/utils/components.py</code> <pre><code>def create_list_component(\n    st: DeltaGenerator,\n    key: str,\n    title: str,\n    items: List[str],\n    height: Union[None, int] = None,\n    default: Union[str, None] = None,\n) -&gt; Union[None, str]:\n\n    list_items = pd.DataFrame({title: items})\n    builder = GridOptionsBuilder.from_dataframe(list_items)\n    builder.configure_selection(selection_mode=\"single\", use_checkbox=False)\n    grid_options = builder.build()\n    _key = f\"{key}_component_list\"\n\n    selected_item = None\n\n    if hasattr(st, \"__enter__\"):\n        with st:\n            with warnings.catch_warnings():\n                method_list = AgGrid(\n                    list_items,\n                    height=height,\n                    gridOptions=grid_options,\n                    key=_key,\n                    columns_auto_size_mode=ColumnsAutoSizeMode.FIT_ALL_COLUMNS_TO_VIEW,\n                )\n                if method_list.selected_rows:\n                    selected_item = method_list.selected_rows[0][title]\n    else:\n        with warnings.catch_warnings():\n            method_list = AgGrid(\n                list_items,\n                height=height,\n                gridOptions=grid_options,\n                key=_key,\n                columns_auto_size_mode=ColumnsAutoSizeMode.FIT_ALL_COLUMNS_TO_VIEW,\n            )\n            if method_list.selected_rows:\n                selected_item = method_list.selected_rows[0][title]\n\n    return selected_item\n</code></pre>"},{"location":"reference/kiara_plugin/streamlit/utils/monkey_patches/","title":"monkey_patches","text":""}]}